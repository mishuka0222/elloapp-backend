// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.tl.proto

package chat

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                               TLConstructor = 0
	CRC32_immutableChatParticipant              TLConstructor = 650553001
	CRC32_immutableChat                         TLConstructor = -1557334680
	CRC32_mutableChat                           TLConstructor = -34609042
	CRC32_chatInviteAlready                     TLConstructor = -1542554274
	CRC32_chatInvite                            TLConstructor = -613035609
	CRC32_chatInvitePeek                        TLConstructor = -1394351506
	CRC32_userChatIdList                        TLConstructor = 1342599716
	CRC32_chat_getMutableChat                   TLConstructor = 741090770
	CRC32_chat_getChatListByIdList              TLConstructor = -415173319
	CRC32_chat_getChatBySelfId                  TLConstructor = 1236736584
	CRC32_chat_createChat2                      TLConstructor = -465608273
	CRC32_chat_deleteChat                       TLConstructor = 1829891102
	CRC32_chat_deleteChatUser                   TLConstructor = 187109333
	CRC32_chat_editChatTitle                    TLConstructor = -1782210905
	CRC32_chat_editChatAbout                    TLConstructor = 1551072376
	CRC32_chat_editChatPhoto                    TLConstructor = 1170384488
	CRC32_chat_editChatAdmin                    TLConstructor = 419816940
	CRC32_chat_editChatDefaultBannedRights      TLConstructor = 1513399943
	CRC32_chat_addChatUser                      TLConstructor = 2086511757
	CRC32_chat_getMutableChatByLink             TLConstructor = -1570363509
	CRC32_chat_toggleNoForwards                 TLConstructor = -711644423
	CRC32_chat_migratedToChannel                TLConstructor = 138390239
	CRC32_chat_getChatParticipantIdList         TLConstructor = 848700073
	CRC32_chat_getUsersChatIdList               TLConstructor = 792111948
	CRC32_chat_getMyChatList                    TLConstructor = -210408312
	CRC32_chat_exportChatInvite                 TLConstructor = -976256949
	CRC32_chat_getAdminsWithInvites             TLConstructor = -756399662
	CRC32_chat_getExportedChatInvite            TLConstructor = -571854256
	CRC32_chat_getExportedChatInvites           TLConstructor = -1265690378
	CRC32_chat_checkChatInvite                  TLConstructor = 1938289292
	CRC32_chat_importChatInvite                 TLConstructor = 1491493076
	CRC32_chat_getChatInviteImporters           TLConstructor = -1740221057
	CRC32_chat_deleteExportedChatInvite         TLConstructor = 1445103800
	CRC32_chat_deleteRevokedExportedChatInvites TLConstructor = -804101527
	CRC32_chat_editExportedChatInvite           TLConstructor = -1348907914
	CRC32_chat_setChatAvailableReactions        TLConstructor = -992966286
	CRC32_chat_setHistoryTTL                    TLConstructor = 1023107972
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	650553001:   "CRC32_immutableChatParticipant",
	-1557334680: "CRC32_immutableChat",
	-34609042:   "CRC32_mutableChat",
	-1542554274: "CRC32_chatInviteAlready",
	-613035609:  "CRC32_chatInvite",
	-1394351506: "CRC32_chatInvitePeek",
	1342599716:  "CRC32_userChatIdList",
	741090770:   "CRC32_chat_getMutableChat",
	-415173319:  "CRC32_chat_getChatListByIdList",
	1236736584:  "CRC32_chat_getChatBySelfId",
	-465608273:  "CRC32_chat_createChat2",
	1829891102:  "CRC32_chat_deleteChat",
	187109333:   "CRC32_chat_deleteChatUser",
	-1782210905: "CRC32_chat_editChatTitle",
	1551072376:  "CRC32_chat_editChatAbout",
	1170384488:  "CRC32_chat_editChatPhoto",
	419816940:   "CRC32_chat_editChatAdmin",
	1513399943:  "CRC32_chat_editChatDefaultBannedRights",
	2086511757:  "CRC32_chat_addChatUser",
	-1570363509: "CRC32_chat_getMutableChatByLink",
	-711644423:  "CRC32_chat_toggleNoForwards",
	138390239:   "CRC32_chat_migratedToChannel",
	848700073:   "CRC32_chat_getChatParticipantIdList",
	792111948:   "CRC32_chat_getUsersChatIdList",
	-210408312:  "CRC32_chat_getMyChatList",
	-976256949:  "CRC32_chat_exportChatInvite",
	-756399662:  "CRC32_chat_getAdminsWithInvites",
	-571854256:  "CRC32_chat_getExportedChatInvite",
	-1265690378: "CRC32_chat_getExportedChatInvites",
	1938289292:  "CRC32_chat_checkChatInvite",
	1491493076:  "CRC32_chat_importChatInvite",
	-1740221057: "CRC32_chat_getChatInviteImporters",
	1445103800:  "CRC32_chat_deleteExportedChatInvite",
	-804101527:  "CRC32_chat_deleteRevokedExportedChatInvites",
	-1348907914: "CRC32_chat_editExportedChatInvite",
	-992966286:  "CRC32_chat_setChatAvailableReactions",
	1023107972:  "CRC32_chat_setHistoryTTL",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                               0,
	"CRC32_immutableChatParticipant":              650553001,
	"CRC32_immutableChat":                         -1557334680,
	"CRC32_mutableChat":                           -34609042,
	"CRC32_chatInviteAlready":                     -1542554274,
	"CRC32_chatInvite":                            -613035609,
	"CRC32_chatInvitePeek":                        -1394351506,
	"CRC32_userChatIdList":                        1342599716,
	"CRC32_chat_getMutableChat":                   741090770,
	"CRC32_chat_getChatListByIdList":              -415173319,
	"CRC32_chat_getChatBySelfId":                  1236736584,
	"CRC32_chat_createChat2":                      -465608273,
	"CRC32_chat_deleteChat":                       1829891102,
	"CRC32_chat_deleteChatUser":                   187109333,
	"CRC32_chat_editChatTitle":                    -1782210905,
	"CRC32_chat_editChatAbout":                    1551072376,
	"CRC32_chat_editChatPhoto":                    1170384488,
	"CRC32_chat_editChatAdmin":                    419816940,
	"CRC32_chat_editChatDefaultBannedRights":      1513399943,
	"CRC32_chat_addChatUser":                      2086511757,
	"CRC32_chat_getMutableChatByLink":             -1570363509,
	"CRC32_chat_toggleNoForwards":                 -711644423,
	"CRC32_chat_migratedToChannel":                138390239,
	"CRC32_chat_getChatParticipantIdList":         848700073,
	"CRC32_chat_getUsersChatIdList":               792111948,
	"CRC32_chat_getMyChatList":                    -210408312,
	"CRC32_chat_exportChatInvite":                 -976256949,
	"CRC32_chat_getAdminsWithInvites":             -756399662,
	"CRC32_chat_getExportedChatInvite":            -571854256,
	"CRC32_chat_getExportedChatInvites":           -1265690378,
	"CRC32_chat_checkChatInvite":                  1938289292,
	"CRC32_chat_importChatInvite":                 1491493076,
	"CRC32_chat_getChatInviteImporters":           -1740221057,
	"CRC32_chat_deleteExportedChatInvite":         1445103800,
	"CRC32_chat_deleteRevokedExportedChatInvites": -804101527,
	"CRC32_chat_editExportedChatInvite":           -1348907914,
	"CRC32_chat_setChatAvailableReactions":        -992966286,
	"CRC32_chat_setHistoryTTL":                    1023107972,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{0}
}

// ChatInviteExt <--
//  + TL_chatInviteAlready
//  + TL_chatInvite
//  + TL_chatInvitePeek
//
type ChatInviteExt struct {
	PredicateName        string             `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor      `protobuf:"varint,2,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Chat                 *MutableChat       `protobuf:"bytes,3,opt,name=chat,proto3" json:"chat,omitempty"`
	RequestNeeded        bool               `protobuf:"varint,4,opt,name=request_needed,json=requestNeeded,proto3" json:"request_needed,omitempty"`
	Title                string             `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	About                *types.StringValue `protobuf:"bytes,6,opt,name=about,proto3" json:"about,omitempty"`
	Photo                *mtproto.Photo     `protobuf:"bytes,7,opt,name=photo,proto3" json:"photo,omitempty"`
	ParticipantsCount    int32              `protobuf:"varint,8,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	Participants         []int64            `protobuf:"varint,9,rep,packed,name=participants,proto3" json:"participants,omitempty"`
	Expires              int32              `protobuf:"varint,10,opt,name=expires,proto3" json:"expires,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ChatInviteExt) Reset()         { *m = ChatInviteExt{} }
func (m *ChatInviteExt) String() string { return proto.CompactTextString(m) }
func (*ChatInviteExt) ProtoMessage()    {}
func (*ChatInviteExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{0}
}
func (m *ChatInviteExt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatInviteExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatInviteExt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatInviteExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatInviteExt.Merge(m, src)
}
func (m *ChatInviteExt) XXX_Size() int {
	return m.Size()
}
func (m *ChatInviteExt) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatInviteExt.DiscardUnknown(m)
}

var xxx_messageInfo_ChatInviteExt proto.InternalMessageInfo

func (m *ChatInviteExt) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *ChatInviteExt) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *ChatInviteExt) GetChat() *MutableChat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *ChatInviteExt) GetRequestNeeded() bool {
	if m != nil {
		return m.RequestNeeded
	}
	return false
}

func (m *ChatInviteExt) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChatInviteExt) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *ChatInviteExt) GetPhoto() *mtproto.Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *ChatInviteExt) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *ChatInviteExt) GetParticipants() []int64 {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *ChatInviteExt) GetExpires() int32 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type TLChatInviteAlready struct {
	Data2                *ChatInviteExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TLChatInviteAlready) Reset()         { *m = TLChatInviteAlready{} }
func (m *TLChatInviteAlready) String() string { return proto.CompactTextString(m) }
func (*TLChatInviteAlready) ProtoMessage()    {}
func (*TLChatInviteAlready) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{1}
}
func (m *TLChatInviteAlready) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatInviteAlready) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatInviteAlready.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatInviteAlready) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatInviteAlready.Merge(m, src)
}
func (m *TLChatInviteAlready) XXX_Size() int {
	return m.Size()
}
func (m *TLChatInviteAlready) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatInviteAlready.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatInviteAlready proto.InternalMessageInfo

func (m *TLChatInviteAlready) GetData2() *ChatInviteExt {
	if m != nil {
		return m.Data2
	}
	return nil
}

type TLChatInvite struct {
	Data2                *ChatInviteExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TLChatInvite) Reset()         { *m = TLChatInvite{} }
func (m *TLChatInvite) String() string { return proto.CompactTextString(m) }
func (*TLChatInvite) ProtoMessage()    {}
func (*TLChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{2}
}
func (m *TLChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatInvite.Merge(m, src)
}
func (m *TLChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatInvite proto.InternalMessageInfo

func (m *TLChatInvite) GetData2() *ChatInviteExt {
	if m != nil {
		return m.Data2
	}
	return nil
}

type TLChatInvitePeek struct {
	Data2                *ChatInviteExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TLChatInvitePeek) Reset()         { *m = TLChatInvitePeek{} }
func (m *TLChatInvitePeek) String() string { return proto.CompactTextString(m) }
func (*TLChatInvitePeek) ProtoMessage()    {}
func (*TLChatInvitePeek) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{3}
}
func (m *TLChatInvitePeek) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatInvitePeek) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatInvitePeek.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatInvitePeek) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatInvitePeek.Merge(m, src)
}
func (m *TLChatInvitePeek) XXX_Size() int {
	return m.Size()
}
func (m *TLChatInvitePeek) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatInvitePeek.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatInvitePeek proto.InternalMessageInfo

func (m *TLChatInvitePeek) GetData2() *ChatInviteExt {
	if m != nil {
		return m.Data2
	}
	return nil
}

// ImmutableChat <--
//  + TL_immutableChat
//
type ImmutableChat struct {
	PredicateName          string                      `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor            TLConstructor               `protobuf:"varint,2,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Id                     int64                       `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Creator                int64                       `protobuf:"varint,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Title                  string                      `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Photo                  *mtproto.Photo              `protobuf:"bytes,6,opt,name=photo,proto3" json:"photo,omitempty"`
	Deactivated            bool                        `protobuf:"varint,7,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	CallActive             bool                        `protobuf:"varint,8,opt,name=call_active,json=callActive,proto3" json:"call_active,omitempty"`
	CallNotEmpty           bool                        `protobuf:"varint,9,opt,name=call_not_empty,json=callNotEmpty,proto3" json:"call_not_empty,omitempty"`
	Noforwards             bool                        `protobuf:"varint,10,opt,name=noforwards,proto3" json:"noforwards,omitempty"`
	ParticipantsCount      int32                       `protobuf:"varint,11,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	Date                   int64                       `protobuf:"varint,12,opt,name=date,proto3" json:"date,omitempty"`
	Version                int32                       `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
	MigratedTo             *mtproto.InputChannel       `protobuf:"bytes,14,opt,name=migrated_to,json=migratedTo,proto3" json:"migrated_to,omitempty"`
	DefaultBannedRights    *mtproto.ChatBannedRights   `protobuf:"bytes,15,opt,name=default_banned_rights,json=defaultBannedRights,proto3" json:"default_banned_rights,omitempty"`
	CanSetUsername         bool                        `protobuf:"varint,16,opt,name=can_set_username,json=canSetUsername,proto3" json:"can_set_username,omitempty"`
	About                  string                      `protobuf:"bytes,17,opt,name=about,proto3" json:"about,omitempty"`
	ExportedInvite         *mtproto.ExportedChatInvite `protobuf:"bytes,18,opt,name=exported_invite,json=exportedInvite,proto3" json:"exported_invite,omitempty"`
	BotInfo                []*mtproto.BotInfo          `protobuf:"bytes,19,rep,name=bot_info,json=botInfo,proto3" json:"bot_info,omitempty"`
	Call                   *mtproto.InputGroupCall     `protobuf:"bytes,20,opt,name=call,proto3" json:"call,omitempty"`
	AvailableReactionsType int32                       `protobuf:"varint,21,opt,name=available_reactions_type,json=availableReactionsType,proto3" json:"available_reactions_type,omitempty"`
	AvailableReactions     []string                    `protobuf:"bytes,22,rep,name=available_reactions,json=availableReactions,proto3" json:"available_reactions,omitempty"`
	TtlPeriod              int32                       `protobuf:"varint,23,opt,name=ttl_period,json=ttlPeriod,proto3" json:"ttl_period,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                    `json:"-"`
	XXX_unrecognized       []byte                      `json:"-"`
	XXX_sizecache          int32                       `json:"-"`
}

func (m *ImmutableChat) Reset()         { *m = ImmutableChat{} }
func (m *ImmutableChat) String() string { return proto.CompactTextString(m) }
func (*ImmutableChat) ProtoMessage()    {}
func (*ImmutableChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{4}
}
func (m *ImmutableChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImmutableChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImmutableChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImmutableChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImmutableChat.Merge(m, src)
}
func (m *ImmutableChat) XXX_Size() int {
	return m.Size()
}
func (m *ImmutableChat) XXX_DiscardUnknown() {
	xxx_messageInfo_ImmutableChat.DiscardUnknown(m)
}

var xxx_messageInfo_ImmutableChat proto.InternalMessageInfo

func (m *ImmutableChat) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *ImmutableChat) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *ImmutableChat) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ImmutableChat) GetCreator() int64 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *ImmutableChat) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ImmutableChat) GetPhoto() *mtproto.Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *ImmutableChat) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

func (m *ImmutableChat) GetCallActive() bool {
	if m != nil {
		return m.CallActive
	}
	return false
}

func (m *ImmutableChat) GetCallNotEmpty() bool {
	if m != nil {
		return m.CallNotEmpty
	}
	return false
}

func (m *ImmutableChat) GetNoforwards() bool {
	if m != nil {
		return m.Noforwards
	}
	return false
}

func (m *ImmutableChat) GetParticipantsCount() int32 {
	if m != nil {
		return m.ParticipantsCount
	}
	return 0
}

func (m *ImmutableChat) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ImmutableChat) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ImmutableChat) GetMigratedTo() *mtproto.InputChannel {
	if m != nil {
		return m.MigratedTo
	}
	return nil
}

func (m *ImmutableChat) GetDefaultBannedRights() *mtproto.ChatBannedRights {
	if m != nil {
		return m.DefaultBannedRights
	}
	return nil
}

func (m *ImmutableChat) GetCanSetUsername() bool {
	if m != nil {
		return m.CanSetUsername
	}
	return false
}

func (m *ImmutableChat) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *ImmutableChat) GetExportedInvite() *mtproto.ExportedChatInvite {
	if m != nil {
		return m.ExportedInvite
	}
	return nil
}

func (m *ImmutableChat) GetBotInfo() []*mtproto.BotInfo {
	if m != nil {
		return m.BotInfo
	}
	return nil
}

func (m *ImmutableChat) GetCall() *mtproto.InputGroupCall {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *ImmutableChat) GetAvailableReactionsType() int32 {
	if m != nil {
		return m.AvailableReactionsType
	}
	return 0
}

func (m *ImmutableChat) GetAvailableReactions() []string {
	if m != nil {
		return m.AvailableReactions
	}
	return nil
}

func (m *ImmutableChat) GetTtlPeriod() int32 {
	if m != nil {
		return m.TtlPeriod
	}
	return 0
}

type TLImmutableChat struct {
	Data2                *ImmutableChat `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TLImmutableChat) Reset()         { *m = TLImmutableChat{} }
func (m *TLImmutableChat) String() string { return proto.CompactTextString(m) }
func (*TLImmutableChat) ProtoMessage()    {}
func (*TLImmutableChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{5}
}
func (m *TLImmutableChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLImmutableChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLImmutableChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLImmutableChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLImmutableChat.Merge(m, src)
}
func (m *TLImmutableChat) XXX_Size() int {
	return m.Size()
}
func (m *TLImmutableChat) XXX_DiscardUnknown() {
	xxx_messageInfo_TLImmutableChat.DiscardUnknown(m)
}

var xxx_messageInfo_TLImmutableChat proto.InternalMessageInfo

func (m *TLImmutableChat) GetData2() *ImmutableChat {
	if m != nil {
		return m.Data2
	}
	return nil
}

// ImmutableChatParticipant <--
//  + TL_immutableChatParticipant
//
type ImmutableChatParticipant struct {
	PredicateName        string                   `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor            `protobuf:"varint,2,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Id                   int64                    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	ChatId               int64                    `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId               int64                    `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	State                int32                    `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	ParticipantType      int32                    `protobuf:"varint,7,opt,name=participant_type,json=participantType,proto3" json:"participant_type,omitempty"`
	Link                 string                   `protobuf:"bytes,8,opt,name=link,proto3" json:"link,omitempty"`
	Useage               int32                    `protobuf:"varint,9,opt,name=useage,proto3" json:"useage,omitempty"`
	InviterUserId        int64                    `protobuf:"varint,10,opt,name=inviter_user_id,json=inviterUserId,proto3" json:"inviter_user_id,omitempty"`
	InvitedAt            int64                    `protobuf:"varint,11,opt,name=invited_at,json=invitedAt,proto3" json:"invited_at,omitempty"`
	KickedAt             int64                    `protobuf:"varint,12,opt,name=kicked_at,json=kickedAt,proto3" json:"kicked_at,omitempty"`
	LeftAt               int64                    `protobuf:"varint,13,opt,name=left_at,json=leftAt,proto3" json:"left_at,omitempty"`
	AdminRights          *mtproto.ChatAdminRights `protobuf:"bytes,14,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"`
	Date                 int64                    `protobuf:"varint,15,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ImmutableChatParticipant) Reset()         { *m = ImmutableChatParticipant{} }
func (m *ImmutableChatParticipant) String() string { return proto.CompactTextString(m) }
func (*ImmutableChatParticipant) ProtoMessage()    {}
func (*ImmutableChatParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{6}
}
func (m *ImmutableChatParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImmutableChatParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImmutableChatParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImmutableChatParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImmutableChatParticipant.Merge(m, src)
}
func (m *ImmutableChatParticipant) XXX_Size() int {
	return m.Size()
}
func (m *ImmutableChatParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_ImmutableChatParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_ImmutableChatParticipant proto.InternalMessageInfo

func (m *ImmutableChatParticipant) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *ImmutableChatParticipant) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *ImmutableChatParticipant) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ImmutableChatParticipant) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *ImmutableChatParticipant) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ImmutableChatParticipant) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ImmutableChatParticipant) GetParticipantType() int32 {
	if m != nil {
		return m.ParticipantType
	}
	return 0
}

func (m *ImmutableChatParticipant) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ImmutableChatParticipant) GetUseage() int32 {
	if m != nil {
		return m.Useage
	}
	return 0
}

func (m *ImmutableChatParticipant) GetInviterUserId() int64 {
	if m != nil {
		return m.InviterUserId
	}
	return 0
}

func (m *ImmutableChatParticipant) GetInvitedAt() int64 {
	if m != nil {
		return m.InvitedAt
	}
	return 0
}

func (m *ImmutableChatParticipant) GetKickedAt() int64 {
	if m != nil {
		return m.KickedAt
	}
	return 0
}

func (m *ImmutableChatParticipant) GetLeftAt() int64 {
	if m != nil {
		return m.LeftAt
	}
	return 0
}

func (m *ImmutableChatParticipant) GetAdminRights() *mtproto.ChatAdminRights {
	if m != nil {
		return m.AdminRights
	}
	return nil
}

func (m *ImmutableChatParticipant) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

type TLImmutableChatParticipant struct {
	Data2                *ImmutableChatParticipant `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TLImmutableChatParticipant) Reset()         { *m = TLImmutableChatParticipant{} }
func (m *TLImmutableChatParticipant) String() string { return proto.CompactTextString(m) }
func (*TLImmutableChatParticipant) ProtoMessage()    {}
func (*TLImmutableChatParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{7}
}
func (m *TLImmutableChatParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLImmutableChatParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLImmutableChatParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLImmutableChatParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLImmutableChatParticipant.Merge(m, src)
}
func (m *TLImmutableChatParticipant) XXX_Size() int {
	return m.Size()
}
func (m *TLImmutableChatParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_TLImmutableChatParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_TLImmutableChatParticipant proto.InternalMessageInfo

func (m *TLImmutableChatParticipant) GetData2() *ImmutableChatParticipant {
	if m != nil {
		return m.Data2
	}
	return nil
}

// MutableChat <--
//  + TL_mutableChat
//
type MutableChat struct {
	PredicateName        string                      `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor               `protobuf:"varint,2,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Chat                 *ImmutableChat              `protobuf:"bytes,3,opt,name=chat,proto3" json:"chat,omitempty"`
	ChatParticipants     []*ImmutableChatParticipant `protobuf:"bytes,4,rep,name=chat_participants,json=chatParticipants,proto3" json:"chat_participants,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MutableChat) Reset()         { *m = MutableChat{} }
func (m *MutableChat) String() string { return proto.CompactTextString(m) }
func (*MutableChat) ProtoMessage()    {}
func (*MutableChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{8}
}
func (m *MutableChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutableChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutableChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutableChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutableChat.Merge(m, src)
}
func (m *MutableChat) XXX_Size() int {
	return m.Size()
}
func (m *MutableChat) XXX_DiscardUnknown() {
	xxx_messageInfo_MutableChat.DiscardUnknown(m)
}

var xxx_messageInfo_MutableChat proto.InternalMessageInfo

func (m *MutableChat) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *MutableChat) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *MutableChat) GetChat() *ImmutableChat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *MutableChat) GetChatParticipants() []*ImmutableChatParticipant {
	if m != nil {
		return m.ChatParticipants
	}
	return nil
}

type TLMutableChat struct {
	Data2                *MutableChat `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TLMutableChat) Reset()         { *m = TLMutableChat{} }
func (m *TLMutableChat) String() string { return proto.CompactTextString(m) }
func (*TLMutableChat) ProtoMessage()    {}
func (*TLMutableChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{9}
}
func (m *TLMutableChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMutableChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMutableChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMutableChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMutableChat.Merge(m, src)
}
func (m *TLMutableChat) XXX_Size() int {
	return m.Size()
}
func (m *TLMutableChat) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMutableChat.DiscardUnknown(m)
}

var xxx_messageInfo_TLMutableChat proto.InternalMessageInfo

func (m *TLMutableChat) GetData2() *MutableChat {
	if m != nil {
		return m.Data2
	}
	return nil
}

// UserChatIdList <--
//  + TL_userChatIdList
//
type UserChatIdList struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatIdList           []int64       `protobuf:"varint,4,rep,packed,name=chat_id_list,json=chatIdList,proto3" json:"chat_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserChatIdList) Reset()         { *m = UserChatIdList{} }
func (m *UserChatIdList) String() string { return proto.CompactTextString(m) }
func (*UserChatIdList) ProtoMessage()    {}
func (*UserChatIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{10}
}
func (m *UserChatIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserChatIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserChatIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserChatIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserChatIdList.Merge(m, src)
}
func (m *UserChatIdList) XXX_Size() int {
	return m.Size()
}
func (m *UserChatIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserChatIdList.DiscardUnknown(m)
}

var xxx_messageInfo_UserChatIdList proto.InternalMessageInfo

func (m *UserChatIdList) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *UserChatIdList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *UserChatIdList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserChatIdList) GetChatIdList() []int64 {
	if m != nil {
		return m.ChatIdList
	}
	return nil
}

type TLUserChatIdList struct {
	Data2                *UserChatIdList `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TLUserChatIdList) Reset()         { *m = TLUserChatIdList{} }
func (m *TLUserChatIdList) String() string { return proto.CompactTextString(m) }
func (*TLUserChatIdList) ProtoMessage()    {}
func (*TLUserChatIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{11}
}
func (m *TLUserChatIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUserChatIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUserChatIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUserChatIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUserChatIdList.Merge(m, src)
}
func (m *TLUserChatIdList) XXX_Size() int {
	return m.Size()
}
func (m *TLUserChatIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUserChatIdList.DiscardUnknown(m)
}

var xxx_messageInfo_TLUserChatIdList proto.InternalMessageInfo

func (m *TLUserChatIdList) GetData2() *UserChatIdList {
	if m != nil {
		return m.Data2
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatGetMutableChat struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatGetMutableChat) Reset()         { *m = TLChatGetMutableChat{} }
func (m *TLChatGetMutableChat) String() string { return proto.CompactTextString(m) }
func (*TLChatGetMutableChat) ProtoMessage()    {}
func (*TLChatGetMutableChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{12}
}
func (m *TLChatGetMutableChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetMutableChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetMutableChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetMutableChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetMutableChat.Merge(m, src)
}
func (m *TLChatGetMutableChat) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetMutableChat) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetMutableChat.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetMutableChat proto.InternalMessageInfo

func (m *TLChatGetMutableChat) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetMutableChat) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatGetChatListByIdList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId               int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	IdList               []int64       `protobuf:"varint,4,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatGetChatListByIdList) Reset()         { *m = TLChatGetChatListByIdList{} }
func (m *TLChatGetChatListByIdList) String() string { return proto.CompactTextString(m) }
func (*TLChatGetChatListByIdList) ProtoMessage()    {}
func (*TLChatGetChatListByIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{13}
}
func (m *TLChatGetChatListByIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetChatListByIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetChatListByIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetChatListByIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetChatListByIdList.Merge(m, src)
}
func (m *TLChatGetChatListByIdList) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetChatListByIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetChatListByIdList.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetChatListByIdList proto.InternalMessageInfo

func (m *TLChatGetChatListByIdList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetChatListByIdList) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatGetChatListByIdList) GetIdList() []int64 {
	if m != nil {
		return m.IdList
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatGetChatBySelfId struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId               int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId               int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatGetChatBySelfId) Reset()         { *m = TLChatGetChatBySelfId{} }
func (m *TLChatGetChatBySelfId) String() string { return proto.CompactTextString(m) }
func (*TLChatGetChatBySelfId) ProtoMessage()    {}
func (*TLChatGetChatBySelfId) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{14}
}
func (m *TLChatGetChatBySelfId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetChatBySelfId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetChatBySelfId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetChatBySelfId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetChatBySelfId.Merge(m, src)
}
func (m *TLChatGetChatBySelfId) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetChatBySelfId) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetChatBySelfId.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetChatBySelfId proto.InternalMessageInfo

func (m *TLChatGetChatBySelfId) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetChatBySelfId) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatGetChatBySelfId) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatCreateChat2 struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	CreatorId            int64         `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	UserIdList           []int64       `protobuf:"varint,4,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
	Title                string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatCreateChat2) Reset()         { *m = TLChatCreateChat2{} }
func (m *TLChatCreateChat2) String() string { return proto.CompactTextString(m) }
func (*TLChatCreateChat2) ProtoMessage()    {}
func (*TLChatCreateChat2) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{15}
}
func (m *TLChatCreateChat2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatCreateChat2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatCreateChat2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatCreateChat2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatCreateChat2.Merge(m, src)
}
func (m *TLChatCreateChat2) XXX_Size() int {
	return m.Size()
}
func (m *TLChatCreateChat2) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatCreateChat2.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatCreateChat2 proto.InternalMessageInfo

func (m *TLChatCreateChat2) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatCreateChat2) GetCreatorId() int64 {
	if m != nil {
		return m.CreatorId
	}
	return 0
}

func (m *TLChatCreateChat2) GetUserIdList() []int64 {
	if m != nil {
		return m.UserIdList
	}
	return nil
}

func (m *TLChatCreateChat2) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLChatDeleteChat struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId           int64         `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatDeleteChat) Reset()         { *m = TLChatDeleteChat{} }
func (m *TLChatDeleteChat) String() string { return proto.CompactTextString(m) }
func (*TLChatDeleteChat) ProtoMessage()    {}
func (*TLChatDeleteChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{16}
}
func (m *TLChatDeleteChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatDeleteChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatDeleteChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatDeleteChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatDeleteChat.Merge(m, src)
}
func (m *TLChatDeleteChat) XXX_Size() int {
	return m.Size()
}
func (m *TLChatDeleteChat) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatDeleteChat.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatDeleteChat proto.InternalMessageInfo

func (m *TLChatDeleteChat) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatDeleteChat) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatDeleteChat) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatDeleteChatUser struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId           int64         `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	DeleteUserId         int64         `protobuf:"varint,5,opt,name=delete_user_id,json=deleteUserId,proto3" json:"delete_user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatDeleteChatUser) Reset()         { *m = TLChatDeleteChatUser{} }
func (m *TLChatDeleteChatUser) String() string { return proto.CompactTextString(m) }
func (*TLChatDeleteChatUser) ProtoMessage()    {}
func (*TLChatDeleteChatUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{17}
}
func (m *TLChatDeleteChatUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatDeleteChatUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatDeleteChatUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatDeleteChatUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatDeleteChatUser.Merge(m, src)
}
func (m *TLChatDeleteChatUser) XXX_Size() int {
	return m.Size()
}
func (m *TLChatDeleteChatUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatDeleteChatUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatDeleteChatUser proto.InternalMessageInfo

func (m *TLChatDeleteChatUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatDeleteChatUser) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatDeleteChatUser) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *TLChatDeleteChatUser) GetDeleteUserId() int64 {
	if m != nil {
		return m.DeleteUserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatEditChatTitle struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	EditUserId           int64         `protobuf:"varint,4,opt,name=edit_user_id,json=editUserId,proto3" json:"edit_user_id,omitempty"`
	Title                string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatEditChatTitle) Reset()         { *m = TLChatEditChatTitle{} }
func (m *TLChatEditChatTitle) String() string { return proto.CompactTextString(m) }
func (*TLChatEditChatTitle) ProtoMessage()    {}
func (*TLChatEditChatTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{18}
}
func (m *TLChatEditChatTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatEditChatTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatEditChatTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatEditChatTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatEditChatTitle.Merge(m, src)
}
func (m *TLChatEditChatTitle) XXX_Size() int {
	return m.Size()
}
func (m *TLChatEditChatTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatEditChatTitle.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatEditChatTitle proto.InternalMessageInfo

func (m *TLChatEditChatTitle) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatEditChatTitle) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatEditChatTitle) GetEditUserId() int64 {
	if m != nil {
		return m.EditUserId
	}
	return 0
}

func (m *TLChatEditChatTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLChatEditChatAbout struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	EditUserId           int64         `protobuf:"varint,4,opt,name=edit_user_id,json=editUserId,proto3" json:"edit_user_id,omitempty"`
	About                string        `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatEditChatAbout) Reset()         { *m = TLChatEditChatAbout{} }
func (m *TLChatEditChatAbout) String() string { return proto.CompactTextString(m) }
func (*TLChatEditChatAbout) ProtoMessage()    {}
func (*TLChatEditChatAbout) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{19}
}
func (m *TLChatEditChatAbout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatEditChatAbout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatEditChatAbout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatEditChatAbout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatEditChatAbout.Merge(m, src)
}
func (m *TLChatEditChatAbout) XXX_Size() int {
	return m.Size()
}
func (m *TLChatEditChatAbout) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatEditChatAbout.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatEditChatAbout proto.InternalMessageInfo

func (m *TLChatEditChatAbout) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatEditChatAbout) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatEditChatAbout) GetEditUserId() int64 {
	if m != nil {
		return m.EditUserId
	}
	return 0
}

func (m *TLChatEditChatAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLChatEditChatPhoto struct {
	Constructor          TLConstructor  `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64          `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	EditUserId           int64          `protobuf:"varint,4,opt,name=edit_user_id,json=editUserId,proto3" json:"edit_user_id,omitempty"`
	ChatPhoto            *mtproto.Photo `protobuf:"bytes,5,opt,name=chat_photo,json=chatPhoto,proto3" json:"chat_photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TLChatEditChatPhoto) Reset()         { *m = TLChatEditChatPhoto{} }
func (m *TLChatEditChatPhoto) String() string { return proto.CompactTextString(m) }
func (*TLChatEditChatPhoto) ProtoMessage()    {}
func (*TLChatEditChatPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{20}
}
func (m *TLChatEditChatPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatEditChatPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatEditChatPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatEditChatPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatEditChatPhoto.Merge(m, src)
}
func (m *TLChatEditChatPhoto) XXX_Size() int {
	return m.Size()
}
func (m *TLChatEditChatPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatEditChatPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatEditChatPhoto proto.InternalMessageInfo

func (m *TLChatEditChatPhoto) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatEditChatPhoto) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatEditChatPhoto) GetEditUserId() int64 {
	if m != nil {
		return m.EditUserId
	}
	return 0
}

func (m *TLChatEditChatPhoto) GetChatPhoto() *mtproto.Photo {
	if m != nil {
		return m.ChatPhoto
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatEditChatAdmin struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId           int64         `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	EditChatAdminId      int64         `protobuf:"varint,5,opt,name=edit_chat_admin_id,json=editChatAdminId,proto3" json:"edit_chat_admin_id,omitempty"`
	IsAdmin              *mtproto.Bool `protobuf:"bytes,6,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatEditChatAdmin) Reset()         { *m = TLChatEditChatAdmin{} }
func (m *TLChatEditChatAdmin) String() string { return proto.CompactTextString(m) }
func (*TLChatEditChatAdmin) ProtoMessage()    {}
func (*TLChatEditChatAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{21}
}
func (m *TLChatEditChatAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatEditChatAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatEditChatAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatEditChatAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatEditChatAdmin.Merge(m, src)
}
func (m *TLChatEditChatAdmin) XXX_Size() int {
	return m.Size()
}
func (m *TLChatEditChatAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatEditChatAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatEditChatAdmin proto.InternalMessageInfo

func (m *TLChatEditChatAdmin) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatEditChatAdmin) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatEditChatAdmin) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *TLChatEditChatAdmin) GetEditChatAdminId() int64 {
	if m != nil {
		return m.EditChatAdminId
	}
	return 0
}

func (m *TLChatEditChatAdmin) GetIsAdmin() *mtproto.Bool {
	if m != nil {
		return m.IsAdmin
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatEditChatDefaultBannedRights struct {
	Constructor          TLConstructor             `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64                     `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId           int64                     `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	BannedRights         *mtproto.ChatBannedRights `protobuf:"bytes,5,opt,name=banned_rights,json=bannedRights,proto3" json:"banned_rights,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TLChatEditChatDefaultBannedRights) Reset()         { *m = TLChatEditChatDefaultBannedRights{} }
func (m *TLChatEditChatDefaultBannedRights) String() string { return proto.CompactTextString(m) }
func (*TLChatEditChatDefaultBannedRights) ProtoMessage()    {}
func (*TLChatEditChatDefaultBannedRights) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{22}
}
func (m *TLChatEditChatDefaultBannedRights) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatEditChatDefaultBannedRights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatEditChatDefaultBannedRights.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatEditChatDefaultBannedRights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatEditChatDefaultBannedRights.Merge(m, src)
}
func (m *TLChatEditChatDefaultBannedRights) XXX_Size() int {
	return m.Size()
}
func (m *TLChatEditChatDefaultBannedRights) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatEditChatDefaultBannedRights.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatEditChatDefaultBannedRights proto.InternalMessageInfo

func (m *TLChatEditChatDefaultBannedRights) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatEditChatDefaultBannedRights) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatEditChatDefaultBannedRights) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *TLChatEditChatDefaultBannedRights) GetBannedRights() *mtproto.ChatBannedRights {
	if m != nil {
		return m.BannedRights
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatAddChatUser struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	InviterId            int64         `protobuf:"varint,4,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	UserId               int64         `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatAddChatUser) Reset()         { *m = TLChatAddChatUser{} }
func (m *TLChatAddChatUser) String() string { return proto.CompactTextString(m) }
func (*TLChatAddChatUser) ProtoMessage()    {}
func (*TLChatAddChatUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{23}
}
func (m *TLChatAddChatUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatAddChatUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatAddChatUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatAddChatUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatAddChatUser.Merge(m, src)
}
func (m *TLChatAddChatUser) XXX_Size() int {
	return m.Size()
}
func (m *TLChatAddChatUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatAddChatUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatAddChatUser proto.InternalMessageInfo

func (m *TLChatAddChatUser) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatAddChatUser) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatAddChatUser) GetInviterId() int64 {
	if m != nil {
		return m.InviterId
	}
	return 0
}

func (m *TLChatAddChatUser) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatGetMutableChatByLink struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Link                 string        `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatGetMutableChatByLink) Reset()         { *m = TLChatGetMutableChatByLink{} }
func (m *TLChatGetMutableChatByLink) String() string { return proto.CompactTextString(m) }
func (*TLChatGetMutableChatByLink) ProtoMessage()    {}
func (*TLChatGetMutableChatByLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{24}
}
func (m *TLChatGetMutableChatByLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetMutableChatByLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetMutableChatByLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetMutableChatByLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetMutableChatByLink.Merge(m, src)
}
func (m *TLChatGetMutableChatByLink) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetMutableChatByLink) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetMutableChatByLink.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetMutableChatByLink proto.InternalMessageInfo

func (m *TLChatGetMutableChatByLink) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetMutableChatByLink) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLChatToggleNoForwards struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId           int64         `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Enabled              *mtproto.Bool `protobuf:"bytes,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatToggleNoForwards) Reset()         { *m = TLChatToggleNoForwards{} }
func (m *TLChatToggleNoForwards) String() string { return proto.CompactTextString(m) }
func (*TLChatToggleNoForwards) ProtoMessage()    {}
func (*TLChatToggleNoForwards) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{25}
}
func (m *TLChatToggleNoForwards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatToggleNoForwards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatToggleNoForwards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatToggleNoForwards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatToggleNoForwards.Merge(m, src)
}
func (m *TLChatToggleNoForwards) XXX_Size() int {
	return m.Size()
}
func (m *TLChatToggleNoForwards) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatToggleNoForwards.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatToggleNoForwards proto.InternalMessageInfo

func (m *TLChatToggleNoForwards) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatToggleNoForwards) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatToggleNoForwards) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *TLChatToggleNoForwards) GetEnabled() *mtproto.Bool {
	if m != nil {
		return m.Enabled
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatMigratedToChannel struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Chat                 *MutableChat  `protobuf:"bytes,3,opt,name=chat,proto3" json:"chat,omitempty"`
	Id                   int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash           int64         `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatMigratedToChannel) Reset()         { *m = TLChatMigratedToChannel{} }
func (m *TLChatMigratedToChannel) String() string { return proto.CompactTextString(m) }
func (*TLChatMigratedToChannel) ProtoMessage()    {}
func (*TLChatMigratedToChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{26}
}
func (m *TLChatMigratedToChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatMigratedToChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatMigratedToChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatMigratedToChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatMigratedToChannel.Merge(m, src)
}
func (m *TLChatMigratedToChannel) XXX_Size() int {
	return m.Size()
}
func (m *TLChatMigratedToChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatMigratedToChannel.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatMigratedToChannel proto.InternalMessageInfo

func (m *TLChatMigratedToChannel) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatMigratedToChannel) GetChat() *MutableChat {
	if m != nil {
		return m.Chat
	}
	return nil
}

func (m *TLChatMigratedToChannel) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLChatMigratedToChannel) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatGetChatParticipantIdList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatGetChatParticipantIdList) Reset()         { *m = TLChatGetChatParticipantIdList{} }
func (m *TLChatGetChatParticipantIdList) String() string { return proto.CompactTextString(m) }
func (*TLChatGetChatParticipantIdList) ProtoMessage()    {}
func (*TLChatGetChatParticipantIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{27}
}
func (m *TLChatGetChatParticipantIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetChatParticipantIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetChatParticipantIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetChatParticipantIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetChatParticipantIdList.Merge(m, src)
}
func (m *TLChatGetChatParticipantIdList) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetChatParticipantIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetChatParticipantIdList.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetChatParticipantIdList proto.InternalMessageInfo

func (m *TLChatGetChatParticipantIdList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetChatParticipantIdList) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatGetUsersChatIdList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Id                   []int64       `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatGetUsersChatIdList) Reset()         { *m = TLChatGetUsersChatIdList{} }
func (m *TLChatGetUsersChatIdList) String() string { return proto.CompactTextString(m) }
func (*TLChatGetUsersChatIdList) ProtoMessage()    {}
func (*TLChatGetUsersChatIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{28}
}
func (m *TLChatGetUsersChatIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetUsersChatIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetUsersChatIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetUsersChatIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetUsersChatIdList.Merge(m, src)
}
func (m *TLChatGetUsersChatIdList) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetUsersChatIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetUsersChatIdList.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetUsersChatIdList proto.InternalMessageInfo

func (m *TLChatGetUsersChatIdList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetUsersChatIdList) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatGetMyChatList struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	UserId               int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsCreator            *mtproto.Bool `protobuf:"bytes,4,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatGetMyChatList) Reset()         { *m = TLChatGetMyChatList{} }
func (m *TLChatGetMyChatList) String() string { return proto.CompactTextString(m) }
func (*TLChatGetMyChatList) ProtoMessage()    {}
func (*TLChatGetMyChatList) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{29}
}
func (m *TLChatGetMyChatList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetMyChatList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetMyChatList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetMyChatList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetMyChatList.Merge(m, src)
}
func (m *TLChatGetMyChatList) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetMyChatList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetMyChatList.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetMyChatList proto.InternalMessageInfo

func (m *TLChatGetMyChatList) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetMyChatList) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLChatGetMyChatList) GetIsCreator() *mtproto.Bool {
	if m != nil {
		return m.IsCreator
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatExportChatInvite struct {
	Constructor           TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId                int64              `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminId               int64              `protobuf:"varint,4,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	LegacyRevokePermanent bool               `protobuf:"varint,5,opt,name=legacy_revoke_permanent,json=legacyRevokePermanent,proto3" json:"legacy_revoke_permanent,omitempty"`
	RequestNeeded         bool               `protobuf:"varint,6,opt,name=request_needed,json=requestNeeded,proto3" json:"request_needed,omitempty"`
	ExpireDate            *types.Int32Value  `protobuf:"bytes,7,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	UsageLimit            *types.Int32Value  `protobuf:"bytes,8,opt,name=usage_limit,json=usageLimit,proto3" json:"usage_limit,omitempty"`
	Title                 *types.StringValue `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}           `json:"-"`
	XXX_unrecognized      []byte             `json:"-"`
	XXX_sizecache         int32              `json:"-"`
}

func (m *TLChatExportChatInvite) Reset()         { *m = TLChatExportChatInvite{} }
func (m *TLChatExportChatInvite) String() string { return proto.CompactTextString(m) }
func (*TLChatExportChatInvite) ProtoMessage()    {}
func (*TLChatExportChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{30}
}
func (m *TLChatExportChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatExportChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatExportChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatExportChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatExportChatInvite.Merge(m, src)
}
func (m *TLChatExportChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLChatExportChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatExportChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatExportChatInvite proto.InternalMessageInfo

func (m *TLChatExportChatInvite) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatExportChatInvite) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatExportChatInvite) GetAdminId() int64 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *TLChatExportChatInvite) GetLegacyRevokePermanent() bool {
	if m != nil {
		return m.LegacyRevokePermanent
	}
	return false
}

func (m *TLChatExportChatInvite) GetRequestNeeded() bool {
	if m != nil {
		return m.RequestNeeded
	}
	return false
}

func (m *TLChatExportChatInvite) GetExpireDate() *types.Int32Value {
	if m != nil {
		return m.ExpireDate
	}
	return nil
}

func (m *TLChatExportChatInvite) GetUsageLimit() *types.Int32Value {
	if m != nil {
		return m.UsageLimit
	}
	return nil
}

func (m *TLChatExportChatInvite) GetTitle() *types.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatGetAdminsWithInvites struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId               int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId               int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatGetAdminsWithInvites) Reset()         { *m = TLChatGetAdminsWithInvites{} }
func (m *TLChatGetAdminsWithInvites) String() string { return proto.CompactTextString(m) }
func (*TLChatGetAdminsWithInvites) ProtoMessage()    {}
func (*TLChatGetAdminsWithInvites) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{31}
}
func (m *TLChatGetAdminsWithInvites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetAdminsWithInvites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetAdminsWithInvites.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetAdminsWithInvites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetAdminsWithInvites.Merge(m, src)
}
func (m *TLChatGetAdminsWithInvites) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetAdminsWithInvites) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetAdminsWithInvites.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetAdminsWithInvites proto.InternalMessageInfo

func (m *TLChatGetAdminsWithInvites) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetAdminsWithInvites) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatGetAdminsWithInvites) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatGetExportedChatInvite struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Link                 string        `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatGetExportedChatInvite) Reset()         { *m = TLChatGetExportedChatInvite{} }
func (m *TLChatGetExportedChatInvite) String() string { return proto.CompactTextString(m) }
func (*TLChatGetExportedChatInvite) ProtoMessage()    {}
func (*TLChatGetExportedChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{32}
}
func (m *TLChatGetExportedChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetExportedChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetExportedChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetExportedChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetExportedChatInvite.Merge(m, src)
}
func (m *TLChatGetExportedChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetExportedChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetExportedChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetExportedChatInvite proto.InternalMessageInfo

func (m *TLChatGetExportedChatInvite) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetExportedChatInvite) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatGetExportedChatInvite) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLChatGetExportedChatInvites struct {
	Constructor          TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId               int64              `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminId              int64              `protobuf:"varint,4,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	Revoked              bool               `protobuf:"varint,5,opt,name=revoked,proto3" json:"revoked,omitempty"`
	OffsetDate           *types.Int32Value  `protobuf:"bytes,6,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetLink           *types.StringValue `protobuf:"bytes,7,opt,name=offset_link,json=offsetLink,proto3" json:"offset_link,omitempty"`
	Limit                int32              `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLChatGetExportedChatInvites) Reset()         { *m = TLChatGetExportedChatInvites{} }
func (m *TLChatGetExportedChatInvites) String() string { return proto.CompactTextString(m) }
func (*TLChatGetExportedChatInvites) ProtoMessage()    {}
func (*TLChatGetExportedChatInvites) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{33}
}
func (m *TLChatGetExportedChatInvites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetExportedChatInvites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetExportedChatInvites.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetExportedChatInvites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetExportedChatInvites.Merge(m, src)
}
func (m *TLChatGetExportedChatInvites) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetExportedChatInvites) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetExportedChatInvites.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetExportedChatInvites proto.InternalMessageInfo

func (m *TLChatGetExportedChatInvites) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetExportedChatInvites) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatGetExportedChatInvites) GetAdminId() int64 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

func (m *TLChatGetExportedChatInvites) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

func (m *TLChatGetExportedChatInvites) GetOffsetDate() *types.Int32Value {
	if m != nil {
		return m.OffsetDate
	}
	return nil
}

func (m *TLChatGetExportedChatInvites) GetOffsetLink() *types.StringValue {
	if m != nil {
		return m.OffsetLink
	}
	return nil
}

func (m *TLChatGetExportedChatInvites) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatCheckChatInvite struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId               int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Hash                 string        `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatCheckChatInvite) Reset()         { *m = TLChatCheckChatInvite{} }
func (m *TLChatCheckChatInvite) String() string { return proto.CompactTextString(m) }
func (*TLChatCheckChatInvite) ProtoMessage()    {}
func (*TLChatCheckChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{34}
}
func (m *TLChatCheckChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatCheckChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatCheckChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatCheckChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatCheckChatInvite.Merge(m, src)
}
func (m *TLChatCheckChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLChatCheckChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatCheckChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatCheckChatInvite proto.InternalMessageInfo

func (m *TLChatCheckChatInvite) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatCheckChatInvite) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatCheckChatInvite) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLChatImportChatInvite struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId               int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Hash                 string        `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatImportChatInvite) Reset()         { *m = TLChatImportChatInvite{} }
func (m *TLChatImportChatInvite) String() string { return proto.CompactTextString(m) }
func (*TLChatImportChatInvite) ProtoMessage()    {}
func (*TLChatImportChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{35}
}
func (m *TLChatImportChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatImportChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatImportChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatImportChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatImportChatInvite.Merge(m, src)
}
func (m *TLChatImportChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLChatImportChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatImportChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatImportChatInvite proto.InternalMessageInfo

func (m *TLChatImportChatInvite) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatImportChatInvite) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatImportChatInvite) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLChatGetChatInviteImporters struct {
	Constructor          TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId               int64              `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId               int64              `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Requested            bool               `protobuf:"varint,5,opt,name=requested,proto3" json:"requested,omitempty"`
	Link                 *types.StringValue `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	Q                    *types.StringValue `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	OffsetDate           int32              `protobuf:"varint,8,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetUser           int64              `protobuf:"varint,9,opt,name=offset_user,json=offsetUser,proto3" json:"offset_user,omitempty"`
	Limit                int32              `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLChatGetChatInviteImporters) Reset()         { *m = TLChatGetChatInviteImporters{} }
func (m *TLChatGetChatInviteImporters) String() string { return proto.CompactTextString(m) }
func (*TLChatGetChatInviteImporters) ProtoMessage()    {}
func (*TLChatGetChatInviteImporters) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{36}
}
func (m *TLChatGetChatInviteImporters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatGetChatInviteImporters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatGetChatInviteImporters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatGetChatInviteImporters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatGetChatInviteImporters.Merge(m, src)
}
func (m *TLChatGetChatInviteImporters) XXX_Size() int {
	return m.Size()
}
func (m *TLChatGetChatInviteImporters) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatGetChatInviteImporters.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatGetChatInviteImporters proto.InternalMessageInfo

func (m *TLChatGetChatInviteImporters) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatGetChatInviteImporters) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatGetChatInviteImporters) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatGetChatInviteImporters) GetRequested() bool {
	if m != nil {
		return m.Requested
	}
	return false
}

func (m *TLChatGetChatInviteImporters) GetLink() *types.StringValue {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *TLChatGetChatInviteImporters) GetQ() *types.StringValue {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *TLChatGetChatInviteImporters) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLChatGetChatInviteImporters) GetOffsetUser() int64 {
	if m != nil {
		return m.OffsetUser
	}
	return 0
}

func (m *TLChatGetChatInviteImporters) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatDeleteExportedChatInvite struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId               int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId               int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Link                 string        `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatDeleteExportedChatInvite) Reset()         { *m = TLChatDeleteExportedChatInvite{} }
func (m *TLChatDeleteExportedChatInvite) String() string { return proto.CompactTextString(m) }
func (*TLChatDeleteExportedChatInvite) ProtoMessage()    {}
func (*TLChatDeleteExportedChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{37}
}
func (m *TLChatDeleteExportedChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatDeleteExportedChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatDeleteExportedChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatDeleteExportedChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatDeleteExportedChatInvite.Merge(m, src)
}
func (m *TLChatDeleteExportedChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLChatDeleteExportedChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatDeleteExportedChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatDeleteExportedChatInvite proto.InternalMessageInfo

func (m *TLChatDeleteExportedChatInvite) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatDeleteExportedChatInvite) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatDeleteExportedChatInvite) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatDeleteExportedChatInvite) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

//--------------------------------------------------------------------------------------------
type TLChatDeleteRevokedExportedChatInvites struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId               int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId               int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminId              int64         `protobuf:"varint,5,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatDeleteRevokedExportedChatInvites) Reset() {
	*m = TLChatDeleteRevokedExportedChatInvites{}
}
func (m *TLChatDeleteRevokedExportedChatInvites) String() string { return proto.CompactTextString(m) }
func (*TLChatDeleteRevokedExportedChatInvites) ProtoMessage()    {}
func (*TLChatDeleteRevokedExportedChatInvites) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{38}
}
func (m *TLChatDeleteRevokedExportedChatInvites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatDeleteRevokedExportedChatInvites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatDeleteRevokedExportedChatInvites.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatDeleteRevokedExportedChatInvites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatDeleteRevokedExportedChatInvites.Merge(m, src)
}
func (m *TLChatDeleteRevokedExportedChatInvites) XXX_Size() int {
	return m.Size()
}
func (m *TLChatDeleteRevokedExportedChatInvites) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatDeleteRevokedExportedChatInvites.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatDeleteRevokedExportedChatInvites proto.InternalMessageInfo

func (m *TLChatDeleteRevokedExportedChatInvites) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatDeleteRevokedExportedChatInvites) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatDeleteRevokedExportedChatInvites) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatDeleteRevokedExportedChatInvites) GetAdminId() int64 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
type TLChatEditExportedChatInvite struct {
	Constructor          TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId               int64              `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId               int64              `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Revoked              bool               `protobuf:"varint,5,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Link                 string             `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	ExpireDate           *types.Int32Value  `protobuf:"bytes,7,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	UsageLimit           *types.Int32Value  `protobuf:"bytes,8,opt,name=usage_limit,json=usageLimit,proto3" json:"usage_limit,omitempty"`
	RequestNeeded        *mtproto.Bool      `protobuf:"bytes,9,opt,name=request_needed,json=requestNeeded,proto3" json:"request_needed,omitempty"`
	Title                *types.StringValue `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLChatEditExportedChatInvite) Reset()         { *m = TLChatEditExportedChatInvite{} }
func (m *TLChatEditExportedChatInvite) String() string { return proto.CompactTextString(m) }
func (*TLChatEditExportedChatInvite) ProtoMessage()    {}
func (*TLChatEditExportedChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{39}
}
func (m *TLChatEditExportedChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatEditExportedChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatEditExportedChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatEditExportedChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatEditExportedChatInvite.Merge(m, src)
}
func (m *TLChatEditExportedChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLChatEditExportedChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatEditExportedChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatEditExportedChatInvite proto.InternalMessageInfo

func (m *TLChatEditExportedChatInvite) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatEditExportedChatInvite) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatEditExportedChatInvite) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatEditExportedChatInvite) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

func (m *TLChatEditExportedChatInvite) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *TLChatEditExportedChatInvite) GetExpireDate() *types.Int32Value {
	if m != nil {
		return m.ExpireDate
	}
	return nil
}

func (m *TLChatEditExportedChatInvite) GetUsageLimit() *types.Int32Value {
	if m != nil {
		return m.UsageLimit
	}
	return nil
}

func (m *TLChatEditExportedChatInvite) GetRequestNeeded() *mtproto.Bool {
	if m != nil {
		return m.RequestNeeded
	}
	return nil
}

func (m *TLChatEditExportedChatInvite) GetTitle() *types.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatSetChatAvailableReactions struct {
	Constructor            TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId                 int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId                 int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AvailableReactionsType int32         `protobuf:"varint,5,opt,name=available_reactions_type,json=availableReactionsType,proto3" json:"available_reactions_type,omitempty"`
	AvailableReactions     []string      `protobuf:"bytes,6,rep,name=available_reactions,json=availableReactions,proto3" json:"available_reactions,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}      `json:"-"`
	XXX_unrecognized       []byte        `json:"-"`
	XXX_sizecache          int32         `json:"-"`
}

func (m *TLChatSetChatAvailableReactions) Reset()         { *m = TLChatSetChatAvailableReactions{} }
func (m *TLChatSetChatAvailableReactions) String() string { return proto.CompactTextString(m) }
func (*TLChatSetChatAvailableReactions) ProtoMessage()    {}
func (*TLChatSetChatAvailableReactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{40}
}
func (m *TLChatSetChatAvailableReactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatSetChatAvailableReactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatSetChatAvailableReactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatSetChatAvailableReactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatSetChatAvailableReactions.Merge(m, src)
}
func (m *TLChatSetChatAvailableReactions) XXX_Size() int {
	return m.Size()
}
func (m *TLChatSetChatAvailableReactions) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatSetChatAvailableReactions.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatSetChatAvailableReactions proto.InternalMessageInfo

func (m *TLChatSetChatAvailableReactions) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatSetChatAvailableReactions) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatSetChatAvailableReactions) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatSetChatAvailableReactions) GetAvailableReactionsType() int32 {
	if m != nil {
		return m.AvailableReactionsType
	}
	return 0
}

func (m *TLChatSetChatAvailableReactions) GetAvailableReactions() []string {
	if m != nil {
		return m.AvailableReactions
	}
	return nil
}

//--------------------------------------------------------------------------------------------
type TLChatSetHistoryTTL struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId               int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId               int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	TtlPeriod            int32         `protobuf:"varint,5,opt,name=ttl_period,json=ttlPeriod,proto3" json:"ttl_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLChatSetHistoryTTL) Reset()         { *m = TLChatSetHistoryTTL{} }
func (m *TLChatSetHistoryTTL) String() string { return proto.CompactTextString(m) }
func (*TLChatSetHistoryTTL) ProtoMessage()    {}
func (*TLChatSetHistoryTTL) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{41}
}
func (m *TLChatSetHistoryTTL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChatSetHistoryTTL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChatSetHistoryTTL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChatSetHistoryTTL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChatSetHistoryTTL.Merge(m, src)
}
func (m *TLChatSetHistoryTTL) XXX_Size() int {
	return m.Size()
}
func (m *TLChatSetHistoryTTL) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChatSetHistoryTTL.DiscardUnknown(m)
}

var xxx_messageInfo_TLChatSetHistoryTTL proto.InternalMessageInfo

func (m *TLChatSetHistoryTTL) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLChatSetHistoryTTL) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *TLChatSetHistoryTTL) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLChatSetHistoryTTL) GetTtlPeriod() int32 {
	if m != nil {
		return m.TtlPeriod
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// Vector api result type
type Vector_MutableChat struct {
	Datas                []*MutableChat `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Vector_MutableChat) Reset()         { *m = Vector_MutableChat{} }
func (m *Vector_MutableChat) String() string { return proto.CompactTextString(m) }
func (*Vector_MutableChat) ProtoMessage()    {}
func (*Vector_MutableChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{42}
}
func (m *Vector_MutableChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_MutableChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_MutableChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_MutableChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_MutableChat.Merge(m, src)
}
func (m *Vector_MutableChat) XXX_Size() int {
	return m.Size()
}
func (m *Vector_MutableChat) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_MutableChat.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_MutableChat proto.InternalMessageInfo

func (m *Vector_MutableChat) GetDatas() []*MutableChat {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_Long struct {
	Datas                []int64  `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector_Long) Reset()         { *m = Vector_Long{} }
func (m *Vector_Long) String() string { return proto.CompactTextString(m) }
func (*Vector_Long) ProtoMessage()    {}
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{43}
}
func (m *Vector_Long) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_Long) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_Long.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_Long) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_Long.Merge(m, src)
}
func (m *Vector_Long) XXX_Size() int {
	return m.Size()
}
func (m *Vector_Long) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_Long.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_Long proto.InternalMessageInfo

func (m *Vector_Long) GetDatas() []int64 {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_UserChatIdList struct {
	Datas                []*UserChatIdList `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Vector_UserChatIdList) Reset()         { *m = Vector_UserChatIdList{} }
func (m *Vector_UserChatIdList) String() string { return proto.CompactTextString(m) }
func (*Vector_UserChatIdList) ProtoMessage()    {}
func (*Vector_UserChatIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{44}
}
func (m *Vector_UserChatIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_UserChatIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_UserChatIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_UserChatIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_UserChatIdList.Merge(m, src)
}
func (m *Vector_UserChatIdList) XXX_Size() int {
	return m.Size()
}
func (m *Vector_UserChatIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_UserChatIdList.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_UserChatIdList proto.InternalMessageInfo

func (m *Vector_UserChatIdList) GetDatas() []*UserChatIdList {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_ChatAdminWithInvites struct {
	Datas                []*mtproto.ChatAdminWithInvites `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *Vector_ChatAdminWithInvites) Reset()         { *m = Vector_ChatAdminWithInvites{} }
func (m *Vector_ChatAdminWithInvites) String() string { return proto.CompactTextString(m) }
func (*Vector_ChatAdminWithInvites) ProtoMessage()    {}
func (*Vector_ChatAdminWithInvites) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{45}
}
func (m *Vector_ChatAdminWithInvites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_ChatAdminWithInvites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_ChatAdminWithInvites.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_ChatAdminWithInvites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_ChatAdminWithInvites.Merge(m, src)
}
func (m *Vector_ChatAdminWithInvites) XXX_Size() int {
	return m.Size()
}
func (m *Vector_ChatAdminWithInvites) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_ChatAdminWithInvites.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_ChatAdminWithInvites proto.InternalMessageInfo

func (m *Vector_ChatAdminWithInvites) GetDatas() []*mtproto.ChatAdminWithInvites {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_ExportedChatInvite struct {
	Datas                []*mtproto.ExportedChatInvite `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Vector_ExportedChatInvite) Reset()         { *m = Vector_ExportedChatInvite{} }
func (m *Vector_ExportedChatInvite) String() string { return proto.CompactTextString(m) }
func (*Vector_ExportedChatInvite) ProtoMessage()    {}
func (*Vector_ExportedChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{46}
}
func (m *Vector_ExportedChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_ExportedChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_ExportedChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_ExportedChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_ExportedChatInvite.Merge(m, src)
}
func (m *Vector_ExportedChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *Vector_ExportedChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_ExportedChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_ExportedChatInvite proto.InternalMessageInfo

func (m *Vector_ExportedChatInvite) GetDatas() []*mtproto.ExportedChatInvite {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_ChatInviteImporter struct {
	Datas                []*mtproto.ChatInviteImporter `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Vector_ChatInviteImporter) Reset()         { *m = Vector_ChatInviteImporter{} }
func (m *Vector_ChatInviteImporter) String() string { return proto.CompactTextString(m) }
func (*Vector_ChatInviteImporter) ProtoMessage()    {}
func (*Vector_ChatInviteImporter) Descriptor() ([]byte, []int) {
	return fileDescriptor_62195c864f87b9a0, []int{47}
}
func (m *Vector_ChatInviteImporter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_ChatInviteImporter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_ChatInviteImporter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_ChatInviteImporter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_ChatInviteImporter.Merge(m, src)
}
func (m *Vector_ChatInviteImporter) XXX_Size() int {
	return m.Size()
}
func (m *Vector_ChatInviteImporter) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_ChatInviteImporter.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_ChatInviteImporter proto.InternalMessageInfo

func (m *Vector_ChatInviteImporter) GetDatas() []*mtproto.ChatInviteImporter {
	if m != nil {
		return m.Datas
	}
	return nil
}

func init() {
	proto.RegisterEnum("chat.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*ChatInviteExt)(nil), "chat.ChatInviteExt")
	proto.RegisterType((*TLChatInviteAlready)(nil), "chat.TL_chatInviteAlready")
	proto.RegisterType((*TLChatInvite)(nil), "chat.TL_chatInvite")
	proto.RegisterType((*TLChatInvitePeek)(nil), "chat.TL_chatInvitePeek")
	proto.RegisterType((*ImmutableChat)(nil), "chat.ImmutableChat")
	proto.RegisterType((*TLImmutableChat)(nil), "chat.TL_immutableChat")
	proto.RegisterType((*ImmutableChatParticipant)(nil), "chat.ImmutableChatParticipant")
	proto.RegisterType((*TLImmutableChatParticipant)(nil), "chat.TL_immutableChatParticipant")
	proto.RegisterType((*MutableChat)(nil), "chat.MutableChat")
	proto.RegisterType((*TLMutableChat)(nil), "chat.TL_mutableChat")
	proto.RegisterType((*UserChatIdList)(nil), "chat.UserChatIdList")
	proto.RegisterType((*TLUserChatIdList)(nil), "chat.TL_userChatIdList")
	proto.RegisterType((*TLChatGetMutableChat)(nil), "chat.TL_chat_getMutableChat")
	proto.RegisterType((*TLChatGetChatListByIdList)(nil), "chat.TL_chat_getChatListByIdList")
	proto.RegisterType((*TLChatGetChatBySelfId)(nil), "chat.TL_chat_getChatBySelfId")
	proto.RegisterType((*TLChatCreateChat2)(nil), "chat.TL_chat_createChat2")
	proto.RegisterType((*TLChatDeleteChat)(nil), "chat.TL_chat_deleteChat")
	proto.RegisterType((*TLChatDeleteChatUser)(nil), "chat.TL_chat_deleteChatUser")
	proto.RegisterType((*TLChatEditChatTitle)(nil), "chat.TL_chat_editChatTitle")
	proto.RegisterType((*TLChatEditChatAbout)(nil), "chat.TL_chat_editChatAbout")
	proto.RegisterType((*TLChatEditChatPhoto)(nil), "chat.TL_chat_editChatPhoto")
	proto.RegisterType((*TLChatEditChatAdmin)(nil), "chat.TL_chat_editChatAdmin")
	proto.RegisterType((*TLChatEditChatDefaultBannedRights)(nil), "chat.TL_chat_editChatDefaultBannedRights")
	proto.RegisterType((*TLChatAddChatUser)(nil), "chat.TL_chat_addChatUser")
	proto.RegisterType((*TLChatGetMutableChatByLink)(nil), "chat.TL_chat_getMutableChatByLink")
	proto.RegisterType((*TLChatToggleNoForwards)(nil), "chat.TL_chat_toggleNoForwards")
	proto.RegisterType((*TLChatMigratedToChannel)(nil), "chat.TL_chat_migratedToChannel")
	proto.RegisterType((*TLChatGetChatParticipantIdList)(nil), "chat.TL_chat_getChatParticipantIdList")
	proto.RegisterType((*TLChatGetUsersChatIdList)(nil), "chat.TL_chat_getUsersChatIdList")
	proto.RegisterType((*TLChatGetMyChatList)(nil), "chat.TL_chat_getMyChatList")
	proto.RegisterType((*TLChatExportChatInvite)(nil), "chat.TL_chat_exportChatInvite")
	proto.RegisterType((*TLChatGetAdminsWithInvites)(nil), "chat.TL_chat_getAdminsWithInvites")
	proto.RegisterType((*TLChatGetExportedChatInvite)(nil), "chat.TL_chat_getExportedChatInvite")
	proto.RegisterType((*TLChatGetExportedChatInvites)(nil), "chat.TL_chat_getExportedChatInvites")
	proto.RegisterType((*TLChatCheckChatInvite)(nil), "chat.TL_chat_checkChatInvite")
	proto.RegisterType((*TLChatImportChatInvite)(nil), "chat.TL_chat_importChatInvite")
	proto.RegisterType((*TLChatGetChatInviteImporters)(nil), "chat.TL_chat_getChatInviteImporters")
	proto.RegisterType((*TLChatDeleteExportedChatInvite)(nil), "chat.TL_chat_deleteExportedChatInvite")
	proto.RegisterType((*TLChatDeleteRevokedExportedChatInvites)(nil), "chat.TL_chat_deleteRevokedExportedChatInvites")
	proto.RegisterType((*TLChatEditExportedChatInvite)(nil), "chat.TL_chat_editExportedChatInvite")
	proto.RegisterType((*TLChatSetChatAvailableReactions)(nil), "chat.TL_chat_setChatAvailableReactions")
	proto.RegisterType((*TLChatSetHistoryTTL)(nil), "chat.TL_chat_setHistoryTTL")
	proto.RegisterType((*Vector_MutableChat)(nil), "chat.Vector_MutableChat")
	proto.RegisterType((*Vector_Long)(nil), "chat.Vector_Long")
	proto.RegisterType((*Vector_UserChatIdList)(nil), "chat.Vector_UserChatIdList")
	proto.RegisterType((*Vector_ChatAdminWithInvites)(nil), "chat.Vector_ChatAdminWithInvites")
	proto.RegisterType((*Vector_ExportedChatInvite)(nil), "chat.Vector_ExportedChatInvite")
	proto.RegisterType((*Vector_ChatInviteImporter)(nil), "chat.Vector_ChatInviteImporter")
}

func init() { proto.RegisterFile("chat.tl.proto", fileDescriptor_62195c864f87b9a0) }

var fileDescriptor_62195c864f87b9a0 = []byte{
	// 3266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0x7f, 0x6c, 0x1c, 0xc5,
	0xf5, 0xf7, 0xe6, 0x7c, 0xfe, 0xf1, 0xce, 0x76, 0x36, 0x63, 0x3b, 0x59, 0x9f, 0x63, 0xe7, 0xb2,
	0xf9, 0x65, 0x08, 0x71, 0xbe, 0x38, 0x7c, 0x11, 0x6d, 0x81, 0xd6, 0x31, 0x50, 0x0c, 0x8e, 0x89,
	0x36, 0x0e, 0x14, 0x54, 0x75, 0xbb, 0xbe, 0x1d, 0x9f, 0x57, 0xb9, 0xbb, 0x3d, 0x76, 0xe7, 0x02,
	0xae, 0xd4, 0x0a, 0x95, 0xb6, 0x20, 0xda, 0xaa, 0x6a, 0x4b, 0x0b, 0x69, 0xa1, 0x69, 0x05, 0x2a,
	0x0d, 0xaa, 0x42, 0x51, 0x51, 0x05, 0x55, 0x7f, 0xa8, 0x94, 0x0a, 0x10, 0x44, 0xa5, 0x88, 0x50,
	0xfa, 0x93, 0x12, 0x40, 0x50, 0xda, 0x42, 0x55, 0xa9, 0x14, 0x28, 0x90, 0x6a, 0x67, 0x76, 0x6f,
	0x77, 0x76, 0xe7, 0x2e, 0x97, 0xe0, 0x38, 0xff, 0x44, 0xb7, 0xef, 0xbd, 0x79, 0xf3, 0xe6, 0xcd,
	0xe7, 0xbd, 0x79, 0xf3, 0xc6, 0x81, 0xee, 0xfc, 0xbc, 0x41, 0x46, 0x49, 0x71, 0xb4, 0xe2, 0xd8,
	0xc4, 0x46, 0xad, 0xde, 0x67, 0x76, 0x4b, 0xc1, 0x22, 0xf3, 0xd5, 0xd9, 0xd1, 0xbc, 0x5d, 0xda,
	0x5a, 0xb0, 0x0b, 0xf6, 0x56, 0xca, 0x9c, 0xad, 0xce, 0xd1, 0x2f, 0xfa, 0x41, 0x7f, 0xb1, 0x41,
	0xd9, 0xe1, 0x82, 0x6d, 0x17, 0x8a, 0x38, 0x94, 0xba, 0xc6, 0x31, 0x2a, 0x15, 0xec, 0xb8, 0x3e,
	0x3f, 0xeb, 0xe6, 0xe7, 0x71, 0xc9, 0xf0, 0x66, 0xc9, 0xdb, 0x0e, 0xd6, 0xc9, 0x42, 0x05, 0x07,
	0xbc, 0x81, 0x90, 0x47, 0x1c, 0xa3, 0xec, 0x56, 0x6c, 0x87, 0xf8, 0xac, 0xbe, 0x90, 0xe5, 0x2e,
	0x94, 0xf3, 0x8c, 0xaa, 0xde, 0x9a, 0x82, 0xee, 0x89, 0x79, 0x83, 0x4c, 0x96, 0xf7, 0x5a, 0x04,
	0x5f, 0x78, 0x2d, 0x41, 0x1b, 0xa0, 0xa7, 0xe2, 0x60, 0xd3, 0xca, 0x1b, 0x04, 0xeb, 0x65, 0xa3,
	0x84, 0x15, 0x29, 0x27, 0x8d, 0x74, 0x6a, 0xdd, 0x35, 0xea, 0xb4, 0x51, 0xc2, 0xe8, 0xff, 0x21,
	0x93, 0xb7, 0xcb, 0x2e, 0x71, 0xaa, 0x79, 0x62, 0x3b, 0xca, 0xb2, 0x9c, 0x34, 0xd2, 0x33, 0xd6,
	0x3b, 0x4a, 0xd7, 0x3f, 0x33, 0x35, 0x11, 0xb2, 0xb4, 0xa8, 0x1c, 0xda, 0x00, 0xd4, 0x27, 0x4a,
	0x2a, 0x27, 0x8d, 0x64, 0xc6, 0x56, 0x30, 0xf9, 0x1d, 0x55, 0x62, 0xcc, 0x16, 0xb1, 0x67, 0x87,
	0x46, 0xd9, 0x9e, 0x11, 0x0e, 0xbe, 0xba, 0x8a, 0x5d, 0xa2, 0x97, 0x31, 0x36, 0xb1, 0xa9, 0xb4,
	0xe6, 0xa4, 0x91, 0x0e, 0xad, 0xdb, 0xa7, 0x4e, 0x53, 0x22, 0xea, 0x83, 0x34, 0xb1, 0x48, 0x11,
	0x2b, 0x69, 0x6a, 0x22, 0xfb, 0x40, 0x63, 0x90, 0x36, 0x66, 0xed, 0x2a, 0x51, 0xda, 0xe8, 0x24,
	0xab, 0x47, 0x99, 0x43, 0x47, 0x03, 0x87, 0x8e, 0xee, 0x22, 0x8e, 0x55, 0x2e, 0x5c, 0x6e, 0x14,
	0xab, 0x58, 0x63, 0xa2, 0x68, 0x3d, 0xa4, 0x2b, 0xf3, 0x36, 0xb1, 0x95, 0x76, 0x3a, 0xa6, 0x67,
	0xb4, 0x44, 0xa8, 0xf8, 0xe8, 0x4e, 0x8f, 0xaa, 0x31, 0x26, 0xda, 0x02, 0xa8, 0x62, 0x38, 0xc4,
	0xca, 0x5b, 0x15, 0xa3, 0x4c, 0x5c, 0x3d, 0x6f, 0x57, 0xcb, 0x44, 0xe9, 0xc8, 0x49, 0x23, 0x69,
	0x6d, 0x45, 0x94, 0x33, 0xe1, 0x31, 0x90, 0x0a, 0x5d, 0x51, 0xa2, 0xd2, 0x99, 0x4b, 0x8d, 0xa4,
	0x34, 0x8e, 0x86, 0x14, 0x68, 0xc7, 0xd7, 0x56, 0x2c, 0x07, 0xbb, 0x0a, 0x50, 0x3d, 0xc1, 0xa7,
	0x3a, 0x0e, 0x7d, 0x33, 0x53, 0x7a, 0xbe, 0xb6, 0x39, 0xe3, 0x45, 0x07, 0x1b, 0xe6, 0x02, 0x3a,
	0x0d, 0xd2, 0xa6, 0x41, 0x8c, 0x31, 0xba, 0x2f, 0x99, 0xc0, 0xe7, 0xdc, 0x26, 0x6a, 0x4c, 0x42,
	0x7d, 0x3f, 0x74, 0x73, 0x2a, 0x8e, 0x67, 0xec, 0xf9, 0xb0, 0x82, 0x1b, 0xbb, 0x13, 0xe3, 0x3d,
	0xc7, 0x33, 0xfe, 0xee, 0x76, 0xe8, 0x9e, 0x2c, 0x95, 0xc2, 0xad, 0x3d, 0xc9, 0xc8, 0xea, 0x81,
	0x65, 0x96, 0x49, 0x71, 0x95, 0xd2, 0x96, 0x59, 0xa6, 0xe7, 0xd8, 0xbc, 0x83, 0x0d, 0x4f, 0x45,
	0x2b, 0x25, 0x06, 0x9f, 0x75, 0x50, 0x53, 0x43, 0x40, 0x5b, 0x23, 0x04, 0xe4, 0x20, 0x63, 0x62,
	0x23, 0x4f, 0xac, 0xbd, 0x06, 0xc1, 0x26, 0x45, 0x4b, 0x87, 0x16, 0x25, 0xa1, 0x35, 0x90, 0xc9,
	0x1b, 0xc5, 0xa2, 0x4e, 0x29, 0x98, 0x82, 0xa3, 0x43, 0x03, 0x8f, 0x34, 0x4e, 0x29, 0x68, 0x3d,
	0xf4, 0x50, 0x81, 0xb2, 0x4d, 0x74, 0x5c, 0xaa, 0x90, 0x05, 0xa5, 0x93, 0xca, 0x74, 0x79, 0xd4,
	0x69, 0x9b, 0x5c, 0xe8, 0xd1, 0xd0, 0x30, 0x40, 0xd9, 0x9e, 0xb3, 0x9d, 0x6b, 0x0c, 0xc7, 0x64,
	0xd0, 0xe8, 0xd0, 0x22, 0x94, 0x3a, 0x50, 0xcc, 0xd4, 0x83, 0x22, 0x82, 0x56, 0xd3, 0x20, 0x58,
	0xe9, 0xa2, 0xae, 0xa0, 0xbf, 0x3d, 0x0f, 0xed, 0xc5, 0x8e, 0x6b, 0xd9, 0x65, 0xa5, 0x9b, 0x41,
	0xcf, 0xff, 0x44, 0x67, 0x43, 0xa6, 0x64, 0x15, 0x1c, 0x6f, 0x3d, 0x3a, 0xb1, 0x95, 0x1e, 0xea,
	0x91, 0xfe, 0x9a, 0x47, 0x26, 0xcb, 0x95, 0x2a, 0x99, 0x98, 0x37, 0xca, 0x65, 0x5c, 0xd4, 0x20,
	0x90, 0x9c, 0xb1, 0xd1, 0x0e, 0xe8, 0x37, 0xf1, 0x9c, 0x51, 0x2d, 0x12, 0x7d, 0xd6, 0xe3, 0x9a,
	0xba, 0x63, 0x15, 0xe6, 0x89, 0xab, 0x2c, 0xa7, 0x1a, 0x06, 0x6a, 0x1a, 0x3c, 0x3c, 0x6c, 0xa7,
	0x12, 0x1a, 0x15, 0xd0, 0x7a, 0xfd, 0x71, 0x51, 0x22, 0x1a, 0x01, 0x39, 0x6f, 0x94, 0x75, 0x17,
	0x13, 0xbd, 0xea, 0x62, 0x87, 0x42, 0x46, 0xa6, 0x9e, 0xe8, 0xc9, 0x1b, 0xe5, 0x5d, 0x98, 0xec,
	0xf6, 0xa9, 0xde, 0x96, 0xb2, 0x90, 0x5f, 0xc1, 0xb6, 0x94, 0x05, 0xf5, 0x05, 0xb0, 0x1c, 0x5f,
	0xeb, 0xa5, 0x40, 0x6c, 0xea, 0x16, 0xc5, 0xa7, 0x82, 0xa8, 0x21, 0x83, 0x35, 0x43, 0x2e, 0xf4,
	0xf9, 0x21, 0x84, 0xb5, 0x9e, 0x60, 0x8c, 0x1f, 0x33, 0x9b, 0xa1, 0x63, 0xd6, 0x26, 0xba, 0x55,
	0x9e, 0xb3, 0x95, 0xde, 0x5c, 0x6a, 0x24, 0x33, 0x26, 0xd7, 0x86, 0x6f, 0xb7, 0xc9, 0x64, 0x79,
	0xce, 0xd6, 0xda, 0x67, 0xd9, 0x0f, 0xb4, 0x19, 0x5a, 0xbd, 0x6d, 0x54, 0xfa, 0xe8, 0x3c, 0xab,
	0x78, 0x97, 0x7d, 0xd8, 0xb1, 0xab, 0x95, 0x09, 0xa3, 0x58, 0xd4, 0xa8, 0x10, 0x3a, 0x07, 0x14,
	0x63, 0xaf, 0x61, 0x15, 0xbd, 0x08, 0xd1, 0x1d, 0x8a, 0x21, 0xbb, 0xec, 0xd2, 0x84, 0xae, 0xf4,
	0xd3, 0x1d, 0x59, 0x59, 0xe3, 0x6b, 0x01, 0x7b, 0x66, 0xa1, 0x82, 0xd1, 0x56, 0xe8, 0x15, 0x8c,
	0x54, 0x56, 0xe6, 0x52, 0x23, 0x9d, 0x1a, 0x4a, 0x0e, 0x42, 0x43, 0x00, 0x84, 0x14, 0xf5, 0x0a,
	0x76, 0x2c, 0xdb, 0x54, 0x56, 0x51, 0xe5, 0x9d, 0x84, 0x14, 0x77, 0x52, 0x82, 0x7a, 0x1e, 0xc8,
	0x33, 0x53, 0xba, 0xc5, 0x85, 0xab, 0x38, 0xd6, 0xb9, 0x90, 0x0e, 0x62, 0xfd, 0xdf, 0x29, 0x50,
	0x38, 0xc6, 0xce, 0x10, 0x80, 0x4b, 0x1c, 0xf6, 0xab, 0xa0, 0xdd, 0x1b, 0xa2, 0x5b, 0xa6, 0x1f,
	0xf6, 0x6d, 0x34, 0x85, 0x51, 0x86, 0x07, 0x22, 0x8f, 0x91, 0x66, 0x0c, 0xef, 0x73, 0x92, 0x1e,
	0x22, 0x2e, 0xf1, 0x62, 0xa3, 0x8d, 0x7a, 0x85, 0x7d, 0xa0, 0xd3, 0x40, 0x8e, 0x44, 0x11, 0xdb,
	0x93, 0x76, 0x2a, 0xb0, 0x3c, 0x42, 0xa7, 0x9b, 0x81, 0xa0, 0xb5, 0x68, 0x95, 0xf7, 0xd0, 0x50,
	0xef, 0xd4, 0xe8, 0x6f, 0xb4, 0x12, 0x3c, 0xf5, 0x46, 0x01, 0xd3, 0xe0, 0x4e, 0x6b, 0xfe, 0x17,
	0xda, 0x08, 0xcb, 0x19, 0x12, 0x1d, 0x3d, 0xb0, 0x06, 0xa8, 0x35, 0xdd, 0x3e, 0x79, 0x37, 0x33,
	0x6a, 0x08, 0x80, 0x11, 0x4c, 0xdd, 0x60, 0x61, 0x9d, 0xd2, 0x3a, 0x7d, 0xca, 0x38, 0x41, 0x83,
	0xd0, 0xb9, 0xc7, 0xca, 0xef, 0x61, 0x5c, 0x16, 0xd3, 0x1d, 0x8c, 0x30, 0x4e, 0xbc, 0x95, 0x16,
	0xf1, 0x1c, 0xf1, 0x58, 0xdd, 0x6c, 0xa5, 0xde, 0xe7, 0x38, 0x41, 0x1f, 0x80, 0x2e, 0xc3, 0x2c,
	0x59, 0xe5, 0x20, 0x2a, 0x59, 0x5c, 0x2b, 0x5c, 0x54, 0x8e, 0x7b, 0x02, 0x7e, 0x50, 0x66, 0x8c,
	0xf0, 0xa3, 0x96, 0x41, 0x96, 0x87, 0x19, 0x44, 0xdd, 0x05, 0x83, 0x71, 0xd8, 0x44, 0x77, 0xfe,
	0x2c, 0x1e, 0x41, 0xc3, 0x02, 0x04, 0x45, 0xc4, 0x03, 0x30, 0x3d, 0x27, 0x41, 0x66, 0xc7, 0x92,
	0x1d, 0x1b, 0x9b, 0xb8, 0x82, 0x44, 0x08, 0x72, 0x56, 0x92, 0x5c, 0x0a, 0x2b, 0x28, 0xb0, 0xb8,
	0x13, 0xbd, 0x95, 0xe6, 0x83, 0x63, 0x2d, 0x4c, 0xce, 0xf3, 0x04, 0x57, 0x7d, 0x1f, 0xf4, 0xcc,
	0x4c, 0xe9, 0xd1, 0x68, 0xdb, 0xc4, 0xfb, 0x4a, 0x50, 0x19, 0xf9, 0xee, 0x39, 0x20, 0x41, 0x8f,
	0x07, 0x12, 0x9a, 0xb1, 0xcc, 0x29, 0xcb, 0x3d, 0xd9, 0x1e, 0x8a, 0x04, 0x4e, 0x8a, 0x0b, 0x9c,
	0x1c, 0x74, 0xf9, 0xa1, 0xa6, 0x17, 0x2d, 0x97, 0x50, 0x67, 0xa4, 0x34, 0xc8, 0xd7, 0x0c, 0x53,
	0x3f, 0x48, 0x6b, 0x88, 0x2a, 0x6f, 0xed, 0xe9, 0xfc, 0x4a, 0xfb, 0x98, 0x01, 0xfc, 0x92, 0x82,
	0xc5, 0xce, 0xc3, 0x4a, 0xbf, 0x08, 0xd1, 0x0b, 0x98, 0x44, 0x51, 0x11, 0x5b, 0x8c, 0xd4, 0xfc,
	0x62, 0x82, 0xf4, 0x90, 0x8a, 0xa6, 0x07, 0xf5, 0x73, 0x12, 0xc5, 0x72, 0x30, 0x95, 0x37, 0x87,
	0x67, 0xc8, 0xf6, 0x05, 0xdf, 0xea, 0x13, 0x9f, 0xcf, 0xc5, 0xc5, 0xb9, 0xc8, 0x7c, 0xde, 0x27,
	0x4b, 0x47, 0xbc, 0xdf, 0xda, 0x2c, 0xe6, 0xb3, 0x4f, 0x4b, 0xb0, 0x2a, 0x66, 0xc8, 0xf6, 0x85,
	0x5d, 0x6c, 0xd0, 0x49, 0x30, 0x42, 0x98, 0x2c, 0xd5, 0x3b, 0x24, 0xe8, 0x0d, 0x8c, 0xa0, 0x65,
	0x13, 0x75, 0xfa, 0xd8, 0x89, 0x1a, 0x30, 0x04, 0xe0, 0x17, 0x5f, 0xa1, 0x0d, 0x9d, 0x3e, 0x85,
	0x01, 0xc9, 0x47, 0x18, 0x07, 0x24, 0x06, 0x33, 0xea, 0x7d, 0x61, 0xc9, 0xa6, 0x7e, 0x56, 0x02,
	0x14, 0x58, 0x69, 0xe2, 0x22, 0x26, 0x27, 0x05, 0x1a, 0x5e, 0x45, 0x67, 0x57, 0xb0, 0x13, 0x98,
	0xcf, 0x3c, 0x05, 0x01, 0x69, 0xd2, 0x54, 0xef, 0x91, 0x42, 0x98, 0x86, 0x76, 0x78, 0x88, 0x5e,
	0x72, 0x5b, 0xbc, 0xea, 0x92, 0x99, 0xa0, 0xf3, 0xa7, 0x5d, 0x17, 0xa3, 0xb2, 0xe3, 0x45, 0xdd,
	0x2f, 0x41, 0x7f, 0x60, 0x31, 0x36, 0x2d, 0x8a, 0xb2, 0x19, 0x5a, 0x06, 0x2f, 0xb6, 0xc1, 0x39,
	0xe8, 0xf2, 0x26, 0xa8, 0x59, 0xe3, 0x5b, 0xec, 0xd1, 0x76, 0xd7, 0xce, 0x5f, 0xc1, 0xde, 0x8a,
	0x2c, 0x1c, 0xa7, 0x55, 0xdd, 0x29, 0xb1, 0x90, 0x55, 0x97, 0xe9, 0x48, 0x75, 0xa9, 0xde, 0x2f,
	0xb0, 0x90, 0xde, 0x15, 0x4e, 0x81, 0x85, 0x5b, 0x00, 0xd8, 0xe1, 0x44, 0x6f, 0x30, 0x69, 0xe1,
	0x0d, 0xa6, 0x33, 0x1f, 0x18, 0xa8, 0x3e, 0x2b, 0x72, 0xae, 0x77, 0xd6, 0x2f, 0x3d, 0x5e, 0x37,
	0x03, 0xa2, 0x6b, 0xa3, 0xc3, 0x59, 0x75, 0x52, 0xc3, 0xec, 0x72, 0xce, 0xb6, 0x49, 0x13, 0x8d,
	0x40, 0x87, 0xe5, 0x32, 0x29, 0xff, 0x9a, 0xd6, 0x1d, 0x29, 0xc5, 0xed, 0xa2, 0xd6, 0x6e, 0xb9,
	0x54, 0x56, 0x7d, 0x5a, 0x82, 0x75, 0xf1, 0x15, 0x5e, 0x20, 0xb8, 0x62, 0x2c, 0xf9, 0x7a, 0xcf,
	0x87, 0x6e, 0xfe, 0x6a, 0x94, 0x3e, 0xd6, 0xd5, 0xa8, 0x6b, 0x36, 0xf2, 0xa5, 0xde, 0x1e, 0xc9,
	0xcc, 0x86, 0x69, 0x9e, 0xb4, 0x44, 0x53, 0x2b, 0x40, 0x23, 0xeb, 0xf0, 0x0b, 0x50, 0xa7, 0x41,
	0x35, 0xad, 0x5a, 0xb0, 0x5a, 0x7c, 0x62, 0x6f, 0x5f, 0x98, 0xf2, 0x0a, 0xe3, 0x13, 0xb4, 0x33,
	0xa8, 0xb1, 0x53, 0x61, 0x8d, 0xad, 0xde, 0x27, 0x81, 0x12, 0xcc, 0x45, 0xec, 0x42, 0xa1, 0x88,
	0xa7, 0xed, 0x8b, 0x82, 0xfb, 0xf1, 0x92, 0x6f, 0xec, 0x26, 0x68, 0xc7, 0x65, 0x6f, 0xb1, 0xa6,
	0xbf, 0xa5, 0x71, 0x68, 0xfa, 0x5c, 0xf5, 0x6e, 0x09, 0x06, 0x02, 0xb3, 0xc3, 0xbb, 0xb3, 0x7f,
	0x9d, 0x3e, 0x51, 0xbb, 0x9b, 0xec, 0xab, 0xb1, 0xdb, 0x52, 0x6b, 0xed, 0xb6, 0xb4, 0x06, 0x32,
	0x46, 0x3e, 0x8f, 0x5d, 0x57, 0x9f, 0x37, 0xdc, 0x79, 0x7f, 0x2b, 0x81, 0x91, 0x2e, 0x36, 0xdc,
	0x79, 0xd5, 0x81, 0x5c, 0xac, 0x18, 0x89, 0xd4, 0xb1, 0xef, 0xb9, 0x34, 0x12, 0x97, 0x62, 0x79,
	0xc8, 0x46, 0xe6, 0xf4, 0xd0, 0xed, 0x46, 0xca, 0xc7, 0x13, 0x9c, 0x2d, 0xb8, 0x27, 0xa6, 0xd8,
	0xca, 0xd5, 0xaf, 0x45, 0x52, 0xa0, 0x07, 0xd4, 0x85, 0xa0, 0xe2, 0x7b, 0x0f, 0xcb, 0x11, 0x97,
	0xc9, 0x67, 0x00, 0x58, 0xae, 0x1e, 0xed, 0x45, 0x25, 0xb0, 0xd1, 0x69, 0xb9, 0x13, 0x8c, 0xaf,
	0xde, 0x9c, 0x0a, 0x41, 0xcd, 0x1a, 0x11, 0x61, 0x6b, 0x62, 0xd1, 0x41, 0x3d, 0x00, 0x1d, 0xb5,
	0x94, 0xeb, 0x37, 0xc9, 0x0c, 0x3f, 0xd5, 0x9e, 0x0d, 0xab, 0x8a, 0xb8, 0x60, 0xe4, 0x17, 0x74,
	0x07, 0xef, 0xb5, 0xf7, 0x60, 0xbd, 0x82, 0x9d, 0x92, 0x51, 0xc6, 0x65, 0x76, 0x0a, 0x76, 0x68,
	0xfd, 0x8c, 0xad, 0x51, 0xee, 0xce, 0x80, 0x29, 0xe8, 0xdc, 0xb6, 0x89, 0x3a, 0xb7, 0xe7, 0x42,
	0x86, 0xf5, 0x39, 0x75, 0x7a, 0xa9, 0x6c, 0xf7, 0xdb, 0x32, 0xf1, 0x4e, 0xed, 0x64, 0x99, 0x6c,
	0x1b, 0x63, 0x8d, 0x5a, 0x60, 0xf2, 0x17, 0x78, 0x97, 0xf3, 0x73, 0x21, 0x53, 0x75, 0x8d, 0x02,
	0xd6, 0x8b, 0x56, 0xc9, 0x62, 0x0d, 0xd8, 0x63, 0x8d, 0xa6, 0xf2, 0x53, 0x9e, 0x38, 0x1a, 0x0b,
	0x0a, 0x8e, 0xce, 0x66, 0xfa, 0xc3, 0xac, 0x1c, 0xb9, 0x41, 0xe2, 0xf2, 0x1a, 0x3d, 0x64, 0xdc,
	0x2b, 0x2c, 0x32, 0xcf, 0x76, 0xc6, 0x5d, 0xba, 0xd2, 0xfc, 0x7a, 0x09, 0x86, 0x22, 0x96, 0x24,
	0x1b, 0x58, 0x8b, 0x8e, 0x92, 0x20, 0xf7, 0xb6, 0x46, 0x72, 0xef, 0xfd, 0xcb, 0x60, 0xb8, 0xa1,
	0x15, 0xee, 0x52, 0x82, 0x55, 0x81, 0x76, 0x86, 0x52, 0xd3, 0x07, 0x67, 0xf0, 0xe9, 0x21, 0xc5,
	0x9e, 0x9b, 0x73, 0x31, 0x61, 0x38, 0x6b, 0x6b, 0x02, 0x29, 0x4c, 0x9e, 0xe2, 0xec, 0xbc, 0xda,
	0x68, 0xea, 0x80, 0xf6, 0x26, 0xf0, 0xe2, 0x0f, 0xa7, 0x67, 0x5d, 0x1f, 0xa4, 0x43, 0x80, 0xa6,
	0x35, 0xf6, 0xa1, 0x7e, 0x32, 0xbc, 0xdf, 0xe5, 0xe7, 0x71, 0x7e, 0xcf, 0xa2, 0xec, 0x9c, 0x18,
	0x44, 0x08, 0x5a, 0x69, 0x5e, 0xf7, 0x77, 0xce, 0xfb, 0xad, 0x7e, 0x2a, 0xcc, 0x2f, 0x56, 0x69,
	0xd1, 0xf2, 0x4b, 0xf3, 0xf3, 0xff, 0x89, 0x47, 0x4e, 0x38, 0xfb, 0x24, 0xb5, 0x06, 0x3b, 0x4b,
	0x17, 0x4b, 0x68, 0x35, 0x74, 0xfa, 0x69, 0xa9, 0x86, 0x9c, 0x90, 0x80, 0xfe, 0xcf, 0xc7, 0x7d,
	0x33, 0xcf, 0x48, 0xac, 0xeb, 0x77, 0x3a, 0x48, 0x57, 0x37, 0x85, 0x12, 0xe9, 0x6a, 0x5a, 0x50,
	0x44, 0x90, 0xc9, 0x20, 0x12, 0x05, 0x5f, 0x28, 0xe0, 0x1d, 0x24, 0x34, 0x59, 0xa5, 0x02, 0x01,
	0x5a, 0xf2, 0xd5, 0xe0, 0x05, 0x51, 0x78, 0xed, 0x97, 0xc2, 0x23, 0x9b, 0xdd, 0xf9, 0x16, 0x35,
	0x45, 0x1c, 0xa7, 0x87, 0x83, 0xdc, 0x91, 0x8e, 0xe4, 0x8e, 0x83, 0x12, 0x8c, 0xf0, 0x16, 0xb2,
	0x43, 0xc4, 0x5c, 0xdc, 0x2c, 0x72, 0x9c, 0x96, 0x46, 0xd3, 0x4b, 0x9a, 0x4b, 0x2f, 0xea, 0xed,
	0xa9, 0x10, 0xb2, 0xde, 0x65, 0xe2, 0x54, 0x3a, 0xb4, 0x7e, 0xaa, 0x43, 0x11, 0xb8, 0x06, 0x6d,
	0xe8, 0x53, 0x79, 0xcc, 0x9e, 0x95, 0xa8, 0x04, 0x3a, 0x45, 0xb5, 0x4f, 0xac, 0x30, 0xa8, 0x1d,
	0xce, 0xd0, 0xfc, 0xe1, 0xfc, 0x1f, 0x09, 0xd6, 0x06, 0xfb, 0xe3, 0xb2, 0x94, 0x32, 0x9e, 0x7c,
	0x02, 0x59, 0xb2, 0x2d, 0x6a, 0xf4, 0xac, 0x93, 0x3e, 0x91, 0x67, 0x9d, 0xb6, 0x7a, 0xcf, 0x3a,
	0x5c, 0x97, 0xc4, 0xc5, 0xe4, 0x62, 0xcb, 0x25, 0xb6, 0xb3, 0x30, 0x33, 0x33, 0xb5, 0x74, 0xab,
	0xe5, 0x5f, 0x96, 0xd2, 0xc9, 0x97, 0x25, 0x74, 0x39, 0xf6, 0x54, 0xeb, 0x3b, 0x92, 0xdd, 0x6e,
	0x57, 0x91, 0x68, 0x03, 0xbd, 0x5e, 0xb7, 0xdb, 0x55, 0xd7, 0x41, 0xc6, 0x1f, 0x3e, 0x65, 0x97,
	0x0b, 0x5e, 0xca, 0x0b, 0xc7, 0xa5, 0x02, 0xa1, 0x09, 0xe8, 0xf7, 0x85, 0x76, 0x0b, 0x5b, 0xcd,
	0xc1, 0x34, 0x0d, 0x5a, 0xcd, 0xae, 0xaa, 0xc1, 0xa0, 0xaf, 0xa4, 0xd6, 0x71, 0x88, 0xd6, 0x77,
	0xdb, 0x78, 0x55, 0x43, 0xc9, 0x47, 0x93, 0x88, 0x74, 0xa0, 0x73, 0x1a, 0x06, 0x7c, 0x9d, 0x82,
	0x94, 0x71, 0x26, 0xaf, 0xb1, 0xe1, 0x9b, 0x64, 0x42, 0x5f, 0xf2, 0xd8, 0xac, 0xaf, 0x2f, 0x29,
	0xeb, 0xeb, 0x3b, 0xfd, 0xf9, 0x0c, 0x74, 0x73, 0x60, 0x40, 0x2b, 0xa0, 0x7b, 0x42, 0x9b, 0xd8,
	0x36, 0xa6, 0xef, 0x9e, 0xbe, 0x74, 0xfa, 0xb2, 0x2b, 0xa6, 0xe5, 0x16, 0xb4, 0x11, 0x86, 0x19,
	0xa9, 0xde, 0x3b, 0x8f, 0x7c, 0xe0, 0xd0, 0x37, 0x7e, 0xb4, 0x0c, 0xe5, 0xa0, 0x57, 0x20, 0x27,
	0xbf, 0xfc, 0xca, 0x0f, 0xf7, 0xbd, 0x75, 0xf4, 0xe8, 0xd1, 0xa3, 0x12, 0x1a, 0x86, 0x15, 0x4c,
	0x22, 0xca, 0x7f, 0xf5, 0x89, 0x9f, 0xbf, 0x76, 0x94, 0xf1, 0xd7, 0xc3, 0x2a, 0xc6, 0x4f, 0xfc,
	0xd1, 0x83, 0xfc, 0xe7, 0xb7, 0x1e, 0xf8, 0xb6, 0xaf, 0x65, 0x08, 0xe4, 0xb8, 0x94, 0x7c, 0xd7,
	0x1d, 0xbf, 0xfd, 0xc3, 0x3b, 0x8c, 0xbd, 0x16, 0xfa, 0xe2, 0xec, 0x9d, 0x18, 0xef, 0x91, 0x5f,
	0x7d, 0xe8, 0x4b, 0x2f, 0xf9, 0x1a, 0x56, 0x07, 0x22, 0xfc, 0xcb, 0x84, 0x7c, 0xe7, 0x0b, 0xfb,
	0xae, 0x4b, 0xa3, 0xb5, 0x30, 0x10, 0x2a, 0x88, 0x35, 0x31, 0xe4, 0x27, 0x1f, 0xfb, 0xc1, 0x73,
	0xcb, 0xd0, 0xe6, 0xc0, 0x25, 0xf5, 0x9e, 0x0b, 0xe4, 0x07, 0x5e, 0xb9, 0xfe, 0xc7, 0xef, 0xb2,
	0xd9, 0x54, 0xc8, 0x26, 0x85, 0x83, 0x96, 0xbe, 0xfc, 0xc8, 0x7d, 0x7f, 0x3c, 0xd4, 0x8a, 0xd6,
	0xc1, 0xca, 0x88, 0x4c, 0xa4, 0xe3, 0x2e, 0xdf, 0xf3, 0xcb, 0x77, 0xbe, 0xf3, 0x6e, 0xb0, 0xf0,
	0xfe, 0x88, 0x50, 0xd8, 0x68, 0x96, 0xbf, 0xf5, 0xcc, 0xc3, 0x2f, 0xb7, 0xa1, 0x1c, 0x67, 0x37,
	0xdf, 0x87, 0x96, 0x0f, 0xef, 0xbf, 0xed, 0x4a, 0xb4, 0x01, 0x94, 0x88, 0x04, 0xd7, 0xf7, 0x95,
	0xef, 0xfa, 0xe9, 0xd7, 0x0f, 0xbe, 0xc9, 0xe6, 0xc9, 0x09, 0xc5, 0x68, 0xf3, 0x55, 0x7e, 0xe3,
	0x8d, 0x43, 0xcf, 0xa7, 0xeb, 0x48, 0xd0, 0xde, 0xa2, 0xfc, 0xf2, 0xe3, 0x37, 0x1d, 0x6c, 0xad,
	0xa7, 0xc3, 0x8b, 0x13, 0xf9, 0xef, 0x8f, 0xdd, 0xf2, 0x88, 0x84, 0x46, 0x61, 0xa3, 0x40, 0x42,
	0xd0, 0xa3, 0x93, 0x6f, 0x38, 0xf4, 0xe4, 0x6f, 0xd2, 0x68, 0x98, 0x73, 0x51, 0xa4, 0xf5, 0x25,
	0x7f, 0xf1, 0xd1, 0xd7, 0x8f, 0xb4, 0xa3, 0x33, 0x60, 0x4d, 0xdd, 0x6d, 0x63, 0xbd, 0x27, 0xf9,
	0xf3, 0xbf, 0xbe, 0xf5, 0xab, 0x3e, 0x04, 0x46, 0x60, 0x30, 0x22, 0x1d, 0xef, 0x1e, 0xc9, 0x6f,
	0x1e, 0x7e, 0xea, 0xfb, 0x3e, 0x9e, 0xd6, 0xc1, 0xea, 0x88, 0x64, 0xa2, 0x61, 0x23, 0x3f, 0x7b,
	0xf8, 0xdd, 0x71, 0xb4, 0x19, 0xd6, 0x25, 0xf7, 0x38, 0xd1, 0x29, 0x91, 0x0f, 0xfc, 0xea, 0x99,
	0x9b, 0x53, 0x68, 0x03, 0x0c, 0xf1, 0xc2, 0xb1, 0x16, 0x87, 0xfc, 0xf8, 0xd3, 0xbf, 0x7f, 0x73,
	0x59, 0x6c, 0xb7, 0xb8, 0x1e, 0x85, 0x7c, 0xe3, 0xef, 0x0e, 0x7f, 0xf3, 0xa8, 0x68, 0x25, 0xf1,
	0x96, 0x81, 0xfc, 0xd8, 0x75, 0x3f, 0x3b, 0xf8, 0x36, 0x93, 0x4c, 0x78, 0x28, 0x71, 0x8b, 0x95,
	0x9f, 0xbc, 0xfe, 0xc0, 0x2d, 0xfe, 0xba, 0xb7, 0x40, 0x8e, 0x97, 0x4e, 0xa6, 0x25, 0xf9, 0x89,
	0x17, 0xbe, 0xf7, 0x9a, 0x2f, 0x3e, 0x0a, 0x6b, 0x8f, 0x25, 0xee, 0xca, 0xaf, 0xdf, 0xfb, 0x93,
	0x3b, 0xff, 0x2b, 0x8a, 0x8a, 0xd8, 0x45, 0x48, 0xfe, 0xc2, 0x8b, 0xfb, 0x6f, 0x6b, 0x47, 0xeb,
	0xb8, 0xa5, 0xc5, 0x6f, 0x2b, 0xf2, 0x53, 0xbf, 0xd8, 0xf7, 0x70, 0x3a, 0x39, 0xb1, 0xe0, 0x46,
	0x21, 0x1f, 0xbd, 0x7b, 0xdf, 0x83, 0x3e, 0xba, 0xf9, 0xad, 0xaa, 0x57, 0x21, 0xcb, 0xf7, 0x7f,
	0xf9, 0xa6, 0x7b, 0xd3, 0xe8, 0x1c, 0xd8, 0x9c, 0x10, 0xae, 0x5f, 0xac, 0xca, 0x7f, 0x7d, 0xe8,
	0xd1, 0xeb, 0x84, 0xfe, 0x10, 0x57, 0x8d, 0xf2, 0xeb, 0xb7, 0xbe, 0xf8, 0xb6, 0x0f, 0xc8, 0x33,
	0x61, 0x7d, 0x44, 0xbe, 0x6e, 0x15, 0x23, 0xff, 0xeb, 0x2b, 0x0f, 0x7e, 0xf7, 0x6d, 0x51, 0x9c,
	0x72, 0xc7, 0xbf, 0xfc, 0x99, 0x87, 0xff, 0xf1, 0x52, 0x2a, 0xdb, 0x7a, 0xe3, 0x1d, 0xc3, 0x2d,
	0x63, 0x7f, 0xeb, 0x85, 0x76, 0x6d, 0xe7, 0x04, 0x3d, 0x78, 0x2f, 0x86, 0x5e, 0xd1, 0x6b, 0xea,
	0xea, 0xa0, 0x30, 0x10, 0x45, 0x4f, 0x36, 0x79, 0x3c, 0xab, 0x2d, 0xe8, 0x4a, 0x50, 0xea, 0x3e,
	0x96, 0xae, 0x4d, 0xa8, 0x8b, 0x8b, 0x64, 0x15, 0x26, 0x92, 0xac, 0x0d, 0xd4, 0x16, 0x74, 0x09,
	0xf4, 0x09, 0x9f, 0x3f, 0x87, 0x84, 0x6a, 0x03, 0xb6, 0xd8, 0xcc, 0xed, 0x20, 0x27, 0x5e, 0x31,
	0x07, 0x78, 0x3d, 0x11, 0x96, 0x58, 0xc7, 0x87, 0x60, 0x79, 0xfc, 0x8d, 0x51, 0xe1, 0x55, 0x84,
	0x1c, 0xb1, 0x86, 0xc0, 0xed, 0xb1, 0xd7, 0xc1, 0xd5, 0xf5, 0xb4, 0x78, 0x5c, 0xb1, 0xa6, 0x8b,
	0x00, 0x09, 0x5e, 0xed, 0x06, 0x79, 0x45, 0x1c, 0xb3, 0x39, 0x3d, 0xec, 0x6d, 0xad, 0x8e, 0x1e,
	0xca, 0x6c, 0x4e, 0x0f, 0x7b, 0x01, 0xab, 0xa3, 0x87, 0x32, 0x9b, 0xb4, 0x87, 0x3e, 0x47, 0xd5,
	0xb3, 0xc7, 0x63, 0x8a, 0xf5, 0xcc, 0x42, 0xee, 0x98, 0x8f, 0x3e, 0xa7, 0x89, 0xb5, 0x0a, 0x44,
	0x1b, 0x63, 0x2a, 0xfa, 0xfe, 0x12, 0xc3, 0x54, 0x84, 0x25, 0xd6, 0x31, 0x03, 0x03, 0xf5, 0x1f,
	0x49, 0xd4, 0x46, 0xe1, 0xc8, 0x64, 0xc4, 0x5a, 0xa7, 0xa0, 0x5f, 0xfc, 0x1c, 0x32, 0xcc, 0x6b,
	0x8c, 0xf3, 0xc5, 0xda, 0x2e, 0x81, 0x95, 0x75, 0x5e, 0x29, 0xd6, 0xf0, 0xea, 0x12, 0x02, 0x59,
	0xfe, 0x92, 0xa7, 0xb6, 0xa0, 0x8f, 0xc2, 0x50, 0xe3, 0x57, 0x84, 0x8d, 0xc2, 0xe0, 0x4e, 0xc8,
	0x05, 0x96, 0x46, 0x6e, 0x05, 0x6a, 0x0b, 0xba, 0x0a, 0x56, 0xd5, 0x7b, 0x2f, 0xc8, 0x25, 0xf4,
	0xc6, 0x24, 0xb2, 0x83, 0x9c, 0x46, 0xfe, 0x76, 0xa0, 0xb6, 0xa0, 0x1d, 0x3e, 0x32, 0xf9, 0x57,
	0x82, 0xc1, 0xe4, 0x16, 0xd5, 0x98, 0x0d, 0x93, 0xdb, 0xe5, 0xfe, 0x16, 0x25, 0x9a, 0xfb, 0xb1,
	0x2d, 0x8a, 0xf3, 0xb3, 0x8d, 0x2e, 0x08, 0x6a, 0x0b, 0x32, 0x43, 0x40, 0x25, 0xbb, 0xd3, 0x49,
	0x40, 0x25, 0x64, 0xb2, 0x6b, 0x39, 0xa3, 0x45, 0xd7, 0x1a, 0xb5, 0x05, 0x7d, 0x1c, 0xb2, 0x0d,
	0x3a, 0xcf, 0xeb, 0x12, 0xd3, 0x24, 0x85, 0x8e, 0xb5, 0x8e, 0x39, 0x18, 0x6c, 0xd4, 0x55, 0x5e,
	0xdf, 0xc4, 0x14, 0x6e, 0x76, 0x0d, 0xb7, 0x16, 0xe1, 0x3c, 0x53, 0xfe, 0x21, 0x13, 0xef, 0xc1,
	0xc6, 0x0e, 0x99, 0x18, 0x3b, 0x2b, 0xfa, 0x93, 0xe7, 0x48, 0xe0, 0x25, 0x5a, 0xaa, 0xb1, 0x5d,
	0x8d, 0xf3, 0xc5, 0x81, 0x17, 0xf1, 0x81, 0xa8, 0x3f, 0xba, 0x5e, 0x18, 0x2a, 0x31, 0xa9, 0x98,
	0x0f, 0x92, 0x12, 0x6a, 0x0b, 0xfa, 0x88, 0x1f, 0x94, 0x75, 0xfb, 0x84, 0x1b, 0x45, 0x07, 0x94,
	0x60, 0x4f, 0x13, 0xe1, 0x3e, 0x0f, 0x1b, 0x9a, 0xeb, 0xef, 0x8d, 0x8a, 0x66, 0xa8, 0x2f, 0x9f,
	0x9c, 0x29, 0xf0, 0x55, 0x9d, 0xc6, 0xdc, 0xfa, 0x64, 0xae, 0x17, 0xd8, 0xdf, 0x04, 0x5e, 0x3e,
	0x06, 0xc3, 0xc7, 0x68, 0x30, 0x6d, 0xe2, 0xa7, 0xaa, 0x2b, 0xd8, 0xf8, 0x00, 0xe4, 0xdb, 0x38,
	0x83, 0x09, 0x9d, 0x21, 0x53, 0xa8, 0x67, 0xfb, 0x65, 0xff, 0x7c, 0x6e, 0x58, 0x7a, 0xe4, 0xc8,
	0xb0, 0xf4, 0xc4, 0x91, 0x61, 0xe9, 0x2f, 0x47, 0x86, 0xa5, 0xab, 0xce, 0x8b, 0xfc, 0xff, 0x13,
	0x82, 0x8d, 0x52, 0xc1, 0x31, 0xc2, 0x1f, 0x5b, 0x5c, 0xec, 0xec, 0xc5, 0xce, 0x56, 0xa3, 0x52,
	0xd9, 0xea, 0xfd, 0xb4, 0xf2, 0x78, 0xeb, 0xac, 0xf5, 0x89, 0xad, 0x9e, 0x66, 0xfa, 0xcf, 0x6c,
	0x1b, 0x75, 0xf7, 0xb6, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xdc, 0x89, 0x0a, 0xdc, 0x32,
	0x00, 0x00,
}

func (this *ChatInviteExt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&chat.ChatInviteExt{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Chat != nil {
		s = append(s, "Chat: "+fmt.Sprintf("%#v", this.Chat)+",\n")
	}
	s = append(s, "RequestNeeded: "+fmt.Sprintf("%#v", this.RequestNeeded)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	if this.Photo != nil {
		s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	}
	s = append(s, "ParticipantsCount: "+fmt.Sprintf("%#v", this.ParticipantsCount)+",\n")
	s = append(s, "Participants: "+fmt.Sprintf("%#v", this.Participants)+",\n")
	s = append(s, "Expires: "+fmt.Sprintf("%#v", this.Expires)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatInviteAlready) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.TLChatInviteAlready{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.TLChatInvite{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatInvitePeek) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.TLChatInvitePeek{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImmutableChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 27)
	s = append(s, "&chat.ImmutableChat{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Creator: "+fmt.Sprintf("%#v", this.Creator)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Photo != nil {
		s = append(s, "Photo: "+fmt.Sprintf("%#v", this.Photo)+",\n")
	}
	s = append(s, "Deactivated: "+fmt.Sprintf("%#v", this.Deactivated)+",\n")
	s = append(s, "CallActive: "+fmt.Sprintf("%#v", this.CallActive)+",\n")
	s = append(s, "CallNotEmpty: "+fmt.Sprintf("%#v", this.CallNotEmpty)+",\n")
	s = append(s, "Noforwards: "+fmt.Sprintf("%#v", this.Noforwards)+",\n")
	s = append(s, "ParticipantsCount: "+fmt.Sprintf("%#v", this.ParticipantsCount)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.MigratedTo != nil {
		s = append(s, "MigratedTo: "+fmt.Sprintf("%#v", this.MigratedTo)+",\n")
	}
	if this.DefaultBannedRights != nil {
		s = append(s, "DefaultBannedRights: "+fmt.Sprintf("%#v", this.DefaultBannedRights)+",\n")
	}
	s = append(s, "CanSetUsername: "+fmt.Sprintf("%#v", this.CanSetUsername)+",\n")
	s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	if this.ExportedInvite != nil {
		s = append(s, "ExportedInvite: "+fmt.Sprintf("%#v", this.ExportedInvite)+",\n")
	}
	if this.BotInfo != nil {
		s = append(s, "BotInfo: "+fmt.Sprintf("%#v", this.BotInfo)+",\n")
	}
	if this.Call != nil {
		s = append(s, "Call: "+fmt.Sprintf("%#v", this.Call)+",\n")
	}
	s = append(s, "AvailableReactionsType: "+fmt.Sprintf("%#v", this.AvailableReactionsType)+",\n")
	s = append(s, "AvailableReactions: "+fmt.Sprintf("%#v", this.AvailableReactions)+",\n")
	s = append(s, "TtlPeriod: "+fmt.Sprintf("%#v", this.TtlPeriod)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLImmutableChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.TLImmutableChat{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImmutableChatParticipant) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&chat.ImmutableChatParticipant{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "ParticipantType: "+fmt.Sprintf("%#v", this.ParticipantType)+",\n")
	s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	s = append(s, "Useage: "+fmt.Sprintf("%#v", this.Useage)+",\n")
	s = append(s, "InviterUserId: "+fmt.Sprintf("%#v", this.InviterUserId)+",\n")
	s = append(s, "InvitedAt: "+fmt.Sprintf("%#v", this.InvitedAt)+",\n")
	s = append(s, "KickedAt: "+fmt.Sprintf("%#v", this.KickedAt)+",\n")
	s = append(s, "LeftAt: "+fmt.Sprintf("%#v", this.LeftAt)+",\n")
	if this.AdminRights != nil {
		s = append(s, "AdminRights: "+fmt.Sprintf("%#v", this.AdminRights)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLImmutableChatParticipant) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.TLImmutableChatParticipant{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MutableChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.MutableChat{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Chat != nil {
		s = append(s, "Chat: "+fmt.Sprintf("%#v", this.Chat)+",\n")
	}
	if this.ChatParticipants != nil {
		s = append(s, "ChatParticipants: "+fmt.Sprintf("%#v", this.ChatParticipants)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLMutableChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.TLMutableChat{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserChatIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.UserChatIdList{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "ChatIdList: "+fmt.Sprintf("%#v", this.ChatIdList)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUserChatIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.TLUserChatIdList{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetMutableChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chat.TLChatGetMutableChat{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetChatListByIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chat.TLChatGetChatListByIdList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "IdList: "+fmt.Sprintf("%#v", this.IdList)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetChatBySelfId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chat.TLChatGetChatBySelfId{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatCreateChat2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatCreateChat2{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "CreatorId: "+fmt.Sprintf("%#v", this.CreatorId)+",\n")
	s = append(s, "UserIdList: "+fmt.Sprintf("%#v", this.UserIdList)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatDeleteChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chat.TLChatDeleteChat{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "OperatorId: "+fmt.Sprintf("%#v", this.OperatorId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatDeleteChatUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatDeleteChatUser{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "OperatorId: "+fmt.Sprintf("%#v", this.OperatorId)+",\n")
	s = append(s, "DeleteUserId: "+fmt.Sprintf("%#v", this.DeleteUserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatEditChatTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatEditChatTitle{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "EditUserId: "+fmt.Sprintf("%#v", this.EditUserId)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatEditChatAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatEditChatAbout{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "EditUserId: "+fmt.Sprintf("%#v", this.EditUserId)+",\n")
	s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatEditChatPhoto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatEditChatPhoto{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "EditUserId: "+fmt.Sprintf("%#v", this.EditUserId)+",\n")
	if this.ChatPhoto != nil {
		s = append(s, "ChatPhoto: "+fmt.Sprintf("%#v", this.ChatPhoto)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatEditChatAdmin) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&chat.TLChatEditChatAdmin{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "OperatorId: "+fmt.Sprintf("%#v", this.OperatorId)+",\n")
	s = append(s, "EditChatAdminId: "+fmt.Sprintf("%#v", this.EditChatAdminId)+",\n")
	if this.IsAdmin != nil {
		s = append(s, "IsAdmin: "+fmt.Sprintf("%#v", this.IsAdmin)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatEditChatDefaultBannedRights) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatEditChatDefaultBannedRights{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "OperatorId: "+fmt.Sprintf("%#v", this.OperatorId)+",\n")
	if this.BannedRights != nil {
		s = append(s, "BannedRights: "+fmt.Sprintf("%#v", this.BannedRights)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatAddChatUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatAddChatUser{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "InviterId: "+fmt.Sprintf("%#v", this.InviterId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetMutableChatByLink) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chat.TLChatGetMutableChatByLink{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatToggleNoForwards) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatToggleNoForwards{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "OperatorId: "+fmt.Sprintf("%#v", this.OperatorId)+",\n")
	if this.Enabled != nil {
		s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatMigratedToChannel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatMigratedToChannel{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Chat != nil {
		s = append(s, "Chat: "+fmt.Sprintf("%#v", this.Chat)+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetChatParticipantIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chat.TLChatGetChatParticipantIdList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetUsersChatIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&chat.TLChatGetUsersChatIdList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetMyChatList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chat.TLChatGetMyChatList{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.IsCreator != nil {
		s = append(s, "IsCreator: "+fmt.Sprintf("%#v", this.IsCreator)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatExportChatInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&chat.TLChatExportChatInvite{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "AdminId: "+fmt.Sprintf("%#v", this.AdminId)+",\n")
	s = append(s, "LegacyRevokePermanent: "+fmt.Sprintf("%#v", this.LegacyRevokePermanent)+",\n")
	s = append(s, "RequestNeeded: "+fmt.Sprintf("%#v", this.RequestNeeded)+",\n")
	if this.ExpireDate != nil {
		s = append(s, "ExpireDate: "+fmt.Sprintf("%#v", this.ExpireDate)+",\n")
	}
	if this.UsageLimit != nil {
		s = append(s, "UsageLimit: "+fmt.Sprintf("%#v", this.UsageLimit)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetAdminsWithInvites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chat.TLChatGetAdminsWithInvites{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetExportedChatInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chat.TLChatGetExportedChatInvite{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetExportedChatInvites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&chat.TLChatGetExportedChatInvites{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "AdminId: "+fmt.Sprintf("%#v", this.AdminId)+",\n")
	s = append(s, "Revoked: "+fmt.Sprintf("%#v", this.Revoked)+",\n")
	if this.OffsetDate != nil {
		s = append(s, "OffsetDate: "+fmt.Sprintf("%#v", this.OffsetDate)+",\n")
	}
	if this.OffsetLink != nil {
		s = append(s, "OffsetLink: "+fmt.Sprintf("%#v", this.OffsetLink)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatCheckChatInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chat.TLChatCheckChatInvite{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatImportChatInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&chat.TLChatImportChatInvite{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatGetChatInviteImporters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&chat.TLChatGetChatInviteImporters{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "Requested: "+fmt.Sprintf("%#v", this.Requested)+",\n")
	if this.Link != nil {
		s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	}
	if this.Q != nil {
		s = append(s, "Q: "+fmt.Sprintf("%#v", this.Q)+",\n")
	}
	s = append(s, "OffsetDate: "+fmt.Sprintf("%#v", this.OffsetDate)+",\n")
	s = append(s, "OffsetUser: "+fmt.Sprintf("%#v", this.OffsetUser)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatDeleteExportedChatInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatDeleteExportedChatInvite{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatDeleteRevokedExportedChatInvites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatDeleteRevokedExportedChatInvites{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "AdminId: "+fmt.Sprintf("%#v", this.AdminId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatEditExportedChatInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&chat.TLChatEditExportedChatInvite{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "Revoked: "+fmt.Sprintf("%#v", this.Revoked)+",\n")
	s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	if this.ExpireDate != nil {
		s = append(s, "ExpireDate: "+fmt.Sprintf("%#v", this.ExpireDate)+",\n")
	}
	if this.UsageLimit != nil {
		s = append(s, "UsageLimit: "+fmt.Sprintf("%#v", this.UsageLimit)+",\n")
	}
	if this.RequestNeeded != nil {
		s = append(s, "RequestNeeded: "+fmt.Sprintf("%#v", this.RequestNeeded)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatSetChatAvailableReactions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&chat.TLChatSetChatAvailableReactions{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "AvailableReactionsType: "+fmt.Sprintf("%#v", this.AvailableReactionsType)+",\n")
	s = append(s, "AvailableReactions: "+fmt.Sprintf("%#v", this.AvailableReactions)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChatSetHistoryTTL) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chat.TLChatSetHistoryTTL{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "SelfId: "+fmt.Sprintf("%#v", this.SelfId)+",\n")
	s = append(s, "ChatId: "+fmt.Sprintf("%#v", this.ChatId)+",\n")
	s = append(s, "TtlPeriod: "+fmt.Sprintf("%#v", this.TtlPeriod)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_MutableChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.Vector_MutableChat{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_Long) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.Vector_Long{")
	s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_UserChatIdList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.Vector_UserChatIdList{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_ChatAdminWithInvites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.Vector_ChatAdminWithInvites{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_ExportedChatInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.Vector_ExportedChatInvite{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Vector_ChatInviteImporter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chat.Vector_ChatInviteImporter{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringChatTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCChatClient is the client API for RPCChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCChatClient interface {
	ChatGetMutableChat(ctx context.Context, in *TLChatGetMutableChat, opts ...grpc.CallOption) (*MutableChat, error)
	ChatGetChatListByIdList(ctx context.Context, in *TLChatGetChatListByIdList, opts ...grpc.CallOption) (*Vector_MutableChat, error)
	ChatGetChatBySelfId(ctx context.Context, in *TLChatGetChatBySelfId, opts ...grpc.CallOption) (*MutableChat, error)
	ChatCreateChat2(ctx context.Context, in *TLChatCreateChat2, opts ...grpc.CallOption) (*MutableChat, error)
	ChatDeleteChat(ctx context.Context, in *TLChatDeleteChat, opts ...grpc.CallOption) (*MutableChat, error)
	ChatDeleteChatUser(ctx context.Context, in *TLChatDeleteChatUser, opts ...grpc.CallOption) (*MutableChat, error)
	ChatEditChatTitle(ctx context.Context, in *TLChatEditChatTitle, opts ...grpc.CallOption) (*MutableChat, error)
	ChatEditChatAbout(ctx context.Context, in *TLChatEditChatAbout, opts ...grpc.CallOption) (*MutableChat, error)
	ChatEditChatPhoto(ctx context.Context, in *TLChatEditChatPhoto, opts ...grpc.CallOption) (*MutableChat, error)
	ChatEditChatAdmin(ctx context.Context, in *TLChatEditChatAdmin, opts ...grpc.CallOption) (*MutableChat, error)
	ChatEditChatDefaultBannedRights(ctx context.Context, in *TLChatEditChatDefaultBannedRights, opts ...grpc.CallOption) (*MutableChat, error)
	ChatAddChatUser(ctx context.Context, in *TLChatAddChatUser, opts ...grpc.CallOption) (*MutableChat, error)
	ChatGetMutableChatByLink(ctx context.Context, in *TLChatGetMutableChatByLink, opts ...grpc.CallOption) (*MutableChat, error)
	ChatToggleNoForwards(ctx context.Context, in *TLChatToggleNoForwards, opts ...grpc.CallOption) (*MutableChat, error)
	ChatMigratedToChannel(ctx context.Context, in *TLChatMigratedToChannel, opts ...grpc.CallOption) (*mtproto.Bool, error)
	ChatGetChatParticipantIdList(ctx context.Context, in *TLChatGetChatParticipantIdList, opts ...grpc.CallOption) (*Vector_Long, error)
	ChatGetUsersChatIdList(ctx context.Context, in *TLChatGetUsersChatIdList, opts ...grpc.CallOption) (*Vector_UserChatIdList, error)
	ChatGetMyChatList(ctx context.Context, in *TLChatGetMyChatList, opts ...grpc.CallOption) (*Vector_MutableChat, error)
	ChatExportChatInvite(ctx context.Context, in *TLChatExportChatInvite, opts ...grpc.CallOption) (*mtproto.ExportedChatInvite, error)
	ChatGetAdminsWithInvites(ctx context.Context, in *TLChatGetAdminsWithInvites, opts ...grpc.CallOption) (*Vector_ChatAdminWithInvites, error)
	ChatGetExportedChatInvite(ctx context.Context, in *TLChatGetExportedChatInvite, opts ...grpc.CallOption) (*mtproto.ExportedChatInvite, error)
	ChatGetExportedChatInvites(ctx context.Context, in *TLChatGetExportedChatInvites, opts ...grpc.CallOption) (*Vector_ExportedChatInvite, error)
	ChatCheckChatInvite(ctx context.Context, in *TLChatCheckChatInvite, opts ...grpc.CallOption) (*ChatInviteExt, error)
	ChatImportChatInvite(ctx context.Context, in *TLChatImportChatInvite, opts ...grpc.CallOption) (*MutableChat, error)
	ChatGetChatInviteImporters(ctx context.Context, in *TLChatGetChatInviteImporters, opts ...grpc.CallOption) (*Vector_ChatInviteImporter, error)
	ChatDeleteExportedChatInvite(ctx context.Context, in *TLChatDeleteExportedChatInvite, opts ...grpc.CallOption) (*mtproto.Bool, error)
	ChatDeleteRevokedExportedChatInvites(ctx context.Context, in *TLChatDeleteRevokedExportedChatInvites, opts ...grpc.CallOption) (*mtproto.Bool, error)
	ChatEditExportedChatInvite(ctx context.Context, in *TLChatEditExportedChatInvite, opts ...grpc.CallOption) (*Vector_ExportedChatInvite, error)
	ChatSetChatAvailableReactions(ctx context.Context, in *TLChatSetChatAvailableReactions, opts ...grpc.CallOption) (*MutableChat, error)
	ChatSetHistoryTTL(ctx context.Context, in *TLChatSetHistoryTTL, opts ...grpc.CallOption) (*MutableChat, error)
}

type rPCChatClient struct {
	cc *grpc.ClientConn
}

func NewRPCChatClient(cc *grpc.ClientConn) RPCChatClient {
	return &rPCChatClient{cc}
}

func (c *rPCChatClient) ChatGetMutableChat(ctx context.Context, in *TLChatGetMutableChat, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getMutableChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetChatListByIdList(ctx context.Context, in *TLChatGetChatListByIdList, opts ...grpc.CallOption) (*Vector_MutableChat, error) {
	out := new(Vector_MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getChatListByIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetChatBySelfId(ctx context.Context, in *TLChatGetChatBySelfId, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getChatBySelfId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatCreateChat2(ctx context.Context, in *TLChatCreateChat2, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_createChat2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatDeleteChat(ctx context.Context, in *TLChatDeleteChat, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_deleteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatDeleteChatUser(ctx context.Context, in *TLChatDeleteChatUser, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_deleteChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditChatTitle(ctx context.Context, in *TLChatEditChatTitle, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_editChatTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditChatAbout(ctx context.Context, in *TLChatEditChatAbout, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_editChatAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditChatPhoto(ctx context.Context, in *TLChatEditChatPhoto, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_editChatPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditChatAdmin(ctx context.Context, in *TLChatEditChatAdmin, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_editChatAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditChatDefaultBannedRights(ctx context.Context, in *TLChatEditChatDefaultBannedRights, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_editChatDefaultBannedRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatAddChatUser(ctx context.Context, in *TLChatAddChatUser, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_addChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetMutableChatByLink(ctx context.Context, in *TLChatGetMutableChatByLink, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getMutableChatByLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatToggleNoForwards(ctx context.Context, in *TLChatToggleNoForwards, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_toggleNoForwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatMigratedToChannel(ctx context.Context, in *TLChatMigratedToChannel, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_migratedToChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetChatParticipantIdList(ctx context.Context, in *TLChatGetChatParticipantIdList, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getChatParticipantIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetUsersChatIdList(ctx context.Context, in *TLChatGetUsersChatIdList, opts ...grpc.CallOption) (*Vector_UserChatIdList, error) {
	out := new(Vector_UserChatIdList)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getUsersChatIdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetMyChatList(ctx context.Context, in *TLChatGetMyChatList, opts ...grpc.CallOption) (*Vector_MutableChat, error) {
	out := new(Vector_MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getMyChatList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatExportChatInvite(ctx context.Context, in *TLChatExportChatInvite, opts ...grpc.CallOption) (*mtproto.ExportedChatInvite, error) {
	out := new(mtproto.ExportedChatInvite)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_exportChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetAdminsWithInvites(ctx context.Context, in *TLChatGetAdminsWithInvites, opts ...grpc.CallOption) (*Vector_ChatAdminWithInvites, error) {
	out := new(Vector_ChatAdminWithInvites)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getAdminsWithInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetExportedChatInvite(ctx context.Context, in *TLChatGetExportedChatInvite, opts ...grpc.CallOption) (*mtproto.ExportedChatInvite, error) {
	out := new(mtproto.ExportedChatInvite)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getExportedChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetExportedChatInvites(ctx context.Context, in *TLChatGetExportedChatInvites, opts ...grpc.CallOption) (*Vector_ExportedChatInvite, error) {
	out := new(Vector_ExportedChatInvite)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getExportedChatInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatCheckChatInvite(ctx context.Context, in *TLChatCheckChatInvite, opts ...grpc.CallOption) (*ChatInviteExt, error) {
	out := new(ChatInviteExt)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_checkChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatImportChatInvite(ctx context.Context, in *TLChatImportChatInvite, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_importChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetChatInviteImporters(ctx context.Context, in *TLChatGetChatInviteImporters, opts ...grpc.CallOption) (*Vector_ChatInviteImporter, error) {
	out := new(Vector_ChatInviteImporter)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_getChatInviteImporters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatDeleteExportedChatInvite(ctx context.Context, in *TLChatDeleteExportedChatInvite, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_deleteExportedChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatDeleteRevokedExportedChatInvites(ctx context.Context, in *TLChatDeleteRevokedExportedChatInvites, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_deleteRevokedExportedChatInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditExportedChatInvite(ctx context.Context, in *TLChatEditExportedChatInvite, opts ...grpc.CallOption) (*Vector_ExportedChatInvite, error) {
	out := new(Vector_ExportedChatInvite)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_editExportedChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatSetChatAvailableReactions(ctx context.Context, in *TLChatSetChatAvailableReactions, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_setChatAvailableReactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatSetHistoryTTL(ctx context.Context, in *TLChatSetHistoryTTL, opts ...grpc.CallOption) (*MutableChat, error) {
	out := new(MutableChat)
	err := c.cc.Invoke(ctx, "/chat.RPCChat/chat_setHistoryTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCChatServer is the server API for RPCChat service.
type RPCChatServer interface {
	ChatGetMutableChat(context.Context, *TLChatGetMutableChat) (*MutableChat, error)
	ChatGetChatListByIdList(context.Context, *TLChatGetChatListByIdList) (*Vector_MutableChat, error)
	ChatGetChatBySelfId(context.Context, *TLChatGetChatBySelfId) (*MutableChat, error)
	ChatCreateChat2(context.Context, *TLChatCreateChat2) (*MutableChat, error)
	ChatDeleteChat(context.Context, *TLChatDeleteChat) (*MutableChat, error)
	ChatDeleteChatUser(context.Context, *TLChatDeleteChatUser) (*MutableChat, error)
	ChatEditChatTitle(context.Context, *TLChatEditChatTitle) (*MutableChat, error)
	ChatEditChatAbout(context.Context, *TLChatEditChatAbout) (*MutableChat, error)
	ChatEditChatPhoto(context.Context, *TLChatEditChatPhoto) (*MutableChat, error)
	ChatEditChatAdmin(context.Context, *TLChatEditChatAdmin) (*MutableChat, error)
	ChatEditChatDefaultBannedRights(context.Context, *TLChatEditChatDefaultBannedRights) (*MutableChat, error)
	ChatAddChatUser(context.Context, *TLChatAddChatUser) (*MutableChat, error)
	ChatGetMutableChatByLink(context.Context, *TLChatGetMutableChatByLink) (*MutableChat, error)
	ChatToggleNoForwards(context.Context, *TLChatToggleNoForwards) (*MutableChat, error)
	ChatMigratedToChannel(context.Context, *TLChatMigratedToChannel) (*mtproto.Bool, error)
	ChatGetChatParticipantIdList(context.Context, *TLChatGetChatParticipantIdList) (*Vector_Long, error)
	ChatGetUsersChatIdList(context.Context, *TLChatGetUsersChatIdList) (*Vector_UserChatIdList, error)
	ChatGetMyChatList(context.Context, *TLChatGetMyChatList) (*Vector_MutableChat, error)
	ChatExportChatInvite(context.Context, *TLChatExportChatInvite) (*mtproto.ExportedChatInvite, error)
	ChatGetAdminsWithInvites(context.Context, *TLChatGetAdminsWithInvites) (*Vector_ChatAdminWithInvites, error)
	ChatGetExportedChatInvite(context.Context, *TLChatGetExportedChatInvite) (*mtproto.ExportedChatInvite, error)
	ChatGetExportedChatInvites(context.Context, *TLChatGetExportedChatInvites) (*Vector_ExportedChatInvite, error)
	ChatCheckChatInvite(context.Context, *TLChatCheckChatInvite) (*ChatInviteExt, error)
	ChatImportChatInvite(context.Context, *TLChatImportChatInvite) (*MutableChat, error)
	ChatGetChatInviteImporters(context.Context, *TLChatGetChatInviteImporters) (*Vector_ChatInviteImporter, error)
	ChatDeleteExportedChatInvite(context.Context, *TLChatDeleteExportedChatInvite) (*mtproto.Bool, error)
	ChatDeleteRevokedExportedChatInvites(context.Context, *TLChatDeleteRevokedExportedChatInvites) (*mtproto.Bool, error)
	ChatEditExportedChatInvite(context.Context, *TLChatEditExportedChatInvite) (*Vector_ExportedChatInvite, error)
	ChatSetChatAvailableReactions(context.Context, *TLChatSetChatAvailableReactions) (*MutableChat, error)
	ChatSetHistoryTTL(context.Context, *TLChatSetHistoryTTL) (*MutableChat, error)
}

// UnimplementedRPCChatServer can be embedded to have forward compatible implementations.
type UnimplementedRPCChatServer struct {
}

func (*UnimplementedRPCChatServer) ChatGetMutableChat(ctx context.Context, req *TLChatGetMutableChat) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetMutableChat not implemented")
}
func (*UnimplementedRPCChatServer) ChatGetChatListByIdList(ctx context.Context, req *TLChatGetChatListByIdList) (*Vector_MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatListByIdList not implemented")
}
func (*UnimplementedRPCChatServer) ChatGetChatBySelfId(ctx context.Context, req *TLChatGetChatBySelfId) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatBySelfId not implemented")
}
func (*UnimplementedRPCChatServer) ChatCreateChat2(ctx context.Context, req *TLChatCreateChat2) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCreateChat2 not implemented")
}
func (*UnimplementedRPCChatServer) ChatDeleteChat(ctx context.Context, req *TLChatDeleteChat) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatDeleteChat not implemented")
}
func (*UnimplementedRPCChatServer) ChatDeleteChatUser(ctx context.Context, req *TLChatDeleteChatUser) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatDeleteChatUser not implemented")
}
func (*UnimplementedRPCChatServer) ChatEditChatTitle(ctx context.Context, req *TLChatEditChatTitle) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditChatTitle not implemented")
}
func (*UnimplementedRPCChatServer) ChatEditChatAbout(ctx context.Context, req *TLChatEditChatAbout) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditChatAbout not implemented")
}
func (*UnimplementedRPCChatServer) ChatEditChatPhoto(ctx context.Context, req *TLChatEditChatPhoto) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditChatPhoto not implemented")
}
func (*UnimplementedRPCChatServer) ChatEditChatAdmin(ctx context.Context, req *TLChatEditChatAdmin) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditChatAdmin not implemented")
}
func (*UnimplementedRPCChatServer) ChatEditChatDefaultBannedRights(ctx context.Context, req *TLChatEditChatDefaultBannedRights) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditChatDefaultBannedRights not implemented")
}
func (*UnimplementedRPCChatServer) ChatAddChatUser(ctx context.Context, req *TLChatAddChatUser) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatAddChatUser not implemented")
}
func (*UnimplementedRPCChatServer) ChatGetMutableChatByLink(ctx context.Context, req *TLChatGetMutableChatByLink) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetMutableChatByLink not implemented")
}
func (*UnimplementedRPCChatServer) ChatToggleNoForwards(ctx context.Context, req *TLChatToggleNoForwards) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatToggleNoForwards not implemented")
}
func (*UnimplementedRPCChatServer) ChatMigratedToChannel(ctx context.Context, req *TLChatMigratedToChannel) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatMigratedToChannel not implemented")
}
func (*UnimplementedRPCChatServer) ChatGetChatParticipantIdList(ctx context.Context, req *TLChatGetChatParticipantIdList) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatParticipantIdList not implemented")
}
func (*UnimplementedRPCChatServer) ChatGetUsersChatIdList(ctx context.Context, req *TLChatGetUsersChatIdList) (*Vector_UserChatIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetUsersChatIdList not implemented")
}
func (*UnimplementedRPCChatServer) ChatGetMyChatList(ctx context.Context, req *TLChatGetMyChatList) (*Vector_MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetMyChatList not implemented")
}
func (*UnimplementedRPCChatServer) ChatExportChatInvite(ctx context.Context, req *TLChatExportChatInvite) (*mtproto.ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatExportChatInvite not implemented")
}
func (*UnimplementedRPCChatServer) ChatGetAdminsWithInvites(ctx context.Context, req *TLChatGetAdminsWithInvites) (*Vector_ChatAdminWithInvites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetAdminsWithInvites not implemented")
}
func (*UnimplementedRPCChatServer) ChatGetExportedChatInvite(ctx context.Context, req *TLChatGetExportedChatInvite) (*mtproto.ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetExportedChatInvite not implemented")
}
func (*UnimplementedRPCChatServer) ChatGetExportedChatInvites(ctx context.Context, req *TLChatGetExportedChatInvites) (*Vector_ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetExportedChatInvites not implemented")
}
func (*UnimplementedRPCChatServer) ChatCheckChatInvite(ctx context.Context, req *TLChatCheckChatInvite) (*ChatInviteExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCheckChatInvite not implemented")
}
func (*UnimplementedRPCChatServer) ChatImportChatInvite(ctx context.Context, req *TLChatImportChatInvite) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatImportChatInvite not implemented")
}
func (*UnimplementedRPCChatServer) ChatGetChatInviteImporters(ctx context.Context, req *TLChatGetChatInviteImporters) (*Vector_ChatInviteImporter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatInviteImporters not implemented")
}
func (*UnimplementedRPCChatServer) ChatDeleteExportedChatInvite(ctx context.Context, req *TLChatDeleteExportedChatInvite) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatDeleteExportedChatInvite not implemented")
}
func (*UnimplementedRPCChatServer) ChatDeleteRevokedExportedChatInvites(ctx context.Context, req *TLChatDeleteRevokedExportedChatInvites) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatDeleteRevokedExportedChatInvites not implemented")
}
func (*UnimplementedRPCChatServer) ChatEditExportedChatInvite(ctx context.Context, req *TLChatEditExportedChatInvite) (*Vector_ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditExportedChatInvite not implemented")
}
func (*UnimplementedRPCChatServer) ChatSetChatAvailableReactions(ctx context.Context, req *TLChatSetChatAvailableReactions) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatSetChatAvailableReactions not implemented")
}
func (*UnimplementedRPCChatServer) ChatSetHistoryTTL(ctx context.Context, req *TLChatSetHistoryTTL) (*MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatSetHistoryTTL not implemented")
}

func RegisterRPCChatServer(s *grpc.Server, srv RPCChatServer) {
	s.RegisterService(&_RPCChat_serviceDesc, srv)
}

func _RPCChat_ChatGetMutableChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetMutableChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetMutableChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetMutableChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetMutableChat(ctx, req.(*TLChatGetMutableChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetChatListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetChatListByIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetChatListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetChatListByIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetChatListByIdList(ctx, req.(*TLChatGetChatListByIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetChatBySelfId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetChatBySelfId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetChatBySelfId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetChatBySelfId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetChatBySelfId(ctx, req.(*TLChatGetChatBySelfId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatCreateChat2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatCreateChat2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatCreateChat2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatCreateChat2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatCreateChat2(ctx, req.(*TLChatCreateChat2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatDeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatDeleteChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatDeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatDeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatDeleteChat(ctx, req.(*TLChatDeleteChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatDeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatDeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatDeleteChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatDeleteChatUser(ctx, req.(*TLChatDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatEditChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditChatTitle(ctx, req.(*TLChatEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditChatAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditChatAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditChatAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatEditChatAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditChatAbout(ctx, req.(*TLChatEditChatAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditChatPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatEditChatPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditChatPhoto(ctx, req.(*TLChatEditChatPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditChatAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatEditChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditChatAdmin(ctx, req.(*TLChatEditChatAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditChatDefaultBannedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditChatDefaultBannedRights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditChatDefaultBannedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatEditChatDefaultBannedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditChatDefaultBannedRights(ctx, req.(*TLChatEditChatDefaultBannedRights))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatAddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatAddChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatAddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatAddChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatAddChatUser(ctx, req.(*TLChatAddChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetMutableChatByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetMutableChatByLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetMutableChatByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetMutableChatByLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetMutableChatByLink(ctx, req.(*TLChatGetMutableChatByLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatToggleNoForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatToggleNoForwards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatToggleNoForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatToggleNoForwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatToggleNoForwards(ctx, req.(*TLChatToggleNoForwards))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatMigratedToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatMigratedToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatMigratedToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatMigratedToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatMigratedToChannel(ctx, req.(*TLChatMigratedToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetChatParticipantIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetChatParticipantIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetChatParticipantIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetChatParticipantIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetChatParticipantIdList(ctx, req.(*TLChatGetChatParticipantIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetUsersChatIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetUsersChatIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetUsersChatIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetUsersChatIdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetUsersChatIdList(ctx, req.(*TLChatGetUsersChatIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetMyChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetMyChatList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetMyChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetMyChatList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetMyChatList(ctx, req.(*TLChatGetMyChatList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatExportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatExportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatExportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatExportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatExportChatInvite(ctx, req.(*TLChatExportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetAdminsWithInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetAdminsWithInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetAdminsWithInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetAdminsWithInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetAdminsWithInvites(ctx, req.(*TLChatGetAdminsWithInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetExportedChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetExportedChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetExportedChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetExportedChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetExportedChatInvite(ctx, req.(*TLChatGetExportedChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetExportedChatInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetExportedChatInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetExportedChatInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetExportedChatInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetExportedChatInvites(ctx, req.(*TLChatGetExportedChatInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatCheckChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatCheckChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatCheckChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatCheckChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatCheckChatInvite(ctx, req.(*TLChatCheckChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatImportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatImportChatInvite(ctx, req.(*TLChatImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetChatInviteImporters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetChatInviteImporters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetChatInviteImporters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatGetChatInviteImporters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetChatInviteImporters(ctx, req.(*TLChatGetChatInviteImporters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatDeleteExportedChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatDeleteExportedChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatDeleteExportedChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatDeleteExportedChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatDeleteExportedChatInvite(ctx, req.(*TLChatDeleteExportedChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatDeleteRevokedExportedChatInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatDeleteRevokedExportedChatInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatDeleteRevokedExportedChatInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatDeleteRevokedExportedChatInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatDeleteRevokedExportedChatInvites(ctx, req.(*TLChatDeleteRevokedExportedChatInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditExportedChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditExportedChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditExportedChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatEditExportedChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditExportedChatInvite(ctx, req.(*TLChatEditExportedChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatSetChatAvailableReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatSetChatAvailableReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatSetChatAvailableReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatSetChatAvailableReactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatSetChatAvailableReactions(ctx, req.(*TLChatSetChatAvailableReactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatSetHistoryTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatSetHistoryTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatSetHistoryTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.RPCChat/ChatSetHistoryTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatSetHistoryTTL(ctx, req.(*TLChatSetHistoryTTL))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCChat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.RPCChat",
	HandlerType: (*RPCChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "chat_getMutableChat",
			Handler:    _RPCChat_ChatGetMutableChat_Handler,
		},
		{
			MethodName: "chat_getChatListByIdList",
			Handler:    _RPCChat_ChatGetChatListByIdList_Handler,
		},
		{
			MethodName: "chat_getChatBySelfId",
			Handler:    _RPCChat_ChatGetChatBySelfId_Handler,
		},
		{
			MethodName: "chat_createChat2",
			Handler:    _RPCChat_ChatCreateChat2_Handler,
		},
		{
			MethodName: "chat_deleteChat",
			Handler:    _RPCChat_ChatDeleteChat_Handler,
		},
		{
			MethodName: "chat_deleteChatUser",
			Handler:    _RPCChat_ChatDeleteChatUser_Handler,
		},
		{
			MethodName: "chat_editChatTitle",
			Handler:    _RPCChat_ChatEditChatTitle_Handler,
		},
		{
			MethodName: "chat_editChatAbout",
			Handler:    _RPCChat_ChatEditChatAbout_Handler,
		},
		{
			MethodName: "chat_editChatPhoto",
			Handler:    _RPCChat_ChatEditChatPhoto_Handler,
		},
		{
			MethodName: "chat_editChatAdmin",
			Handler:    _RPCChat_ChatEditChatAdmin_Handler,
		},
		{
			MethodName: "chat_editChatDefaultBannedRights",
			Handler:    _RPCChat_ChatEditChatDefaultBannedRights_Handler,
		},
		{
			MethodName: "chat_addChatUser",
			Handler:    _RPCChat_ChatAddChatUser_Handler,
		},
		{
			MethodName: "chat_getMutableChatByLink",
			Handler:    _RPCChat_ChatGetMutableChatByLink_Handler,
		},
		{
			MethodName: "chat_toggleNoForwards",
			Handler:    _RPCChat_ChatToggleNoForwards_Handler,
		},
		{
			MethodName: "chat_migratedToChannel",
			Handler:    _RPCChat_ChatMigratedToChannel_Handler,
		},
		{
			MethodName: "chat_getChatParticipantIdList",
			Handler:    _RPCChat_ChatGetChatParticipantIdList_Handler,
		},
		{
			MethodName: "chat_getUsersChatIdList",
			Handler:    _RPCChat_ChatGetUsersChatIdList_Handler,
		},
		{
			MethodName: "chat_getMyChatList",
			Handler:    _RPCChat_ChatGetMyChatList_Handler,
		},
		{
			MethodName: "chat_exportChatInvite",
			Handler:    _RPCChat_ChatExportChatInvite_Handler,
		},
		{
			MethodName: "chat_getAdminsWithInvites",
			Handler:    _RPCChat_ChatGetAdminsWithInvites_Handler,
		},
		{
			MethodName: "chat_getExportedChatInvite",
			Handler:    _RPCChat_ChatGetExportedChatInvite_Handler,
		},
		{
			MethodName: "chat_getExportedChatInvites",
			Handler:    _RPCChat_ChatGetExportedChatInvites_Handler,
		},
		{
			MethodName: "chat_checkChatInvite",
			Handler:    _RPCChat_ChatCheckChatInvite_Handler,
		},
		{
			MethodName: "chat_importChatInvite",
			Handler:    _RPCChat_ChatImportChatInvite_Handler,
		},
		{
			MethodName: "chat_getChatInviteImporters",
			Handler:    _RPCChat_ChatGetChatInviteImporters_Handler,
		},
		{
			MethodName: "chat_deleteExportedChatInvite",
			Handler:    _RPCChat_ChatDeleteExportedChatInvite_Handler,
		},
		{
			MethodName: "chat_deleteRevokedExportedChatInvites",
			Handler:    _RPCChat_ChatDeleteRevokedExportedChatInvites_Handler,
		},
		{
			MethodName: "chat_editExportedChatInvite",
			Handler:    _RPCChat_ChatEditExportedChatInvite_Handler,
		},
		{
			MethodName: "chat_setChatAvailableReactions",
			Handler:    _RPCChat_ChatSetChatAvailableReactions_Handler,
		},
		{
			MethodName: "chat_setHistoryTTL",
			Handler:    _RPCChat_ChatSetHistoryTTL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.tl.proto",
}

func (m *ChatInviteExt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatInviteExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatInviteExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Expires != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Expires))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Participants) > 0 {
		dAtA2 := make([]byte, len(m.Participants)*10)
		var j1 int
		for _, num1 := range m.Participants {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintChatTl(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if m.ParticipantsCount != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ParticipantsCount))
		i--
		dAtA[i] = 0x40
	}
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RequestNeeded {
		i--
		if m.RequestNeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Chat != nil {
		{
			size, err := m.Chat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChatInviteAlready) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatInviteAlready) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatInviteAlready) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChatInvitePeek) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatInvitePeek) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatInvitePeek) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImmutableChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImmutableChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImmutableChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TtlPeriod != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.TtlPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.AvailableReactions) > 0 {
		for iNdEx := len(m.AvailableReactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvailableReactions[iNdEx])
			copy(dAtA[i:], m.AvailableReactions[iNdEx])
			i = encodeVarintChatTl(dAtA, i, uint64(len(m.AvailableReactions[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.AvailableReactionsType != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.AvailableReactionsType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Call != nil {
		{
			size, err := m.Call.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.BotInfo) > 0 {
		for iNdEx := len(m.BotInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BotInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.ExportedInvite != nil {
		{
			size, err := m.ExportedInvite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.CanSetUsername {
		i--
		if m.CanSetUsername {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.DefaultBannedRights != nil {
		{
			size, err := m.DefaultBannedRights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.MigratedTo != nil {
		{
			size, err := m.MigratedTo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Version != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x68
	}
	if m.Date != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x60
	}
	if m.ParticipantsCount != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ParticipantsCount))
		i--
		dAtA[i] = 0x58
	}
	if m.Noforwards {
		i--
		if m.Noforwards {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.CallNotEmpty {
		i--
		if m.CallNotEmpty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.CallActive {
		i--
		if m.CallActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Deactivated {
		i--
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Creator != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Creator))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLImmutableChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLImmutableChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLImmutableChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImmutableChatParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImmutableChatParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImmutableChatParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Date != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x78
	}
	if m.AdminRights != nil {
		{
			size, err := m.AdminRights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.LeftAt != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.LeftAt))
		i--
		dAtA[i] = 0x68
	}
	if m.KickedAt != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.KickedAt))
		i--
		dAtA[i] = 0x60
	}
	if m.InvitedAt != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.InvitedAt))
		i--
		dAtA[i] = 0x58
	}
	if m.InviterUserId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.InviterUserId))
		i--
		dAtA[i] = 0x50
	}
	if m.Useage != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Useage))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x42
	}
	if m.ParticipantType != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ParticipantType))
		i--
		dAtA[i] = 0x38
	}
	if m.State != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.UserId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLImmutableChatParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLImmutableChatParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLImmutableChatParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MutableChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutableChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MutableChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChatParticipants) > 0 {
		for iNdEx := len(m.ChatParticipants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChatParticipants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Chat != nil {
		{
			size, err := m.Chat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMutableChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMutableChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMutableChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserChatIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserChatIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserChatIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ChatIdList) > 0 {
		dAtA20 := make([]byte, len(m.ChatIdList)*10)
		var j19 int
		for _, num1 := range m.ChatIdList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		i -= j19
		copy(dAtA[i:], dAtA20[:j19])
		i = encodeVarintChatTl(dAtA, i, uint64(j19))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUserChatIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUserChatIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUserChatIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetMutableChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetMutableChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetMutableChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetChatListByIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetChatListByIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetChatListByIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdList) > 0 {
		dAtA23 := make([]byte, len(m.IdList)*10)
		var j22 int
		for _, num1 := range m.IdList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		i -= j22
		copy(dAtA[i:], dAtA23[:j22])
		i = encodeVarintChatTl(dAtA, i, uint64(j22))
		i--
		dAtA[i] = 0x22
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetChatBySelfId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetChatBySelfId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetChatBySelfId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatCreateChat2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatCreateChat2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatCreateChat2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UserIdList) > 0 {
		dAtA25 := make([]byte, len(m.UserIdList)*10)
		var j24 int
		for _, num1 := range m.UserIdList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintChatTl(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0x22
	}
	if m.CreatorId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.CreatorId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatDeleteChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatDeleteChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatDeleteChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OperatorId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatDeleteChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatDeleteChatUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatDeleteChatUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeleteUserId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.DeleteUserId))
		i--
		dAtA[i] = 0x28
	}
	if m.OperatorId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatEditChatTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatEditChatTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatEditChatTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EditUserId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.EditUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatEditChatAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatEditChatAbout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatEditChatAbout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EditUserId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.EditUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatEditChatPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatEditChatPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatEditChatPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChatPhoto != nil {
		{
			size, err := m.ChatPhoto.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.EditUserId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.EditUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatEditChatAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatEditChatAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatEditChatAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAdmin != nil {
		{
			size, err := m.IsAdmin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.EditChatAdminId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.EditChatAdminId))
		i--
		dAtA[i] = 0x28
	}
	if m.OperatorId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatEditChatDefaultBannedRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatEditChatDefaultBannedRights) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatEditChatDefaultBannedRights) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BannedRights != nil {
		{
			size, err := m.BannedRights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OperatorId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatAddChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatAddChatUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatAddChatUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if m.InviterId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.InviterId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetMutableChatByLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetMutableChatByLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetMutableChatByLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatToggleNoForwards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatToggleNoForwards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatToggleNoForwards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OperatorId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatMigratedToChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatMigratedToChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatMigratedToChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AccessHash != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x28
	}
	if m.Id != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.Chat != nil {
		{
			size, err := m.Chat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetChatParticipantIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetChatParticipantIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetChatParticipantIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetUsersChatIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetUsersChatIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetUsersChatIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		dAtA32 := make([]byte, len(m.Id)*10)
		var j31 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		i -= j31
		copy(dAtA[i:], dAtA32[:j31])
		i = encodeVarintChatTl(dAtA, i, uint64(j31))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetMyChatList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetMyChatList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetMyChatList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsCreator != nil {
		{
			size, err := m.IsCreator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatExportChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatExportChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatExportChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Title != nil {
		{
			size, err := m.Title.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.UsageLimit != nil {
		{
			size, err := m.UsageLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ExpireDate != nil {
		{
			size, err := m.ExpireDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RequestNeeded {
		i--
		if m.RequestNeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.LegacyRevokePermanent {
		i--
		if m.LegacyRevokePermanent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.AdminId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.AdminId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetAdminsWithInvites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetAdminsWithInvites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetAdminsWithInvites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetExportedChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetExportedChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetExportedChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetExportedChatInvites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetExportedChatInvites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetExportedChatInvites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x40
	}
	if m.OffsetLink != nil {
		{
			size, err := m.OffsetLink.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.OffsetDate != nil {
		{
			size, err := m.OffsetDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Revoked {
		i--
		if m.Revoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.AdminId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.AdminId))
		i--
		dAtA[i] = 0x20
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatCheckChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatCheckChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatCheckChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatImportChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatImportChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatImportChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatGetChatInviteImporters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatGetChatInviteImporters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatGetChatInviteImporters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x50
	}
	if m.OffsetUser != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.OffsetUser))
		i--
		dAtA[i] = 0x48
	}
	if m.OffsetDate != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.OffsetDate))
		i--
		dAtA[i] = 0x40
	}
	if m.Q != nil {
		{
			size, err := m.Q.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Link != nil {
		{
			size, err := m.Link.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Requested {
		i--
		if m.Requested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatDeleteExportedChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatDeleteExportedChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatDeleteExportedChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatDeleteRevokedExportedChatInvites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatDeleteRevokedExportedChatInvites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatDeleteRevokedExportedChatInvites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AdminId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.AdminId))
		i--
		dAtA[i] = 0x28
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatEditExportedChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatEditExportedChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatEditExportedChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Title != nil {
		{
			size, err := m.Title.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RequestNeeded != nil {
		{
			size, err := m.RequestNeeded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.UsageLimit != nil {
		{
			size, err := m.UsageLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ExpireDate != nil {
		{
			size, err := m.ExpireDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChatTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintChatTl(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x32
	}
	if m.Revoked {
		i--
		if m.Revoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatSetChatAvailableReactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatSetChatAvailableReactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatSetChatAvailableReactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AvailableReactions) > 0 {
		for iNdEx := len(m.AvailableReactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvailableReactions[iNdEx])
			copy(dAtA[i:], m.AvailableReactions[iNdEx])
			i = encodeVarintChatTl(dAtA, i, uint64(len(m.AvailableReactions[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.AvailableReactionsType != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.AvailableReactionsType))
		i--
		dAtA[i] = 0x28
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChatSetHistoryTTL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChatSetHistoryTTL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChatSetHistoryTTL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TtlPeriod != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.TtlPeriod))
		i--
		dAtA[i] = 0x28
	}
	if m.ChatId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x20
	}
	if m.SelfId != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintChatTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vector_MutableChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_MutableChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_MutableChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_Long) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_Long) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_Long) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		dAtA46 := make([]byte, len(m.Datas)*10)
		var j45 int
		for _, num1 := range m.Datas {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA46[j45] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j45++
			}
			dAtA46[j45] = uint8(num)
			j45++
		}
		i -= j45
		copy(dAtA[i:], dAtA46[:j45])
		i = encodeVarintChatTl(dAtA, i, uint64(j45))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vector_UserChatIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_UserChatIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_UserChatIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_ChatAdminWithInvites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_ChatAdminWithInvites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_ChatAdminWithInvites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_ExportedChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_ExportedChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_ExportedChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_ChatInviteImporter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_ChatInviteImporter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_ChatInviteImporter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChatTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChatInviteExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.Chat != nil {
		l = m.Chat.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.RequestNeeded {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovChatTl(uint64(m.ParticipantsCount))
	}
	if len(m.Participants) > 0 {
		l = 0
		for _, e := range m.Participants {
			l += sovChatTl(uint64(e))
		}
		n += 1 + sovChatTl(uint64(l)) + l
	}
	if m.Expires != 0 {
		n += 1 + sovChatTl(uint64(m.Expires))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatInviteAlready) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatInvitePeek) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImmutableChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.Id != 0 {
		n += 1 + sovChatTl(uint64(m.Id))
	}
	if m.Creator != 0 {
		n += 1 + sovChatTl(uint64(m.Creator))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Deactivated {
		n += 2
	}
	if m.CallActive {
		n += 2
	}
	if m.CallNotEmpty {
		n += 2
	}
	if m.Noforwards {
		n += 2
	}
	if m.ParticipantsCount != 0 {
		n += 1 + sovChatTl(uint64(m.ParticipantsCount))
	}
	if m.Date != 0 {
		n += 1 + sovChatTl(uint64(m.Date))
	}
	if m.Version != 0 {
		n += 1 + sovChatTl(uint64(m.Version))
	}
	if m.MigratedTo != nil {
		l = m.MigratedTo.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.DefaultBannedRights != nil {
		l = m.DefaultBannedRights.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.CanSetUsername {
		n += 3
	}
	l = len(m.About)
	if l > 0 {
		n += 2 + l + sovChatTl(uint64(l))
	}
	if m.ExportedInvite != nil {
		l = m.ExportedInvite.Size()
		n += 2 + l + sovChatTl(uint64(l))
	}
	if len(m.BotInfo) > 0 {
		for _, e := range m.BotInfo {
			l = e.Size()
			n += 2 + l + sovChatTl(uint64(l))
		}
	}
	if m.Call != nil {
		l = m.Call.Size()
		n += 2 + l + sovChatTl(uint64(l))
	}
	if m.AvailableReactionsType != 0 {
		n += 2 + sovChatTl(uint64(m.AvailableReactionsType))
	}
	if len(m.AvailableReactions) > 0 {
		for _, s := range m.AvailableReactions {
			l = len(s)
			n += 2 + l + sovChatTl(uint64(l))
		}
	}
	if m.TtlPeriod != 0 {
		n += 2 + sovChatTl(uint64(m.TtlPeriod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLImmutableChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImmutableChatParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.Id != 0 {
		n += 1 + sovChatTl(uint64(m.Id))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatTl(uint64(m.UserId))
	}
	if m.State != 0 {
		n += 1 + sovChatTl(uint64(m.State))
	}
	if m.ParticipantType != 0 {
		n += 1 + sovChatTl(uint64(m.ParticipantType))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Useage != 0 {
		n += 1 + sovChatTl(uint64(m.Useage))
	}
	if m.InviterUserId != 0 {
		n += 1 + sovChatTl(uint64(m.InviterUserId))
	}
	if m.InvitedAt != 0 {
		n += 1 + sovChatTl(uint64(m.InvitedAt))
	}
	if m.KickedAt != 0 {
		n += 1 + sovChatTl(uint64(m.KickedAt))
	}
	if m.LeftAt != 0 {
		n += 1 + sovChatTl(uint64(m.LeftAt))
	}
	if m.AdminRights != nil {
		l = m.AdminRights.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovChatTl(uint64(m.Date))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLImmutableChatParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MutableChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.Chat != nil {
		l = m.Chat.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if len(m.ChatParticipants) > 0 {
		for _, e := range m.ChatParticipants {
			l = e.Size()
			n += 1 + l + sovChatTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLMutableChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserChatIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovChatTl(uint64(m.UserId))
	}
	if len(m.ChatIdList) > 0 {
		l = 0
		for _, e := range m.ChatIdList {
			l += sovChatTl(uint64(e))
		}
		n += 1 + sovChatTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUserChatIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetMutableChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetChatListByIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	if len(m.IdList) > 0 {
		l = 0
		for _, e := range m.IdList {
			l += sovChatTl(uint64(e))
		}
		n += 1 + sovChatTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetChatBySelfId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatCreateChat2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.CreatorId != 0 {
		n += 1 + sovChatTl(uint64(m.CreatorId))
	}
	if len(m.UserIdList) > 0 {
		l = 0
		for _, e := range m.UserIdList {
			l += sovChatTl(uint64(e))
		}
		n += 1 + sovChatTl(uint64(l)) + l
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatDeleteChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovChatTl(uint64(m.OperatorId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatDeleteChatUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovChatTl(uint64(m.OperatorId))
	}
	if m.DeleteUserId != 0 {
		n += 1 + sovChatTl(uint64(m.DeleteUserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatEditChatTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.EditUserId != 0 {
		n += 1 + sovChatTl(uint64(m.EditUserId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatEditChatAbout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.EditUserId != 0 {
		n += 1 + sovChatTl(uint64(m.EditUserId))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatEditChatPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.EditUserId != 0 {
		n += 1 + sovChatTl(uint64(m.EditUserId))
	}
	if m.ChatPhoto != nil {
		l = m.ChatPhoto.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatEditChatAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovChatTl(uint64(m.OperatorId))
	}
	if m.EditChatAdminId != 0 {
		n += 1 + sovChatTl(uint64(m.EditChatAdminId))
	}
	if m.IsAdmin != nil {
		l = m.IsAdmin.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatEditChatDefaultBannedRights) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovChatTl(uint64(m.OperatorId))
	}
	if m.BannedRights != nil {
		l = m.BannedRights.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatAddChatUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.InviterId != 0 {
		n += 1 + sovChatTl(uint64(m.InviterId))
	}
	if m.UserId != 0 {
		n += 1 + sovChatTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetMutableChatByLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatToggleNoForwards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovChatTl(uint64(m.OperatorId))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatMigratedToChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.Chat != nil {
		l = m.Chat.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovChatTl(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovChatTl(uint64(m.AccessHash))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetChatParticipantIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetUsersChatIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovChatTl(uint64(e))
		}
		n += 1 + sovChatTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetMyChatList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.UserId != 0 {
		n += 1 + sovChatTl(uint64(m.UserId))
	}
	if m.IsCreator != nil {
		l = m.IsCreator.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatExportChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.AdminId != 0 {
		n += 1 + sovChatTl(uint64(m.AdminId))
	}
	if m.LegacyRevokePermanent {
		n += 2
	}
	if m.RequestNeeded {
		n += 2
	}
	if m.ExpireDate != nil {
		l = m.ExpireDate.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.UsageLimit != nil {
		l = m.UsageLimit.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetAdminsWithInvites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetExportedChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetExportedChatInvites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.AdminId != 0 {
		n += 1 + sovChatTl(uint64(m.AdminId))
	}
	if m.Revoked {
		n += 2
	}
	if m.OffsetDate != nil {
		l = m.OffsetDate.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.OffsetLink != nil {
		l = m.OffsetLink.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovChatTl(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatCheckChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatImportChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatGetChatInviteImporters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.Requested {
		n += 2
	}
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Q != nil {
		l = m.Q.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovChatTl(uint64(m.OffsetDate))
	}
	if m.OffsetUser != 0 {
		n += 1 + sovChatTl(uint64(m.OffsetUser))
	}
	if m.Limit != 0 {
		n += 1 + sovChatTl(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatDeleteExportedChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatDeleteRevokedExportedChatInvites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.AdminId != 0 {
		n += 1 + sovChatTl(uint64(m.AdminId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatEditExportedChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.Revoked {
		n += 2
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.ExpireDate != nil {
		l = m.ExpireDate.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.UsageLimit != nil {
		l = m.UsageLimit.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.RequestNeeded != nil {
		l = m.RequestNeeded.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovChatTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatSetChatAvailableReactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.AvailableReactionsType != 0 {
		n += 1 + sovChatTl(uint64(m.AvailableReactionsType))
	}
	if len(m.AvailableReactions) > 0 {
		for _, s := range m.AvailableReactions {
			l = len(s)
			n += 1 + l + sovChatTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChatSetHistoryTTL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovChatTl(uint64(m.Constructor))
	}
	if m.SelfId != 0 {
		n += 1 + sovChatTl(uint64(m.SelfId))
	}
	if m.ChatId != 0 {
		n += 1 + sovChatTl(uint64(m.ChatId))
	}
	if m.TtlPeriod != 0 {
		n += 1 + sovChatTl(uint64(m.TtlPeriod))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_MutableChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovChatTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_Long) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		l = 0
		for _, e := range m.Datas {
			l += sovChatTl(uint64(e))
		}
		n += 1 + sovChatTl(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_UserChatIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovChatTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_ChatAdminWithInvites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovChatTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_ExportedChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovChatTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vector_ChatInviteImporter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovChatTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChatTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatTl(x uint64) (n int) {
	return sovChatTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChatInviteExt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatInviteExt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatInviteExt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chat == nil {
				m.Chat = &MutableChat{}
			}
			if err := m.Chat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestNeeded = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &mtproto.Photo{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Participants = append(m.Participants, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Participants) == 0 {
					m.Participants = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Participants = append(m.Participants, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatInviteAlready) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chatInviteAlready: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chatInviteAlready: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &ChatInviteExt{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &ChatInviteExt{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatInvitePeek) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chatInvitePeek: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chatInvitePeek: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &ChatInviteExt{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImmutableChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImmutableChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImmutableChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			m.Creator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Creator |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &mtproto.Photo{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CallActive = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallNotEmpty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CallNotEmpty = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Noforwards", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Noforwards = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantsCount", wireType)
			}
			m.ParticipantsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigratedTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MigratedTo == nil {
				m.MigratedTo = &mtproto.InputChannel{}
			}
			if err := m.MigratedTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultBannedRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultBannedRights == nil {
				m.DefaultBannedRights = &mtproto.ChatBannedRights{}
			}
			if err := m.DefaultBannedRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanSetUsername", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanSetUsername = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportedInvite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExportedInvite == nil {
				m.ExportedInvite = &mtproto.ExportedChatInvite{}
			}
			if err := m.ExportedInvite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotInfo = append(m.BotInfo, &mtproto.BotInfo{})
			if err := m.BotInfo[len(m.BotInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Call", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Call == nil {
				m.Call = &mtproto.InputGroupCall{}
			}
			if err := m.Call.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableReactionsType", wireType)
			}
			m.AvailableReactionsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableReactionsType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableReactions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableReactions = append(m.AvailableReactions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtlPeriod", wireType)
			}
			m.TtlPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TtlPeriod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLImmutableChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_immutableChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_immutableChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &ImmutableChat{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImmutableChatParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImmutableChatParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImmutableChatParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantType", wireType)
			}
			m.ParticipantType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParticipantType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Useage", wireType)
			}
			m.Useage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Useage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterUserId", wireType)
			}
			m.InviterUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviterUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitedAt", wireType)
			}
			m.InvitedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedAt", wireType)
			}
			m.KickedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftAt", wireType)
			}
			m.LeftAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRights == nil {
				m.AdminRights = &mtproto.ChatAdminRights{}
			}
			if err := m.AdminRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLImmutableChatParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_immutableChatParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_immutableChatParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &ImmutableChatParticipant{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MutableChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutableChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutableChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chat == nil {
				m.Chat = &ImmutableChat{}
			}
			if err := m.Chat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatParticipants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatParticipants = append(m.ChatParticipants, &ImmutableChatParticipant{})
			if err := m.ChatParticipants[len(m.ChatParticipants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMutableChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_mutableChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_mutableChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &MutableChat{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserChatIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserChatIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserChatIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChatIdList = append(m.ChatIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChatIdList) == 0 {
					m.ChatIdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChatIdList = append(m.ChatIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUserChatIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_userChatIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_userChatIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &UserChatIdList{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetMutableChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getMutableChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getMutableChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetChatListByIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getChatListByIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getChatListByIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdList = append(m.IdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.IdList) == 0 {
					m.IdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdList = append(m.IdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetChatBySelfId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getChatBySelfId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getChatBySelfId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatCreateChat2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_createChat2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_createChat2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorId", wireType)
			}
			m.CreatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIdList = append(m.UserIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIdList) == 0 {
					m.UserIdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIdList = append(m.UserIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdList", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatDeleteChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_deleteChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_deleteChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatDeleteChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_deleteChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_deleteChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteUserId", wireType)
			}
			m.DeleteUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeleteUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatEditChatTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_editChatTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_editChatTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditUserId", wireType)
			}
			m.EditUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatEditChatAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_editChatAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_editChatAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditUserId", wireType)
			}
			m.EditUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatEditChatPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_editChatPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_editChatPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditUserId", wireType)
			}
			m.EditUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatPhoto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChatPhoto == nil {
				m.ChatPhoto = &mtproto.Photo{}
			}
			if err := m.ChatPhoto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatEditChatAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_editChatAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_editChatAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditChatAdminId", wireType)
			}
			m.EditChatAdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditChatAdminId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsAdmin == nil {
				m.IsAdmin = &mtproto.Bool{}
			}
			if err := m.IsAdmin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatEditChatDefaultBannedRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_editChatDefaultBannedRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_editChatDefaultBannedRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BannedRights == nil {
				m.BannedRights = &mtproto.ChatBannedRights{}
			}
			if err := m.BannedRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatAddChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_addChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_addChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviterId", wireType)
			}
			m.InviterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviterId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetMutableChatByLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getMutableChatByLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getMutableChatByLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatToggleNoForwards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_toggleNoForwards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_toggleNoForwards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &mtproto.Bool{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatMigratedToChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_migratedToChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_migratedToChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Chat == nil {
				m.Chat = &MutableChat{}
			}
			if err := m.Chat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetChatParticipantIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getChatParticipantIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getChatParticipantIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetUsersChatIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getUsersChatIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getUsersChatIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetMyChatList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getMyChatList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getMyChatList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsCreator == nil {
				m.IsCreator = &mtproto.Bool{}
			}
			if err := m.IsCreator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatExportChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_exportChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_exportChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyRevokePermanent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LegacyRevokePermanent = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestNeeded = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpireDate == nil {
				m.ExpireDate = &types.Int32Value{}
			}
			if err := m.ExpireDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsageLimit == nil {
				m.UsageLimit = &types.Int32Value{}
			}
			if err := m.UsageLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &types.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetAdminsWithInvites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getAdminsWithInvites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getAdminsWithInvites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetExportedChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getExportedChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getExportedChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetExportedChatInvites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getExportedChatInvites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getExportedChatInvites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoked = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetDate == nil {
				m.OffsetDate = &types.Int32Value{}
			}
			if err := m.OffsetDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetLink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetLink == nil {
				m.OffsetLink = &types.StringValue{}
			}
			if err := m.OffsetLink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatCheckChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_checkChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_checkChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatImportChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_importChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_importChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatGetChatInviteImporters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_getChatInviteImporters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_getChatInviteImporters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Requested = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &types.StringValue{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Q == nil {
				m.Q = &types.StringValue{}
			}
			if err := m.Q.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetUser", wireType)
			}
			m.OffsetUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetUser |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatDeleteExportedChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_deleteExportedChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_deleteExportedChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatDeleteRevokedExportedChatInvites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_deleteRevokedExportedChatInvites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_deleteRevokedExportedChatInvites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminId", wireType)
			}
			m.AdminId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatEditExportedChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_editExportedChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_editExportedChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoked = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpireDate == nil {
				m.ExpireDate = &types.Int32Value{}
			}
			if err := m.ExpireDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsageLimit == nil {
				m.UsageLimit = &types.Int32Value{}
			}
			if err := m.UsageLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestNeeded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestNeeded == nil {
				m.RequestNeeded = &mtproto.Bool{}
			}
			if err := m.RequestNeeded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &types.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatSetChatAvailableReactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_setChatAvailableReactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_setChatAvailableReactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableReactionsType", wireType)
			}
			m.AvailableReactionsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableReactionsType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableReactions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableReactions = append(m.AvailableReactions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChatSetHistoryTTL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_chat_setHistoryTTL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_chat_setHistoryTTL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TtlPeriod", wireType)
			}
			m.TtlPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TtlPeriod |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_MutableChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_MutableChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_MutableChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &MutableChat{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_Long) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_Long: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_Long: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Datas = append(m.Datas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatTl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChatTl
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthChatTl
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Datas) == 0 {
					m.Datas = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatTl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Datas = append(m.Datas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_UserChatIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_UserChatIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_UserChatIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &UserChatIdList{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_ChatAdminWithInvites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_ChatAdminWithInvites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_ChatAdminWithInvites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &mtproto.ChatAdminWithInvites{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_ExportedChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_ExportedChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_ExportedChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &mtproto.ExportedChatInvite{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_ChatInviteImporter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_ChatInviteImporter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_ChatInviteImporter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &mtproto.ChatInviteImporter{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChatTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatTl = fmt.Errorf("proto: unexpected end of group")
)
