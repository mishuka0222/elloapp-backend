// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: updates.tl.proto

package updates

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                        TLConstructor = 0
	CRC32_channelDifference              TLConstructor = -853998774
	CRC32_differenceEmpty                TLConstructor = -1948526002
	CRC32_difference                     TLConstructor = 1417839403
	CRC32_differenceSlice                TLConstructor = -879338017
	CRC32_differenceTooLong              TLConstructor = 896724528
	CRC32_updates_getState               TLConstructor = 524332412
	CRC32_updates_getDifferenceV2        TLConstructor = -1217698151
	CRC32_updates_getChannelDifferenceV2 TLConstructor = 1302540682
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	-853998774:  "CRC32_channelDifference",
	-1948526002: "CRC32_differenceEmpty",
	1417839403:  "CRC32_difference",
	-879338017:  "CRC32_differenceSlice",
	896724528:   "CRC32_differenceTooLong",
	524332412:   "CRC32_updates_getState",
	-1217698151: "CRC32_updates_getDifferenceV2",
	1302540682:  "CRC32_updates_getChannelDifferenceV2",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                        0,
	"CRC32_channelDifference":              -853998774,
	"CRC32_differenceEmpty":                -1948526002,
	"CRC32_difference":                     1417839403,
	"CRC32_differenceSlice":                -879338017,
	"CRC32_differenceTooLong":              896724528,
	"CRC32_updates_getState":               524332412,
	"CRC32_updates_getDifferenceV2":        -1217698151,
	"CRC32_updates_getChannelDifferenceV2": 1302540682,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{0}
}

//--------------------------------------------------------------------------------------------
// channelDifference flags:# final:flags.0?true pts:int new_messages:Vector<Message> other_updates:Vector<Update> = ChannelDifference;
//
// ChannelDifference <--
//  + TL_channelDifference
//
type ChannelDifference struct {
	PredicateName        string             `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor      `protobuf:"varint,2,opt,name=constructor,proto3,enum=updates.TLConstructor" json:"constructor,omitempty"`
	Final                bool               `protobuf:"varint,3,opt,name=final,proto3" json:"final,omitempty"`
	Pts                  int32              `protobuf:"varint,4,opt,name=pts,proto3" json:"pts,omitempty"`
	NewMessages          []*mtproto.Message `protobuf:"bytes,5,rep,name=new_messages,json=newMessages,proto3" json:"new_messages,omitempty"`
	OtherUpdates         []*mtproto.Update  `protobuf:"bytes,6,rep,name=other_updates,json=otherUpdates,proto3" json:"other_updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ChannelDifference) Reset()         { *m = ChannelDifference{} }
func (m *ChannelDifference) String() string { return proto.CompactTextString(m) }
func (*ChannelDifference) ProtoMessage()    {}
func (*ChannelDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{0}
}
func (m *ChannelDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelDifference.Merge(m, src)
}
func (m *ChannelDifference) XXX_Size() int {
	return m.Size()
}
func (m *ChannelDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelDifference.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelDifference proto.InternalMessageInfo

func (m *ChannelDifference) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *ChannelDifference) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *ChannelDifference) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *ChannelDifference) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ChannelDifference) GetNewMessages() []*mtproto.Message {
	if m != nil {
		return m.NewMessages
	}
	return nil
}

func (m *ChannelDifference) GetOtherUpdates() []*mtproto.Update {
	if m != nil {
		return m.OtherUpdates
	}
	return nil
}

// channelDifference flags:# final:flags.0?true pts:int new_messages:Vector<Message> other_updates:Vector<Update> = ChannelDifference;
type TLChannelDifference struct {
	Data2                *ChannelDifference `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLChannelDifference) Reset()         { *m = TLChannelDifference{} }
func (m *TLChannelDifference) String() string { return proto.CompactTextString(m) }
func (*TLChannelDifference) ProtoMessage()    {}
func (*TLChannelDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{1}
}
func (m *TLChannelDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelDifference.Merge(m, src)
}
func (m *TLChannelDifference) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelDifference.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelDifference proto.InternalMessageInfo

func (m *TLChannelDifference) GetData2() *ChannelDifference {
	if m != nil {
		return m.Data2
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// differenceEmpty state:updates.State = Difference;
// difference new_messages:Vector<Message> other_updates:Vector<Update> state:updates.State = Difference;
// differenceSlice new_messages:Vector<Message> other_updates:Vector<Update> intermediate_state:updates.State = Difference;
// differenceTooLong pts:int = Difference;
//
// Difference <--
//  + TL_differenceEmpty
//  + TL_difference
//  + TL_differenceSlice
//  + TL_differenceTooLong
//
type Difference struct {
	PredicateName        string                 `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor          `protobuf:"varint,2,opt,name=constructor,proto3,enum=updates.TLConstructor" json:"constructor,omitempty"`
	State                *mtproto.Updates_State `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	NewMessages          []*mtproto.Message     `protobuf:"bytes,4,rep,name=new_messages,json=newMessages,proto3" json:"new_messages,omitempty"`
	OtherUpdates         []*mtproto.Update      `protobuf:"bytes,5,rep,name=other_updates,json=otherUpdates,proto3" json:"other_updates,omitempty"`
	IntermediateState    *mtproto.Updates_State `protobuf:"bytes,6,opt,name=intermediate_state,json=intermediateState,proto3" json:"intermediate_state,omitempty"`
	Pts                  int32                  `protobuf:"varint,7,opt,name=pts,proto3" json:"pts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Difference) Reset()         { *m = Difference{} }
func (m *Difference) String() string { return proto.CompactTextString(m) }
func (*Difference) ProtoMessage()    {}
func (*Difference) Descriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{2}
}
func (m *Difference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Difference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Difference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Difference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Difference.Merge(m, src)
}
func (m *Difference) XXX_Size() int {
	return m.Size()
}
func (m *Difference) XXX_DiscardUnknown() {
	xxx_messageInfo_Difference.DiscardUnknown(m)
}

var xxx_messageInfo_Difference proto.InternalMessageInfo

func (m *Difference) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *Difference) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *Difference) GetState() *mtproto.Updates_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Difference) GetNewMessages() []*mtproto.Message {
	if m != nil {
		return m.NewMessages
	}
	return nil
}

func (m *Difference) GetOtherUpdates() []*mtproto.Update {
	if m != nil {
		return m.OtherUpdates
	}
	return nil
}

func (m *Difference) GetIntermediateState() *mtproto.Updates_State {
	if m != nil {
		return m.IntermediateState
	}
	return nil
}

func (m *Difference) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

// differenceEmpty state:updates.State = Difference;
type TLDifferenceEmpty struct {
	Data2                *Difference `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TLDifferenceEmpty) Reset()         { *m = TLDifferenceEmpty{} }
func (m *TLDifferenceEmpty) String() string { return proto.CompactTextString(m) }
func (*TLDifferenceEmpty) ProtoMessage()    {}
func (*TLDifferenceEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{3}
}
func (m *TLDifferenceEmpty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDifferenceEmpty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDifferenceEmpty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDifferenceEmpty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDifferenceEmpty.Merge(m, src)
}
func (m *TLDifferenceEmpty) XXX_Size() int {
	return m.Size()
}
func (m *TLDifferenceEmpty) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDifferenceEmpty.DiscardUnknown(m)
}

var xxx_messageInfo_TLDifferenceEmpty proto.InternalMessageInfo

func (m *TLDifferenceEmpty) GetData2() *Difference {
	if m != nil {
		return m.Data2
	}
	return nil
}

// difference new_messages:Vector<Message> other_updates:Vector<Update> state:updates.State = Difference;
type TLDifference struct {
	Data2                *Difference `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TLDifference) Reset()         { *m = TLDifference{} }
func (m *TLDifference) String() string { return proto.CompactTextString(m) }
func (*TLDifference) ProtoMessage()    {}
func (*TLDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{4}
}
func (m *TLDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDifference.Merge(m, src)
}
func (m *TLDifference) XXX_Size() int {
	return m.Size()
}
func (m *TLDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDifference.DiscardUnknown(m)
}

var xxx_messageInfo_TLDifference proto.InternalMessageInfo

func (m *TLDifference) GetData2() *Difference {
	if m != nil {
		return m.Data2
	}
	return nil
}

// differenceSlice new_messages:Vector<Message> other_updates:Vector<Update> intermediate_state:updates.State = Difference;
type TLDifferenceSlice struct {
	Data2                *Difference `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TLDifferenceSlice) Reset()         { *m = TLDifferenceSlice{} }
func (m *TLDifferenceSlice) String() string { return proto.CompactTextString(m) }
func (*TLDifferenceSlice) ProtoMessage()    {}
func (*TLDifferenceSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{5}
}
func (m *TLDifferenceSlice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDifferenceSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDifferenceSlice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDifferenceSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDifferenceSlice.Merge(m, src)
}
func (m *TLDifferenceSlice) XXX_Size() int {
	return m.Size()
}
func (m *TLDifferenceSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDifferenceSlice.DiscardUnknown(m)
}

var xxx_messageInfo_TLDifferenceSlice proto.InternalMessageInfo

func (m *TLDifferenceSlice) GetData2() *Difference {
	if m != nil {
		return m.Data2
	}
	return nil
}

// differenceTooLong pts:int = Difference;
type TLDifferenceTooLong struct {
	Data2                *Difference `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TLDifferenceTooLong) Reset()         { *m = TLDifferenceTooLong{} }
func (m *TLDifferenceTooLong) String() string { return proto.CompactTextString(m) }
func (*TLDifferenceTooLong) ProtoMessage()    {}
func (*TLDifferenceTooLong) Descriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{6}
}
func (m *TLDifferenceTooLong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLDifferenceTooLong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLDifferenceTooLong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLDifferenceTooLong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLDifferenceTooLong.Merge(m, src)
}
func (m *TLDifferenceTooLong) XXX_Size() int {
	return m.Size()
}
func (m *TLDifferenceTooLong) XXX_DiscardUnknown() {
	xxx_messageInfo_TLDifferenceTooLong.DiscardUnknown(m)
}

var xxx_messageInfo_TLDifferenceTooLong proto.InternalMessageInfo

func (m *TLDifferenceTooLong) GetData2() *Difference {
	if m != nil {
		return m.Data2
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// updates.getState auth_key_id:long user_id:long = updates.State;
type TLUpdatesGetState struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=updates.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	UserId               int64         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUpdatesGetState) Reset()         { *m = TLUpdatesGetState{} }
func (m *TLUpdatesGetState) String() string { return proto.CompactTextString(m) }
func (*TLUpdatesGetState) ProtoMessage()    {}
func (*TLUpdatesGetState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{7}
}
func (m *TLUpdatesGetState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUpdatesGetState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUpdatesGetState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUpdatesGetState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUpdatesGetState.Merge(m, src)
}
func (m *TLUpdatesGetState) XXX_Size() int {
	return m.Size()
}
func (m *TLUpdatesGetState) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUpdatesGetState.DiscardUnknown(m)
}

var xxx_messageInfo_TLUpdatesGetState proto.InternalMessageInfo

func (m *TLUpdatesGetState) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUpdatesGetState) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLUpdatesGetState) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// updates.getDifferenceV2 flags:# auth_key_id:long user_id:long pts:int pts_total_limit:flags.0?int date:long = Difference;
type TLUpdatesGetDifferenceV2 struct {
	Constructor          TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=updates.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64             `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	UserId               int64             `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pts                  int32             `protobuf:"varint,5,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsTotalLimit        *types.Int32Value `protobuf:"bytes,6,opt,name=pts_total_limit,json=ptsTotalLimit,proto3" json:"pts_total_limit,omitempty"`
	Date                 int64             `protobuf:"varint,7,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TLUpdatesGetDifferenceV2) Reset()         { *m = TLUpdatesGetDifferenceV2{} }
func (m *TLUpdatesGetDifferenceV2) String() string { return proto.CompactTextString(m) }
func (*TLUpdatesGetDifferenceV2) ProtoMessage()    {}
func (*TLUpdatesGetDifferenceV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{8}
}
func (m *TLUpdatesGetDifferenceV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUpdatesGetDifferenceV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUpdatesGetDifferenceV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUpdatesGetDifferenceV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUpdatesGetDifferenceV2.Merge(m, src)
}
func (m *TLUpdatesGetDifferenceV2) XXX_Size() int {
	return m.Size()
}
func (m *TLUpdatesGetDifferenceV2) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUpdatesGetDifferenceV2.DiscardUnknown(m)
}

var xxx_messageInfo_TLUpdatesGetDifferenceV2 proto.InternalMessageInfo

func (m *TLUpdatesGetDifferenceV2) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUpdatesGetDifferenceV2) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLUpdatesGetDifferenceV2) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUpdatesGetDifferenceV2) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *TLUpdatesGetDifferenceV2) GetPtsTotalLimit() *types.Int32Value {
	if m != nil {
		return m.PtsTotalLimit
	}
	return nil
}

func (m *TLUpdatesGetDifferenceV2) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// updates.getChannelDifferenceV2 auth_key_id:long user_id:long channel_id:long pts:int limit:int = ChannelDifference;
type TLUpdatesGetChannelDifferenceV2 struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=updates.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	UserId               int64         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId            int64         `protobuf:"varint,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Pts                  int32         `protobuf:"varint,6,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit                int32         `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLUpdatesGetChannelDifferenceV2) Reset()         { *m = TLUpdatesGetChannelDifferenceV2{} }
func (m *TLUpdatesGetChannelDifferenceV2) String() string { return proto.CompactTextString(m) }
func (*TLUpdatesGetChannelDifferenceV2) ProtoMessage()    {}
func (*TLUpdatesGetChannelDifferenceV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_a220846e90de680d, []int{9}
}
func (m *TLUpdatesGetChannelDifferenceV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUpdatesGetChannelDifferenceV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUpdatesGetChannelDifferenceV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUpdatesGetChannelDifferenceV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUpdatesGetChannelDifferenceV2.Merge(m, src)
}
func (m *TLUpdatesGetChannelDifferenceV2) XXX_Size() int {
	return m.Size()
}
func (m *TLUpdatesGetChannelDifferenceV2) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUpdatesGetChannelDifferenceV2.DiscardUnknown(m)
}

var xxx_messageInfo_TLUpdatesGetChannelDifferenceV2 proto.InternalMessageInfo

func (m *TLUpdatesGetChannelDifferenceV2) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLUpdatesGetChannelDifferenceV2) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLUpdatesGetChannelDifferenceV2) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TLUpdatesGetChannelDifferenceV2) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *TLUpdatesGetChannelDifferenceV2) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *TLUpdatesGetChannelDifferenceV2) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterEnum("updates.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*ChannelDifference)(nil), "updates.ChannelDifference")
	proto.RegisterType((*TLChannelDifference)(nil), "updates.TL_channelDifference")
	proto.RegisterType((*Difference)(nil), "updates.Difference")
	proto.RegisterType((*TLDifferenceEmpty)(nil), "updates.TL_differenceEmpty")
	proto.RegisterType((*TLDifference)(nil), "updates.TL_difference")
	proto.RegisterType((*TLDifferenceSlice)(nil), "updates.TL_differenceSlice")
	proto.RegisterType((*TLDifferenceTooLong)(nil), "updates.TL_differenceTooLong")
	proto.RegisterType((*TLUpdatesGetState)(nil), "updates.TL_updates_getState")
	proto.RegisterType((*TLUpdatesGetDifferenceV2)(nil), "updates.TL_updates_getDifferenceV2")
	proto.RegisterType((*TLUpdatesGetChannelDifferenceV2)(nil), "updates.TL_updates_getChannelDifferenceV2")
}

func init() { proto.RegisterFile("updates.tl.proto", fileDescriptor_a220846e90de680d) }

var fileDescriptor_a220846e90de680d = []byte{
	// 925 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0x8e, 0x93, 0x38, 0x4b, 0x5f, 0x9a, 0xd6, 0x3b, 0x5d, 0x76, 0x83, 0xa1, 0x26, 0x98, 0x22,
	0x85, 0x55, 0xeb, 0x20, 0x2f, 0x07, 0xc4, 0x05, 0x41, 0xa8, 0xc4, 0xd2, 0xb0, 0x20, 0x37, 0x5b,
	0x24, 0x2e, 0xd6, 0xac, 0x33, 0xeb, 0x18, 0xe2, 0x1f, 0xf2, 0x4c, 0x58, 0x85, 0x23, 0x87, 0x52,
	0x55, 0xfc, 0x03, 0x88, 0x23, 0xdc, 0x2a, 0x24, 0x0e, 0xdc, 0xfa, 0x0f, 0x20, 0x2a, 0x10, 0x57,
	0x50, 0xa1, 0xb0, 0x70, 0xe0, 0x82, 0xe0, 0x88, 0x4a, 0xa5, 0x45, 0x9e, 0xb1, 0xe3, 0x6c, 0xbc,
	0x5b, 0xba, 0x1c, 0xd8, 0x53, 0xde, 0xbc, 0xef, 0x7b, 0x33, 0x6f, 0xbe, 0x79, 0xef, 0xc5, 0xa0,
	0x8c, 0xa3, 0x01, 0x66, 0x84, 0x1a, 0x6c, 0x64, 0x44, 0x71, 0xc8, 0x42, 0xb4, 0x90, 0x7a, 0xd4,
	0x0b, 0xae, 0xc7, 0x86, 0xe3, 0x2d, 0xc3, 0x09, 0xfd, 0x8e, 0x1b, 0xba, 0x61, 0x87, 0xe3, 0x5b,
	0xe3, 0x6d, 0xbe, 0xe2, 0x0b, 0x6e, 0x89, 0x38, 0x55, 0x73, 0xc3, 0xd0, 0x1d, 0x91, 0x9c, 0xb5,
	0x13, 0xe3, 0x28, 0x22, 0x31, 0x4d, 0x71, 0x95, 0x3a, 0x43, 0xe2, 0xe3, 0xe4, 0x20, 0x27, 0x8c,
	0x89, 0xcd, 0x26, 0x11, 0xc9, 0xb0, 0x47, 0x72, 0x8c, 0xc5, 0x38, 0xa0, 0x51, 0x18, 0xb3, 0x14,
	0x5a, 0xca, 0x21, 0x3a, 0x09, 0x1c, 0xe1, 0xd5, 0x3f, 0x28, 0xc3, 0x62, 0x77, 0x88, 0x83, 0x80,
	0x8c, 0x5e, 0xf6, 0xb6, 0xb7, 0x49, 0x4c, 0x02, 0x87, 0xa0, 0xa7, 0xe0, 0x54, 0x14, 0x93, 0x81,
	0xe7, 0x60, 0x46, 0xec, 0x00, 0xfb, 0xa4, 0x29, 0xb5, 0xa4, 0xf6, 0x09, 0xab, 0x31, 0xf5, 0x6e,
	0x60, 0x9f, 0xa0, 0xe7, 0xa0, 0xee, 0x84, 0x01, 0x65, 0xf1, 0xd8, 0x61, 0x61, 0xdc, 0x2c, 0xb7,
	0xa4, 0xf6, 0x29, 0x73, 0xd9, 0xc8, 0x94, 0xe8, 0xf7, 0xba, 0x39, 0x6a, 0xcd, 0x52, 0xd1, 0x12,
	0xc8, 0xdb, 0x5e, 0x80, 0x47, 0xcd, 0x4a, 0x4b, 0x6a, 0x3f, 0x64, 0x89, 0x05, 0x52, 0xa0, 0x12,
	0x31, 0xda, 0xac, 0xb6, 0xa4, 0xb6, 0x6c, 0x25, 0x26, 0x5a, 0x83, 0x93, 0x01, 0xd9, 0xb1, 0x7d,
	0x42, 0x29, 0x76, 0x09, 0x6d, 0xca, 0xad, 0x4a, 0xbb, 0x6e, 0x2a, 0x86, 0xcf, 0x78, 0xfa, 0xc6,
	0x6b, 0x02, 0xb0, 0xea, 0x01, 0xd9, 0x49, 0x6d, 0x8a, 0x9e, 0x85, 0x46, 0xc8, 0x86, 0x24, 0xb6,
	0xd3, 0x44, 0x9a, 0x35, 0x1e, 0x75, 0x7a, 0x1a, 0xb5, 0xc9, 0xfd, 0xd6, 0x49, 0xce, 0x12, 0x0b,
	0xaa, 0xbf, 0x02, 0x4b, 0xfd, 0x9e, 0xed, 0x14, 0xb4, 0x78, 0x06, 0xe4, 0x01, 0x66, 0xd8, 0xe4,
	0x12, 0xd4, 0x4d, 0x75, 0x7a, 0xbd, 0x82, 0x6c, 0x96, 0x20, 0xea, 0x77, 0xca, 0x00, 0xff, 0xa7,
	0x98, 0xe7, 0x41, 0xa6, 0x0c, 0x33, 0xc2, 0xc5, 0xac, 0x9b, 0xcb, 0xd3, 0x7b, 0xa6, 0xb1, 0xf6,
	0xe5, 0x04, 0xb5, 0x04, 0xa9, 0x20, 0x69, 0xf5, 0x3f, 0x49, 0x2a, 0x3f, 0x80, 0xa4, 0xe8, 0x22,
	0x20, 0x2f, 0x60, 0x24, 0xf6, 0xc9, 0xc0, 0x4b, 0x2e, 0x2f, 0xb2, 0xac, 0xdd, 0x37, 0xcb, 0xc5,
	0xd9, 0x08, 0xee, 0xca, 0xca, 0x62, 0x61, 0x5a, 0x16, 0xfa, 0x0b, 0x80, 0xfa, 0x3d, 0x7b, 0x30,
	0xd5, 0xf8, 0xa2, 0x1f, 0xb1, 0x09, 0x7a, 0x7a, 0xff, 0x4b, 0x9d, 0x99, 0x6a, 0x57, 0x7c, 0xa2,
	0xe7, 0xa1, 0xb1, 0x6f, 0x83, 0xa3, 0xc4, 0xce, 0x1f, 0x7e, 0x79, 0xe4, 0x1d, 0x6d, 0x83, 0x17,
	0x79, 0xa5, 0xe5, 0x1b, 0xf4, 0xc3, 0xb0, 0x17, 0x06, 0xee, 0x51, 0xb6, 0xb8, 0x26, 0xc1, 0x99,
	0x7e, 0x2f, 0x7b, 0x0d, 0xdb, 0x25, 0x4c, 0x48, 0x35, 0x57, 0x44, 0xd2, 0x83, 0x17, 0x91, 0x06,
	0x75, 0x3c, 0x66, 0x43, 0xfb, 0x1d, 0x32, 0xb1, 0xbd, 0x01, 0x2f, 0xa5, 0x8a, 0x75, 0x22, 0x71,
	0x5d, 0x22, 0x93, 0xf5, 0x01, 0x5a, 0x81, 0x85, 0x31, 0x25, 0x71, 0x82, 0x55, 0x39, 0x56, 0x4b,
	0x96, 0xeb, 0x03, 0xfd, 0xae, 0x04, 0xea, 0xfe, 0x54, 0xf2, 0x74, 0xaf, 0x98, 0xc7, 0x90, 0x51,
	0x56, 0x2f, 0x72, 0x3e, 0x46, 0xba, 0x70, 0x3a, 0x62, 0xd4, 0x66, 0x21, 0xc3, 0x23, 0x7b, 0xe4,
	0xf9, 0x1e, 0x4b, 0xab, 0xf0, 0x51, 0x43, 0x0c, 0x5b, 0x23, 0x1b, 0xb6, 0xc6, 0x7a, 0xc0, 0xd6,
	0xcc, 0x2b, 0x78, 0x34, 0x26, 0x56, 0x23, 0x62, 0xb4, 0x9f, 0x84, 0xf4, 0x92, 0x08, 0x84, 0xa0,
	0x9a, 0xe4, 0xcc, 0xeb, 0xb0, 0x62, 0x71, 0x5b, 0xff, 0x41, 0x82, 0x27, 0xf6, 0x5f, 0xbe, 0x30,
	0x15, 0x8e, 0x47, 0x83, 0xb3, 0x00, 0xe9, 0x28, 0x4b, 0x30, 0x59, 0xc4, 0xa5, 0x9e, 0x5c, 0xa2,
	0x5a, 0x2e, 0xd1, 0x12, 0xc8, 0x42, 0x18, 0xd1, 0x66, 0x62, 0xb1, 0x7a, 0xab, 0x9c, 0x34, 0xca,
	0x4c, 0x7a, 0x68, 0x11, 0x1a, 0x5d, 0xab, 0xbb, 0x66, 0xda, 0x9b, 0x1b, 0x97, 0x36, 0x5e, 0x7f,
	0x73, 0x43, 0x29, 0xa1, 0x73, 0xb0, 0x22, 0x5c, 0x85, 0xe1, 0xa9, 0x7c, 0x75, 0xf5, 0xd7, 0xdf,
	0xee, 0xed, 0xed, 0xed, 0xed, 0x49, 0x48, 0x87, 0x87, 0x05, 0x6b, 0xae, 0x6d, 0x95, 0x6f, 0xbe,
	0xf8, 0xe3, 0xc7, 0xbf, 0x04, 0xa7, 0x09, 0xca, 0x3c, 0x47, 0xb9, 0x71, 0xf5, 0xfa, 0xa7, 0xf2,
	0x41, 0xd1, 0xbc, 0xef, 0x94, 0x3b, 0x37, 0xbf, 0xbb, 0x9d, 0x9e, 0xf0, 0x78, 0x96, 0x47, 0xa1,
	0xb5, 0x94, 0xcf, 0x6f, 0xdf, 0xba, 0x51, 0x41, 0x1a, 0x2c, 0x0b, 0xc2, 0x7c, 0xdf, 0x28, 0xf7,
	0xbe, 0x7f, 0xff, 0xae, 0x84, 0x56, 0xe1, 0x6c, 0x01, 0x9f, 0x7d, 0x48, 0xe5, 0xa3, 0xaf, 0x3f,
	0xbb, 0xf9, 0xb7, 0x38, 0xec, 0x3c, 0x9c, 0x2b, 0x70, 0x0f, 0x78, 0x7b, 0xe5, 0xfa, 0x2f, 0x1f,
	0xfe, 0x5e, 0x55, 0xab, 0xd7, 0x3e, 0xd1, 0x4a, 0xe6, 0xc7, 0x65, 0x00, 0xeb, 0x8d, 0x6e, 0x36,
	0x1e, 0x5f, 0x9d, 0x7e, 0x34, 0xe4, 0x0d, 0xfc, 0xd8, 0x4c, 0x55, 0x14, 0xd2, 0x54, 0x0f, 0x19,
	0x9a, 0x7a, 0x09, 0x6d, 0xc2, 0xca, 0x61, 0x1d, 0xf8, 0xe4, 0x21, 0x5b, 0xce, 0x92, 0xd4, 0x83,
	0x86, 0x8d, 0x5e, 0x42, 0x6f, 0x83, 0xf6, 0x2f, 0xb5, 0xbd, 0x7a, 0xc8, 0xee, 0x07, 0x70, 0xd5,
	0xfb, 0xfc, 0x77, 0xea, 0xa5, 0x97, 0x36, 0xff, 0xfc, 0x59, 0x93, 0xbe, 0xdc, 0xd5, 0xa4, 0x6f,
	0x77, 0x35, 0xe9, 0xa7, 0x5d, 0x4d, 0x7a, 0xab, 0xcb, 0x08, 0xf6, 0xdd, 0x18, 0xfb, 0x86, 0x17,
	0x76, 0x32, 0xfb, 0x02, 0x25, 0xf1, 0xbb, 0x24, 0xee, 0xe0, 0x28, 0xea, 0x24, 0xa6, 0xe7, 0x90,
	0xce, 0x96, 0xf7, 0x9e, 0x9d, 0xd9, 0xe9, 0x11, 0xd9, 0xef, 0x56, 0x8d, 0x0b, 0xb6, 0xf6, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x80, 0x57, 0x14, 0xa1, 0x09, 0x00, 0x00,
}

func (this *ChannelDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&updates.ChannelDifference{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Final: "+fmt.Sprintf("%#v", this.Final)+",\n")
	s = append(s, "Pts: "+fmt.Sprintf("%#v", this.Pts)+",\n")
	if this.NewMessages != nil {
		s = append(s, "NewMessages: "+fmt.Sprintf("%#v", this.NewMessages)+",\n")
	}
	if this.OtherUpdates != nil {
		s = append(s, "OtherUpdates: "+fmt.Sprintf("%#v", this.OtherUpdates)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLChannelDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&updates.TLChannelDifference{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Difference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&updates.Difference{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	if this.NewMessages != nil {
		s = append(s, "NewMessages: "+fmt.Sprintf("%#v", this.NewMessages)+",\n")
	}
	if this.OtherUpdates != nil {
		s = append(s, "OtherUpdates: "+fmt.Sprintf("%#v", this.OtherUpdates)+",\n")
	}
	if this.IntermediateState != nil {
		s = append(s, "IntermediateState: "+fmt.Sprintf("%#v", this.IntermediateState)+",\n")
	}
	s = append(s, "Pts: "+fmt.Sprintf("%#v", this.Pts)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDifferenceEmpty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&updates.TLDifferenceEmpty{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&updates.TLDifference{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDifferenceSlice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&updates.TLDifferenceSlice{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLDifferenceTooLong) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&updates.TLDifferenceTooLong{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUpdatesGetState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&updates.TLUpdatesGetState{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUpdatesGetDifferenceV2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&updates.TLUpdatesGetDifferenceV2{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Pts: "+fmt.Sprintf("%#v", this.Pts)+",\n")
	if this.PtsTotalLimit != nil {
		s = append(s, "PtsTotalLimit: "+fmt.Sprintf("%#v", this.PtsTotalLimit)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLUpdatesGetChannelDifferenceV2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&updates.TLUpdatesGetChannelDifferenceV2{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "ChannelId: "+fmt.Sprintf("%#v", this.ChannelId)+",\n")
	s = append(s, "Pts: "+fmt.Sprintf("%#v", this.Pts)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUpdatesTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCUpdatesClient is the client API for RPCUpdates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCUpdatesClient interface {
	// updates.getState auth_key_id:long user_id:long = updates.State;
	UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*mtproto.Updates_State, error)
	// updates.getDifferenceV2 flags:# auth_key_id:long user_id:long pts:int pts_total_limit:flags.0?int date:long = Difference;
	UpdatesGetDifferenceV2(ctx context.Context, in *TLUpdatesGetDifferenceV2, opts ...grpc.CallOption) (*Difference, error)
	// updates.getChannelDifferenceV2 auth_key_id:long user_id:long channel_id:long pts:int limit:int = ChannelDifference;
	UpdatesGetChannelDifferenceV2(ctx context.Context, in *TLUpdatesGetChannelDifferenceV2, opts ...grpc.CallOption) (*ChannelDifference, error)
}

type rPCUpdatesClient struct {
	cc *grpc.ClientConn
}

func NewRPCUpdatesClient(cc *grpc.ClientConn) RPCUpdatesClient {
	return &rPCUpdatesClient{cc}
}

func (c *rPCUpdatesClient) UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*mtproto.Updates_State, error) {
	out := new(mtproto.Updates_State)
	err := c.cc.Invoke(ctx, "/updates.RPCUpdates/updates_getState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesClient) UpdatesGetDifferenceV2(ctx context.Context, in *TLUpdatesGetDifferenceV2, opts ...grpc.CallOption) (*Difference, error) {
	out := new(Difference)
	err := c.cc.Invoke(ctx, "/updates.RPCUpdates/updates_getDifferenceV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesClient) UpdatesGetChannelDifferenceV2(ctx context.Context, in *TLUpdatesGetChannelDifferenceV2, opts ...grpc.CallOption) (*ChannelDifference, error) {
	out := new(ChannelDifference)
	err := c.cc.Invoke(ctx, "/updates.RPCUpdates/updates_getChannelDifferenceV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUpdatesServer is the server API for RPCUpdates service.
type RPCUpdatesServer interface {
	// updates.getState auth_key_id:long user_id:long = updates.State;
	UpdatesGetState(context.Context, *TLUpdatesGetState) (*mtproto.Updates_State, error)
	// updates.getDifferenceV2 flags:# auth_key_id:long user_id:long pts:int pts_total_limit:flags.0?int date:long = Difference;
	UpdatesGetDifferenceV2(context.Context, *TLUpdatesGetDifferenceV2) (*Difference, error)
	// updates.getChannelDifferenceV2 auth_key_id:long user_id:long channel_id:long pts:int limit:int = ChannelDifference;
	UpdatesGetChannelDifferenceV2(context.Context, *TLUpdatesGetChannelDifferenceV2) (*ChannelDifference, error)
}

// UnimplementedRPCUpdatesServer can be embedded to have forward compatible implementations.
type UnimplementedRPCUpdatesServer struct {
}

func (*UnimplementedRPCUpdatesServer) UpdatesGetState(ctx context.Context, req *TLUpdatesGetState) (*mtproto.Updates_State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetState not implemented")
}
func (*UnimplementedRPCUpdatesServer) UpdatesGetDifferenceV2(ctx context.Context, req *TLUpdatesGetDifferenceV2) (*Difference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetDifferenceV2 not implemented")
}
func (*UnimplementedRPCUpdatesServer) UpdatesGetChannelDifferenceV2(ctx context.Context, req *TLUpdatesGetChannelDifferenceV2) (*ChannelDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetChannelDifferenceV2 not implemented")
}

func RegisterRPCUpdatesServer(s *grpc.Server, srv RPCUpdatesServer) {
	s.RegisterService(&_RPCUpdates_serviceDesc, srv)
}

func _RPCUpdates_UpdatesGetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.RPCUpdates/UpdatesGetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetState(ctx, req.(*TLUpdatesGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdates_UpdatesGetDifferenceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetDifferenceV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetDifferenceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.RPCUpdates/UpdatesGetDifferenceV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetDifferenceV2(ctx, req.(*TLUpdatesGetDifferenceV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdates_UpdatesGetChannelDifferenceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetChannelDifferenceV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetChannelDifferenceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/updates.RPCUpdates/UpdatesGetChannelDifferenceV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetChannelDifferenceV2(ctx, req.(*TLUpdatesGetChannelDifferenceV2))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCUpdates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "updates.RPCUpdates",
	HandlerType: (*RPCUpdatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updates_getState",
			Handler:    _RPCUpdates_UpdatesGetState_Handler,
		},
		{
			MethodName: "updates_getDifferenceV2",
			Handler:    _RPCUpdates_UpdatesGetDifferenceV2_Handler,
		},
		{
			MethodName: "updates_getChannelDifferenceV2",
			Handler:    _RPCUpdates_UpdatesGetChannelDifferenceV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "updates.tl.proto",
}

func (m *ChannelDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OtherUpdates) > 0 {
		for iNdEx := len(m.OtherUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OtherUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.NewMessages) > 0 {
		for iNdEx := len(m.NewMessages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewMessages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Pts != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x20
	}
	if m.Final {
		i--
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintUpdatesTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Difference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Difference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Difference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pts != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x38
	}
	if m.IntermediateState != nil {
		{
			size, err := m.IntermediateState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.OtherUpdates) > 0 {
		for iNdEx := len(m.OtherUpdates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OtherUpdates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.NewMessages) > 0 {
		for iNdEx := len(m.NewMessages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NewMessages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintUpdatesTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLDifferenceEmpty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDifferenceEmpty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDifferenceEmpty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLDifferenceSlice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDifferenceSlice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDifferenceSlice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLDifferenceTooLong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLDifferenceTooLong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLDifferenceTooLong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUpdatesGetState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUpdatesGetState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUpdatesGetState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x20
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUpdatesGetDifferenceV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUpdatesGetDifferenceV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUpdatesGetDifferenceV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Date != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x38
	}
	if m.PtsTotalLimit != nil {
		{
			size, err := m.PtsTotalLimit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpdatesTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Pts != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x28
	}
	if m.UserId != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x20
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUpdatesGetChannelDifferenceV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUpdatesGetChannelDifferenceV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUpdatesGetChannelDifferenceV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x38
	}
	if m.Pts != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x30
	}
	if m.ChannelId != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x28
	}
	if m.UserId != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x20
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintUpdatesTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUpdatesTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovUpdatesTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChannelDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovUpdatesTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Constructor))
	}
	if m.Final {
		n += 2
	}
	if m.Pts != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Pts))
	}
	if len(m.NewMessages) > 0 {
		for _, e := range m.NewMessages {
			l = e.Size()
			n += 1 + l + sovUpdatesTl(uint64(l))
		}
	}
	if len(m.OtherUpdates) > 0 {
		for _, e := range m.OtherUpdates {
			l = e.Size()
			n += 1 + l + sovUpdatesTl(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLChannelDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUpdatesTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Difference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovUpdatesTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Constructor))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovUpdatesTl(uint64(l))
	}
	if len(m.NewMessages) > 0 {
		for _, e := range m.NewMessages {
			l = e.Size()
			n += 1 + l + sovUpdatesTl(uint64(l))
		}
	}
	if len(m.OtherUpdates) > 0 {
		for _, e := range m.OtherUpdates {
			l = e.Size()
			n += 1 + l + sovUpdatesTl(uint64(l))
		}
	}
	if m.IntermediateState != nil {
		l = m.IntermediateState.Size()
		n += 1 + l + sovUpdatesTl(uint64(l))
	}
	if m.Pts != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Pts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDifferenceEmpty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUpdatesTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUpdatesTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDifferenceSlice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUpdatesTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLDifferenceTooLong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovUpdatesTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUpdatesGetState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovUpdatesTl(uint64(m.AuthKeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovUpdatesTl(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUpdatesGetDifferenceV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovUpdatesTl(uint64(m.AuthKeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovUpdatesTl(uint64(m.UserId))
	}
	if m.Pts != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Pts))
	}
	if m.PtsTotalLimit != nil {
		l = m.PtsTotalLimit.Size()
		n += 1 + l + sovUpdatesTl(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Date))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLUpdatesGetChannelDifferenceV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovUpdatesTl(uint64(m.AuthKeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovUpdatesTl(uint64(m.UserId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovUpdatesTl(uint64(m.ChannelId))
	}
	if m.Pts != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovUpdatesTl(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUpdatesTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpdatesTl(x uint64) (n int) {
	return sovUpdatesTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChannelDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMessages = append(m.NewMessages, &mtproto.Message{})
			if err := m.NewMessages[len(m.NewMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherUpdates = append(m.OtherUpdates, &mtproto.Update{})
			if err := m.OtherUpdates[len(m.OtherUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatesTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channelDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channelDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &ChannelDifference{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatesTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Difference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Difference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Difference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &mtproto.Updates_State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMessages = append(m.NewMessages, &mtproto.Message{})
			if err := m.NewMessages[len(m.NewMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherUpdates = append(m.OtherUpdates, &mtproto.Update{})
			if err := m.OtherUpdates[len(m.OtherUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntermediateState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IntermediateState == nil {
				m.IntermediateState = &mtproto.Updates_State{}
			}
			if err := m.IntermediateState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatesTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDifferenceEmpty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_differenceEmpty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_differenceEmpty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &Difference{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatesTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_difference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_difference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &Difference{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatesTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDifferenceSlice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_differenceSlice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_differenceSlice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &Difference{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatesTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLDifferenceTooLong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_differenceTooLong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_differenceTooLong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &Difference{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatesTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUpdatesGetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_updates_getState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_updates_getState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatesTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUpdatesGetDifferenceV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_updates_getDifferenceV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_updates_getDifferenceV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsTotalLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PtsTotalLimit == nil {
				m.PtsTotalLimit = &types.Int32Value{}
			}
			if err := m.PtsTotalLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatesTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUpdatesGetChannelDifferenceV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_updates_getChannelDifferenceV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_updates_getChannelDifferenceV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUpdatesTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdatesTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpdatesTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpdatesTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdatesTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpdatesTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUpdatesTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUpdatesTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUpdatesTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpdatesTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUpdatesTl = fmt.Errorf("proto: unexpected end of group")
)
