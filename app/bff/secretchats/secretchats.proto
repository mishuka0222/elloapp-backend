syntax = "proto3";

option go_package = "secretchats";

package secretchats;

import "rpc_error_codes.proto";
import "schema.tl.core_types.proto";
import "schema.tl.crc32.proto";
import "schema.tl.handshake.proto";
import "schema.tl.handshake_service.proto";
import "schema.tl.sync.proto";
import "schema.tl.sync_service.proto";
import "schema.tl.transport.proto";
import "schema.tl.transport_service.proto";
import "service.tl.proto";

message TLMessagesGetDhConfig {}
message TLMessagesRequestEncryption {}
message TLMessagesDiscardEncryption {}
message TLMessagesAcceptEncryption {}
message TLMessagesSetEncryptedTyping {}
message TLMessagesReadEncryptedHistory {}
message TLMessagesSendEncrypted {}
message TLMessagesSendEncryptedFile {}
message Vector_Long {}
message TLMessagesSendEncryptedService {}
message TLMessagesReceivedQueue {}
message Messages_DhConfig {}
message EncryptedChat {}
message Bool {}
message Messages_SentEncryptedMessage {}

service RPCSecretChats {
  rpc MessagesGetDhConfig(TLMessagesGetDhConfig) returns (Messages_DhConfig);
  rpc MessagesRequestEncryption(TLMessagesRequestEncryption) returns (EncryptedChat);
  rpc MessagesAcceptEncryption(TLMessagesAcceptEncryption) returns (EncryptedChat);
  rpc MessagesDiscardEncryption(TLMessagesDiscardEncryption) returns (Bool);
  rpc MessagesSetEncryptedTyping(TLMessagesSetEncryptedTyping) returns (Bool);
  rpc MessagesReadEncryptedHistory(TLMessagesReadEncryptedHistory) returns (Bool);
  rpc MessagesSendEncrypted(TLMessagesSendEncrypted) returns (Messages_SentEncryptedMessage);
  rpc MessagesSendEncryptedFile(TLMessagesSendEncryptedFile) returns (Messages_SentEncryptedMessage);
  rpc MessagesSendEncryptedService(TLMessagesSendEncryptedService) returns (Messages_SentEncryptedMessage);
  rpc MessagesReceivedQueue(TLMessagesReceivedQueue) returns (Vector_Long);
}






