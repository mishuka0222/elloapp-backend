package core_test

import (
	"github.com/stretchr/testify/assert"
	"gitlab.com/merehead/elloapp/backend/elloapp_tg_backend/mtproto/crypto"
	"testing"
)

var (
	// openssl dhparam -5 -C 2048
	/*
		-----BEGIN DH PARAMETERS-----
		MIIBCAKCAQEA5hrkY66t2ALzA+6Ky2PMHVta2bP8BaCE/3q7JmCuPjxCGJAblt3h
		Zp9fytE+ZI6K39I/5QUAXdSnigyfpcMzidg6G4Yas7glB/jqYPgrZ2ydRYSc7JYa
		mA5QfTgcXu2LDbBw4GA120i8sjDITbKy9S6ZUC8Kv3R4UnxKSDu5c1DtDcy8Ngvg
		RDIT1kpILKw12uRK37vDYbAPGZX6xUK5Byt8FABPupK/uppgvb24213nh+/HS1lE
		e4M6i5FtDUV8HeE4n/mnhjGRYPSJHcCUgO7hrvfEEyM5F0nf6MmMJuMNDxiKVOu0
		IhKtqtQ0IhVRkCM7f/817e3Rr4TvyJzZxwIBBQ==
		-----END DH PARAMETERS-----
	*/
	dh2048_p = []byte{
		0xE6, 0x1A, 0xE4, 0x63, 0xAE, 0xAD, 0xD8, 0x02, 0xF3, 0x03, 0xEE, 0x8A,
		0xCB, 0x63, 0xCC, 0x1D, 0x5B, 0x5A, 0xD9, 0xB3, 0xFC, 0x05, 0xA0, 0x84,
		0xFF, 0x7A, 0xBB, 0x26, 0x60, 0xAE, 0x3E, 0x3C, 0x42, 0x18, 0x90, 0x1B,
		0x96, 0xDD, 0xE1, 0x66, 0x9F, 0x5F, 0xCA, 0xD1, 0x3E, 0x64, 0x8E, 0x8A,
		0xDF, 0xD2, 0x3F, 0xE5, 0x05, 0x00, 0x5D, 0xD4, 0xA7, 0x8A, 0x0C, 0x9F,
		0xA5, 0xC3, 0x33, 0x89, 0xD8, 0x3A, 0x1B, 0x86, 0x1A, 0xB3, 0xB8, 0x25,
		0x07, 0xF8, 0xEA, 0x60, 0xF8, 0x2B, 0x67, 0x6C, 0x9D, 0x45, 0x84, 0x9C,
		0xEC, 0x96, 0x1A, 0x98, 0x0E, 0x50, 0x7D, 0x38, 0x1C, 0x5E, 0xED, 0x8B,
		0x0D, 0xB0, 0x70, 0xE0, 0x60, 0x35, 0xDB, 0x48, 0xBC, 0xB2, 0x30, 0xC8,
		0x4D, 0xB2, 0xB2, 0xF5, 0x2E, 0x99, 0x50, 0x2F, 0x0A, 0xBF, 0x74, 0x78,
		0x52, 0x7C, 0x4A, 0x48, 0x3B, 0xB9, 0x73, 0x50, 0xED, 0x0D, 0xCC, 0xBC,
		0x36, 0x0B, 0xE0, 0x44, 0x32, 0x13, 0xD6, 0x4A, 0x48, 0x2C, 0xAC, 0x35,
		0xDA, 0xE4, 0x4A, 0xDF, 0xBB, 0xC3, 0x61, 0xB0, 0x0F, 0x19, 0x95, 0xFA,
		0xC5, 0x42, 0xB9, 0x07, 0x2B, 0x7C, 0x14, 0x00, 0x4F, 0xBA, 0x92, 0xBF,
		0xBA, 0x9A, 0x60, 0xBD, 0xBD, 0xB8, 0xDB, 0x5D, 0xE7, 0x87, 0xEF, 0xC7,
		0x4B, 0x59, 0x44, 0x7B, 0x83, 0x3A, 0x8B, 0x91, 0x6D, 0x0D, 0x45, 0x7C,
		0x1D, 0xE1, 0x38, 0x9F, 0xF9, 0xA7, 0x86, 0x31, 0x91, 0x60, 0xF4, 0x89,
		0x1D, 0xC0, 0x94, 0x80, 0xEE, 0xE1, 0xAE, 0xF7, 0xC4, 0x13, 0x23, 0x39,
		0x17, 0x49, 0xDF, 0xE8, 0xC9, 0x8C, 0x26, 0xE3, 0x0D, 0x0F, 0x18, 0x8A,
		0x54, 0xEB, 0xB4, 0x22, 0x12, 0xAD, 0xAA, 0xD4, 0x34, 0x22, 0x15, 0x51,
		0x90, 0x23, 0x3B, 0x7F, 0xFF, 0x35, 0xED, 0xED, 0xD1, 0xAF, 0x84, 0xEF,
		0xC8, 0x9C, 0xD9, 0xC7,
	}
	dh2048_g = []byte{0x05}

	// var gNewAlgoP
	// path: mtproto/crypto/srp_util_test.go
	gNewAlgoP = []byte{
		0xc7, 0x1c, 0xae, 0xb9, 0xc6, 0xb1, 0xc9, 0x04, 0x8e, 0x6c, 0x52, 0x2f,
		0x70, 0xf1, 0x3f, 0x73, 0x98, 0x0d, 0x40, 0x23, 0x8e, 0x3e, 0x21, 0xc1,
		0x49, 0x34, 0xd0, 0x37, 0x56, 0x3d, 0x93, 0x0f, 0x48, 0x19, 0x8a, 0x0a,
		0xa7, 0xc1, 0x40, 0x58, 0x22, 0x94, 0x93, 0xd2, 0x25, 0x30, 0xf4, 0xdb,
		0xfa, 0x33, 0x6f, 0x6e, 0x0a, 0xc9, 0x25, 0x13, 0x95, 0x43, 0xae, 0xd4,
		0x4c, 0xce, 0x7c, 0x37, 0x20, 0xfd, 0x51, 0xf6, 0x94, 0x58, 0x70, 0x5a,
		0xc6, 0x8c, 0xd4, 0xfe, 0x6b, 0x6b, 0x13, 0xab, 0xdc, 0x97, 0x46, 0x51,
		0x29, 0x69, 0x32, 0x84, 0x54, 0xf1, 0x8f, 0xaf, 0x8c, 0x59, 0x5f, 0x64,
		0x24, 0x77, 0xfe, 0x96, 0xbb, 0x2a, 0x94, 0x1d, 0x5b, 0xcd, 0x1d, 0x4a,
		0xc8, 0xcc, 0x49, 0x88, 0x07, 0x08, 0xfa, 0x9b, 0x37, 0x8e, 0x3c, 0x4f,
		0x3a, 0x90, 0x60, 0xbe, 0xe6, 0x7c, 0xf9, 0xa4, 0xa4, 0xa6, 0x95, 0x81,
		0x10, 0x51, 0x90, 0x7e, 0x16, 0x27, 0x53, 0xb5, 0x6b, 0x0f, 0x6b, 0x41,
		0x0d, 0xba, 0x74, 0xd8, 0xa8, 0x4b, 0x2a, 0x14, 0xb3, 0x14, 0x4e, 0x0e,
		0xf1, 0x28, 0x47, 0x54, 0xfd, 0x17, 0xed, 0x95, 0x0d, 0x59, 0x65, 0xb4,
		0xb9, 0xdd, 0x46, 0x58, 0x2d, 0xb1, 0x17, 0x8d, 0x16, 0x9c, 0x6b, 0xc4,
		0x65, 0xb0, 0xd6, 0xff, 0x9c, 0xa3, 0x92, 0x8f, 0xef, 0x5b, 0x9a, 0xe4,
		0xe4, 0x18, 0xfc, 0x15, 0xe8, 0x3e, 0xbe, 0xa0, 0xf8, 0x7f, 0xa9, 0xff,
		0x5e, 0xed, 0x70, 0x05, 0x0d, 0xed, 0x28, 0x49, 0xf4, 0x7b, 0xf9, 0x59,
		0xd9, 0x56, 0x85, 0x0c, 0xe9, 0x29, 0x85, 0x1f, 0x0d, 0x81, 0x15, 0xf6,
		0x35, 0xb1, 0x05, 0xee, 0x2e, 0x4e, 0x15, 0xd0, 0x4b, 0x24, 0x54, 0xbf,
		0x6f, 0x4f, 0xad, 0xf0, 0x34, 0xb1, 0x04, 0x03, 0x11, 0x9c, 0xd8, 0xe3,
		0xb9, 0x2f, 0xcc, 0x5b,
	}
	gNewAlgoG = int32(3)
)

func TestSecretchatsCore_MessagesGetDhConfig(t *testing.T) {

	/*
		// don't work
		// MARK: dhgen "github.com/Luzifer/go-dhparam"
		dh, err := dhgen.GenerateWithContext(context.Background(), 2048, dhgen.GeneratorFive, nil)
		if err != nil {
			t.Fatal(err)
		}
		//fmt.Println(len(dh.P.Bytes()), dh.G)
		ok := crypto.IsGoodPrime(dh.P.Bytes(), dh.G)
		assert.True(t, ok)
	*/

	// work
	ok := crypto.IsGoodPrime(gNewAlgoP, int(gNewAlgoG))
	assert.True(t, ok)

}
