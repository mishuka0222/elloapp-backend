// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: configuration_service.proto

package configuration

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetCountryListReq struct {
	LangCode             string   `protobuf:"bytes,1,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCountryListReq) Reset()         { *m = GetCountryListReq{} }
func (m *GetCountryListReq) String() string { return proto.CompactTextString(m) }
func (*GetCountryListReq) ProtoMessage()    {}
func (*GetCountryListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d33bd7f202be48, []int{0}
}
func (m *GetCountryListReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCountryListReq.Unmarshal(m, b)
}
func (m *GetCountryListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCountryListReq.Marshal(b, m, deterministic)
}
func (m *GetCountryListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCountryListReq.Merge(m, src)
}
func (m *GetCountryListReq) XXX_Size() int {
	return xxx_messageInfo_GetCountryListReq.Size(m)
}
func (m *GetCountryListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCountryListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCountryListReq proto.InternalMessageInfo

func (m *GetCountryListReq) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

type CountryDO struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Flag                 string   `protobuf:"bytes,2,opt,name=flag,proto3" json:"flag,omitempty"`
	Code                 string   `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountryDO) Reset()         { *m = CountryDO{} }
func (m *CountryDO) String() string { return proto.CompactTextString(m) }
func (*CountryDO) ProtoMessage()    {}
func (*CountryDO) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d33bd7f202be48, []int{1}
}
func (m *CountryDO) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountryDO.Unmarshal(m, b)
}
func (m *CountryDO) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountryDO.Marshal(b, m, deterministic)
}
func (m *CountryDO) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountryDO.Merge(m, src)
}
func (m *CountryDO) XXX_Size() int {
	return xxx_messageInfo_CountryDO.Size(m)
}
func (m *CountryDO) XXX_DiscardUnknown() {
	xxx_messageInfo_CountryDO.DiscardUnknown(m)
}

var xxx_messageInfo_CountryDO proto.InternalMessageInfo

func (m *CountryDO) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CountryDO) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *CountryDO) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type GetCountryListResp struct {
	Data                 []*CountryDO `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetCountryListResp) Reset()         { *m = GetCountryListResp{} }
func (m *GetCountryListResp) String() string { return proto.CompactTextString(m) }
func (*GetCountryListResp) ProtoMessage()    {}
func (*GetCountryListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_31d33bd7f202be48, []int{2}
}
func (m *GetCountryListResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCountryListResp.Unmarshal(m, b)
}
func (m *GetCountryListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCountryListResp.Marshal(b, m, deterministic)
}
func (m *GetCountryListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCountryListResp.Merge(m, src)
}
func (m *GetCountryListResp) XXX_Size() int {
	return xxx_messageInfo_GetCountryListResp.Size(m)
}
func (m *GetCountryListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCountryListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCountryListResp proto.InternalMessageInfo

func (m *GetCountryListResp) GetData() []*CountryDO {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*GetCountryListReq)(nil), "configuration.GetCountryListReq")
	proto.RegisterType((*CountryDO)(nil), "configuration.CountryDO")
	proto.RegisterType((*GetCountryListResp)(nil), "configuration.GetCountryListResp")
}

func init() { proto.RegisterFile("configuration_service.proto", fileDescriptor_31d33bd7f202be48) }

var fileDescriptor_31d33bd7f202be48 = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0x2f, 0x2d, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x8b, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x45, 0x91, 0x54, 0x32, 0xe0, 0x12, 0x74,
	0x4f, 0x2d, 0x71, 0xce, 0x2f, 0xcd, 0x2b, 0x29, 0xaa, 0xf4, 0xc9, 0x2c, 0x2e, 0x09, 0x4a, 0x2d,
	0x14, 0x92, 0xe6, 0xe2, 0xcc, 0x49, 0xcc, 0x4b, 0x8f, 0x4f, 0xce, 0x4f, 0x49, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x00, 0x09, 0x38, 0xe7, 0xa7, 0xa4, 0x2a, 0xb9, 0x73, 0x71, 0x42,
	0x95, 0xbb, 0xf8, 0x0b, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xc2, 0x14, 0x81, 0xd9, 0x20, 0xb1,
	0xb4, 0x9c, 0xc4, 0x74, 0x09, 0x26, 0x88, 0x18, 0x88, 0x0d, 0x12, 0x03, 0x1b, 0xc6, 0x0c, 0x11,
	0x03, 0xb1, 0x95, 0x9c, 0xb8, 0x84, 0xd0, 0xad, 0x2e, 0x2e, 0x10, 0xd2, 0xe1, 0x62, 0x49, 0x49,
	0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x36, 0x92, 0xd0, 0x43, 0x71, 0xae, 0x1e, 0xdc,
	0xe6, 0x20, 0xb0, 0x2a, 0xa3, 0x72, 0x2e, 0x81, 0xa0, 0x00, 0x67, 0x67, 0x64, 0x35, 0x42, 0xc9,
	0x5c, 0x32, 0xa8, 0x01, 0x90, 0x8e, 0x62, 0x8b, 0x90, 0x02, 0x9a, 0x99, 0x18, 0xfe, 0x97, 0x52,
	0x24, 0xa0, 0xa2, 0xb8, 0xc0, 0xc9, 0x8d, 0x4b, 0x14, 0x6b, 0x28, 0x3b, 0x49, 0x45, 0x05, 0x80,
	0xc2, 0x19, 0xc5, 0x49, 0xc1, 0x10, 0x39, 0x0f, 0xa6, 0x00, 0xc6, 0x28, 0xd4, 0xf0, 0x4f, 0x62,
	0x03, 0xc7, 0x8a, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xe2, 0xd1, 0x30, 0xb4, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCConfigurationClient is the client API for RPCConfiguration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCConfigurationClient interface {
	ConfigurationGetCountryList(ctx context.Context, in *GetCountryListReq, opts ...grpc.CallOption) (*GetCountryListResp, error)
}

type rPCConfigurationClient struct {
	cc *grpc.ClientConn
}

func NewRPCConfigurationClient(cc *grpc.ClientConn) RPCConfigurationClient {
	return &rPCConfigurationClient{cc}
}

func (c *rPCConfigurationClient) ConfigurationGetCountryList(ctx context.Context, in *GetCountryListReq, opts ...grpc.CallOption) (*GetCountryListResp, error) {
	out := new(GetCountryListResp)
	err := c.cc.Invoke(ctx, "/configuration.RPCConfiguration/configuration_getCountryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCConfigurationServer is the server API for RPCConfiguration service.
type RPCConfigurationServer interface {
	ConfigurationGetCountryList(context.Context, *GetCountryListReq) (*GetCountryListResp, error)
}

// UnimplementedRPCConfigurationServer can be embedded to have forward compatible implementations.
type UnimplementedRPCConfigurationServer struct {
}

func (*UnimplementedRPCConfigurationServer) ConfigurationGetCountryList(ctx context.Context, req *GetCountryListReq) (*GetCountryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationGetCountryList not implemented")
}

func RegisterRPCConfigurationServer(s *grpc.Server, srv RPCConfigurationServer) {
	s.RegisterService(&_RPCConfiguration_serviceDesc, srv)
}

func _RPCConfiguration_ConfigurationGetCountryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCConfigurationServer).ConfigurationGetCountryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/configuration.RPCConfiguration/ConfigurationGetCountryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCConfigurationServer).ConfigurationGetCountryList(ctx, req.(*GetCountryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCConfiguration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "configuration.RPCConfiguration",
	HandlerType: (*RPCConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "configuration_getCountryList",
			Handler:    _RPCConfiguration_ConfigurationGetCountryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configuration_service.proto",
}
