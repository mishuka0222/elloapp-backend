// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: session.tl.proto

package session

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TLConstructor int32

const (
	CRC32_UNKNOWN                        TLConstructor = 0
	CRC32_sessionClientEvent             TLConstructor = -739769057
	CRC32_sessionClientData              TLConstructor = 825806990
	CRC32_httpSessionData                TLConstructor = -606579889
	CRC32_session_queryAuthKey           TLConstructor = 1798174801
	CRC32_session_setAuthKey             TLConstructor = 487672075
	CRC32_session_createSession          TLConstructor = 1091351053
	CRC32_session_sendDataToSession      TLConstructor = -2023019028
	CRC32_session_sendHttpDataToSession  TLConstructor = -1142152274
	CRC32_session_closeSession           TLConstructor = 393200211
	CRC32_session_pushUpdatesData        TLConstructor = 1075152191
	CRC32_session_pushSessionUpdatesData TLConstructor = 106898165
	CRC32_session_pushRpcResultData      TLConstructor = 556344000
)

var TLConstructor_name = map[int32]string{
	0:           "CRC32_UNKNOWN",
	-739769057:  "CRC32_sessionClientEvent",
	825806990:   "CRC32_sessionClientData",
	-606579889:  "CRC32_httpSessionData",
	1798174801:  "CRC32_session_queryAuthKey",
	487672075:   "CRC32_session_setAuthKey",
	1091351053:  "CRC32_session_createSession",
	-2023019028: "CRC32_session_sendDataToSession",
	-1142152274: "CRC32_session_sendHttpDataToSession",
	393200211:   "CRC32_session_closeSession",
	1075152191:  "CRC32_session_pushUpdatesData",
	106898165:   "CRC32_session_pushSessionUpdatesData",
	556344000:   "CRC32_session_pushRpcResultData",
}

var TLConstructor_value = map[string]int32{
	"CRC32_UNKNOWN":                        0,
	"CRC32_sessionClientEvent":             -739769057,
	"CRC32_sessionClientData":              825806990,
	"CRC32_httpSessionData":                -606579889,
	"CRC32_session_queryAuthKey":           1798174801,
	"CRC32_session_setAuthKey":             487672075,
	"CRC32_session_createSession":          1091351053,
	"CRC32_session_sendDataToSession":      -2023019028,
	"CRC32_session_sendHttpDataToSession":  -1142152274,
	"CRC32_session_closeSession":           393200211,
	"CRC32_session_pushUpdatesData":        1075152191,
	"CRC32_session_pushSessionUpdatesData": 106898165,
	"CRC32_session_pushRpcResultData":      556344000,
}

func (x TLConstructor) String() string {
	return proto.EnumName(TLConstructor_name, int32(x))
}

func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{0}
}

//--------------------------------------------------------------------------------------------
// sessionClientEvent server_id:string conn_type:int auth_key_id:long session_id:long client_ip:string = SessionClientEvent;
//
// SessionClientEvent <--
//  + TL_sessionClientEvent
//
type SessionClientEvent struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	ServerId             string        `protobuf:"bytes,3,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ConnType             int32         `protobuf:"varint,4,opt,name=conn_type,json=connType,proto3" json:"conn_type,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,5,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId            int64         `protobuf:"varint,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ClientIp             string        `protobuf:"bytes,7,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SessionClientEvent) Reset()         { *m = SessionClientEvent{} }
func (m *SessionClientEvent) String() string { return proto.CompactTextString(m) }
func (*SessionClientEvent) ProtoMessage()    {}
func (*SessionClientEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{0}
}
func (m *SessionClientEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionClientEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionClientEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionClientEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionClientEvent.Merge(m, src)
}
func (m *SessionClientEvent) XXX_Size() int {
	return m.Size()
}
func (m *SessionClientEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionClientEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SessionClientEvent proto.InternalMessageInfo

func (m *SessionClientEvent) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *SessionClientEvent) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *SessionClientEvent) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *SessionClientEvent) GetConnType() int32 {
	if m != nil {
		return m.ConnType
	}
	return 0
}

func (m *SessionClientEvent) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *SessionClientEvent) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionClientEvent) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

// sessionClientEvent server_id:string conn_type:int auth_key_id:long session_id:long client_ip:string = SessionClientEvent;
type TLSessionClientEvent struct {
	Data2                *SessionClientEvent `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TLSessionClientEvent) Reset()         { *m = TLSessionClientEvent{} }
func (m *TLSessionClientEvent) String() string { return proto.CompactTextString(m) }
func (*TLSessionClientEvent) ProtoMessage()    {}
func (*TLSessionClientEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{1}
}
func (m *TLSessionClientEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionClientEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionClientEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionClientEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionClientEvent.Merge(m, src)
}
func (m *TLSessionClientEvent) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionClientEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionClientEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionClientEvent proto.InternalMessageInfo

func (m *TLSessionClientEvent) GetData2() *SessionClientEvent {
	if m != nil {
		return m.Data2
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// sessionClientData  server_id:string conn_type:int auth_key_id:long session_id:long client_ip:string quick_ack:int salt:long payload:bytes = SessionClientData;
//
// SessionClientData <--
//  + TL_sessionClientData
//
type SessionClientData struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	ServerId             string        `protobuf:"bytes,3,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ConnType             int32         `protobuf:"varint,4,opt,name=conn_type,json=connType,proto3" json:"conn_type,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,5,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId            int64         `protobuf:"varint,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ClientIp             string        `protobuf:"bytes,7,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	QuickAck             int32         `protobuf:"varint,8,opt,name=quick_ack,json=quickAck,proto3" json:"quick_ack,omitempty"`
	Salt                 int64         `protobuf:"varint,9,opt,name=salt,proto3" json:"salt,omitempty"`
	Payload              []byte        `protobuf:"bytes,10,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SessionClientData) Reset()         { *m = SessionClientData{} }
func (m *SessionClientData) String() string { return proto.CompactTextString(m) }
func (*SessionClientData) ProtoMessage()    {}
func (*SessionClientData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{2}
}
func (m *SessionClientData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionClientData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionClientData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionClientData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionClientData.Merge(m, src)
}
func (m *SessionClientData) XXX_Size() int {
	return m.Size()
}
func (m *SessionClientData) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionClientData.DiscardUnknown(m)
}

var xxx_messageInfo_SessionClientData proto.InternalMessageInfo

func (m *SessionClientData) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *SessionClientData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *SessionClientData) GetServerId() string {
	if m != nil {
		return m.ServerId
	}
	return ""
}

func (m *SessionClientData) GetConnType() int32 {
	if m != nil {
		return m.ConnType
	}
	return 0
}

func (m *SessionClientData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *SessionClientData) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionClientData) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *SessionClientData) GetQuickAck() int32 {
	if m != nil {
		return m.QuickAck
	}
	return 0
}

func (m *SessionClientData) GetSalt() int64 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *SessionClientData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// sessionClientData  server_id:string conn_type:int auth_key_id:long session_id:long client_ip:string quick_ack:int salt:long payload:bytes = SessionClientData;
type TLSessionClientData struct {
	Data2                *SessionClientData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLSessionClientData) Reset()         { *m = TLSessionClientData{} }
func (m *TLSessionClientData) String() string { return proto.CompactTextString(m) }
func (*TLSessionClientData) ProtoMessage()    {}
func (*TLSessionClientData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{3}
}
func (m *TLSessionClientData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionClientData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionClientData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionClientData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionClientData.Merge(m, src)
}
func (m *TLSessionClientData) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionClientData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionClientData.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionClientData proto.InternalMessageInfo

func (m *TLSessionClientData) GetData2() *SessionClientData {
	if m != nil {
		return m.Data2
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// httpSessionData payload:bytes = HttpSessionData;
//
// HttpSessionData <--
//  + TL_httpSessionData
//
type HttpSessionData struct {
	PredicateName        string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	Payload              []byte        `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HttpSessionData) Reset()         { *m = HttpSessionData{} }
func (m *HttpSessionData) String() string { return proto.CompactTextString(m) }
func (*HttpSessionData) ProtoMessage()    {}
func (*HttpSessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{4}
}
func (m *HttpSessionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HttpSessionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HttpSessionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HttpSessionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpSessionData.Merge(m, src)
}
func (m *HttpSessionData) XXX_Size() int {
	return m.Size()
}
func (m *HttpSessionData) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpSessionData.DiscardUnknown(m)
}

var xxx_messageInfo_HttpSessionData proto.InternalMessageInfo

func (m *HttpSessionData) GetPredicateName() string {
	if m != nil {
		return m.PredicateName
	}
	return ""
}

func (m *HttpSessionData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *HttpSessionData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// httpSessionData payload:bytes = HttpSessionData;
type TLHttpSessionData struct {
	Data2                *HttpSessionData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLHttpSessionData) Reset()         { *m = TLHttpSessionData{} }
func (m *TLHttpSessionData) String() string { return proto.CompactTextString(m) }
func (*TLHttpSessionData) ProtoMessage()    {}
func (*TLHttpSessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{5}
}
func (m *TLHttpSessionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHttpSessionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHttpSessionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHttpSessionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHttpSessionData.Merge(m, src)
}
func (m *TLHttpSessionData) XXX_Size() int {
	return m.Size()
}
func (m *TLHttpSessionData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHttpSessionData.DiscardUnknown(m)
}

var xxx_messageInfo_TLHttpSessionData proto.InternalMessageInfo

func (m *TLHttpSessionData) GetData2() *HttpSessionData {
	if m != nil {
		return m.Data2
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// session.queryAuthKey auth_key_id:long = AuthKeyInfo;
type TLSessionQueryAuthKey struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLSessionQueryAuthKey) Reset()         { *m = TLSessionQueryAuthKey{} }
func (m *TLSessionQueryAuthKey) String() string { return proto.CompactTextString(m) }
func (*TLSessionQueryAuthKey) ProtoMessage()    {}
func (*TLSessionQueryAuthKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{6}
}
func (m *TLSessionQueryAuthKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionQueryAuthKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionQueryAuthKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionQueryAuthKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionQueryAuthKey.Merge(m, src)
}
func (m *TLSessionQueryAuthKey) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionQueryAuthKey) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionQueryAuthKey.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionQueryAuthKey proto.InternalMessageInfo

func (m *TLSessionQueryAuthKey) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLSessionQueryAuthKey) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// session.setAuthKey auth_key:AuthKeyInfo future_salt:FutureSalt expires_in:int = Bool;
type TLSessionSetAuthKey struct {
	Constructor          TLConstructor        `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	AuthKey              *mtproto.AuthKeyInfo `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	FutureSalt           *mtproto.FutureSalt  `protobuf:"bytes,4,opt,name=future_salt,json=futureSalt,proto3" json:"future_salt,omitempty"`
	ExpiresIn            int32                `protobuf:"varint,5,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TLSessionSetAuthKey) Reset()         { *m = TLSessionSetAuthKey{} }
func (m *TLSessionSetAuthKey) String() string { return proto.CompactTextString(m) }
func (*TLSessionSetAuthKey) ProtoMessage()    {}
func (*TLSessionSetAuthKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{7}
}
func (m *TLSessionSetAuthKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionSetAuthKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionSetAuthKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionSetAuthKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionSetAuthKey.Merge(m, src)
}
func (m *TLSessionSetAuthKey) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionSetAuthKey) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionSetAuthKey.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionSetAuthKey proto.InternalMessageInfo

func (m *TLSessionSetAuthKey) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLSessionSetAuthKey) GetAuthKey() *mtproto.AuthKeyInfo {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

func (m *TLSessionSetAuthKey) GetFutureSalt() *mtproto.FutureSalt {
	if m != nil {
		return m.FutureSalt
	}
	return nil
}

func (m *TLSessionSetAuthKey) GetExpiresIn() int32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

//--------------------------------------------------------------------------------------------
// session.createSession client:SessionClientEvent = Bool;
type TLSessionCreateSession struct {
	Constructor          TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	Client               *SessionClientEvent `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TLSessionCreateSession) Reset()         { *m = TLSessionCreateSession{} }
func (m *TLSessionCreateSession) String() string { return proto.CompactTextString(m) }
func (*TLSessionCreateSession) ProtoMessage()    {}
func (*TLSessionCreateSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{8}
}
func (m *TLSessionCreateSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionCreateSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionCreateSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionCreateSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionCreateSession.Merge(m, src)
}
func (m *TLSessionCreateSession) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionCreateSession) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionCreateSession.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionCreateSession proto.InternalMessageInfo

func (m *TLSessionCreateSession) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLSessionCreateSession) GetClient() *SessionClientEvent {
	if m != nil {
		return m.Client
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// session.sendDataToSession data:SessionClientData = Bool;
type TLSessionSendDataToSession struct {
	Constructor          TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	Data                 *SessionClientData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLSessionSendDataToSession) Reset()         { *m = TLSessionSendDataToSession{} }
func (m *TLSessionSendDataToSession) String() string { return proto.CompactTextString(m) }
func (*TLSessionSendDataToSession) ProtoMessage()    {}
func (*TLSessionSendDataToSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{9}
}
func (m *TLSessionSendDataToSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionSendDataToSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionSendDataToSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionSendDataToSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionSendDataToSession.Merge(m, src)
}
func (m *TLSessionSendDataToSession) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionSendDataToSession) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionSendDataToSession.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionSendDataToSession proto.InternalMessageInfo

func (m *TLSessionSendDataToSession) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLSessionSendDataToSession) GetData() *SessionClientData {
	if m != nil {
		return m.Data
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// session.sendHttpDataToSession client:SessionClientData = HttpSessionData;
type TLSessionSendHttpDataToSession struct {
	Constructor          TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	Client               *SessionClientData `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TLSessionSendHttpDataToSession) Reset()         { *m = TLSessionSendHttpDataToSession{} }
func (m *TLSessionSendHttpDataToSession) String() string { return proto.CompactTextString(m) }
func (*TLSessionSendHttpDataToSession) ProtoMessage()    {}
func (*TLSessionSendHttpDataToSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{10}
}
func (m *TLSessionSendHttpDataToSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionSendHttpDataToSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionSendHttpDataToSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionSendHttpDataToSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionSendHttpDataToSession.Merge(m, src)
}
func (m *TLSessionSendHttpDataToSession) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionSendHttpDataToSession) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionSendHttpDataToSession.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionSendHttpDataToSession proto.InternalMessageInfo

func (m *TLSessionSendHttpDataToSession) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLSessionSendHttpDataToSession) GetClient() *SessionClientData {
	if m != nil {
		return m.Client
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// session.closeSession client:SessionClientEvent = Bool;
type TLSessionCloseSession struct {
	Constructor          TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	Client               *SessionClientEvent `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TLSessionCloseSession) Reset()         { *m = TLSessionCloseSession{} }
func (m *TLSessionCloseSession) String() string { return proto.CompactTextString(m) }
func (*TLSessionCloseSession) ProtoMessage()    {}
func (*TLSessionCloseSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{11}
}
func (m *TLSessionCloseSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionCloseSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionCloseSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionCloseSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionCloseSession.Merge(m, src)
}
func (m *TLSessionCloseSession) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionCloseSession) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionCloseSession.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionCloseSession proto.InternalMessageInfo

func (m *TLSessionCloseSession) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLSessionCloseSession) GetClient() *SessionClientEvent {
	if m != nil {
		return m.Client
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// session.pushUpdatesData flags:# auth_key_id:long notification:flags.0?true updates:Updates = Bool;
type TLSessionPushUpdatesData struct {
	Constructor          TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64            `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Notification         bool             `protobuf:"varint,4,opt,name=notification,proto3" json:"notification,omitempty"`
	Updates              *mtproto.Updates `protobuf:"bytes,5,opt,name=updates,proto3" json:"updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLSessionPushUpdatesData) Reset()         { *m = TLSessionPushUpdatesData{} }
func (m *TLSessionPushUpdatesData) String() string { return proto.CompactTextString(m) }
func (*TLSessionPushUpdatesData) ProtoMessage()    {}
func (*TLSessionPushUpdatesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{12}
}
func (m *TLSessionPushUpdatesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionPushUpdatesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionPushUpdatesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionPushUpdatesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionPushUpdatesData.Merge(m, src)
}
func (m *TLSessionPushUpdatesData) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionPushUpdatesData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionPushUpdatesData.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionPushUpdatesData proto.InternalMessageInfo

func (m *TLSessionPushUpdatesData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLSessionPushUpdatesData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLSessionPushUpdatesData) GetNotification() bool {
	if m != nil {
		return m.Notification
	}
	return false
}

func (m *TLSessionPushUpdatesData) GetUpdates() *mtproto.Updates {
	if m != nil {
		return m.Updates
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// session.pushSessionUpdatesData auth_key_id:long session_id:long updates:Updates = Bool;
type TLSessionPushSessionUpdatesData struct {
	Constructor          TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64            `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId            int64            `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Updates              *mtproto.Updates `protobuf:"bytes,5,opt,name=updates,proto3" json:"updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TLSessionPushSessionUpdatesData) Reset()         { *m = TLSessionPushSessionUpdatesData{} }
func (m *TLSessionPushSessionUpdatesData) String() string { return proto.CompactTextString(m) }
func (*TLSessionPushSessionUpdatesData) ProtoMessage()    {}
func (*TLSessionPushSessionUpdatesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{13}
}
func (m *TLSessionPushSessionUpdatesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionPushSessionUpdatesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionPushSessionUpdatesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionPushSessionUpdatesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionPushSessionUpdatesData.Merge(m, src)
}
func (m *TLSessionPushSessionUpdatesData) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionPushSessionUpdatesData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionPushSessionUpdatesData.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionPushSessionUpdatesData proto.InternalMessageInfo

func (m *TLSessionPushSessionUpdatesData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLSessionPushSessionUpdatesData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLSessionPushSessionUpdatesData) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *TLSessionPushSessionUpdatesData) GetUpdates() *mtproto.Updates {
	if m != nil {
		return m.Updates
	}
	return nil
}

//--------------------------------------------------------------------------------------------
// session.pushRpcResultData auth_key_id:long session_id:long client_req_msg_id:long rpc_result_data:bytes = Bool;
type TLSessionPushRpcResultData struct {
	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=session.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	SessionId            int64         `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ClientReqMsgId       int64         `protobuf:"varint,5,opt,name=client_req_msg_id,json=clientReqMsgId,proto3" json:"client_req_msg_id,omitempty"`
	RpcResultData        []byte        `protobuf:"bytes,6,opt,name=rpc_result_data,json=rpcResultData,proto3" json:"rpc_result_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TLSessionPushRpcResultData) Reset()         { *m = TLSessionPushRpcResultData{} }
func (m *TLSessionPushRpcResultData) String() string { return proto.CompactTextString(m) }
func (*TLSessionPushRpcResultData) ProtoMessage()    {}
func (*TLSessionPushRpcResultData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b8e1e0b46c4ab6f, []int{14}
}
func (m *TLSessionPushRpcResultData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSessionPushRpcResultData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSessionPushRpcResultData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSessionPushRpcResultData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSessionPushRpcResultData.Merge(m, src)
}
func (m *TLSessionPushRpcResultData) XXX_Size() int {
	return m.Size()
}
func (m *TLSessionPushRpcResultData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSessionPushRpcResultData.DiscardUnknown(m)
}

var xxx_messageInfo_TLSessionPushRpcResultData proto.InternalMessageInfo

func (m *TLSessionPushRpcResultData) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return CRC32_UNKNOWN
}

func (m *TLSessionPushRpcResultData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *TLSessionPushRpcResultData) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *TLSessionPushRpcResultData) GetClientReqMsgId() int64 {
	if m != nil {
		return m.ClientReqMsgId
	}
	return 0
}

func (m *TLSessionPushRpcResultData) GetRpcResultData() []byte {
	if m != nil {
		return m.RpcResultData
	}
	return nil
}

func init() {
	proto.RegisterEnum("session.TLConstructor", TLConstructor_name, TLConstructor_value)
	proto.RegisterType((*SessionClientEvent)(nil), "session.SessionClientEvent")
	proto.RegisterType((*TLSessionClientEvent)(nil), "session.TL_sessionClientEvent")
	proto.RegisterType((*SessionClientData)(nil), "session.SessionClientData")
	proto.RegisterType((*TLSessionClientData)(nil), "session.TL_sessionClientData")
	proto.RegisterType((*HttpSessionData)(nil), "session.HttpSessionData")
	proto.RegisterType((*TLHttpSessionData)(nil), "session.TL_httpSessionData")
	proto.RegisterType((*TLSessionQueryAuthKey)(nil), "session.TL_session_queryAuthKey")
	proto.RegisterType((*TLSessionSetAuthKey)(nil), "session.TL_session_setAuthKey")
	proto.RegisterType((*TLSessionCreateSession)(nil), "session.TL_session_createSession")
	proto.RegisterType((*TLSessionSendDataToSession)(nil), "session.TL_session_sendDataToSession")
	proto.RegisterType((*TLSessionSendHttpDataToSession)(nil), "session.TL_session_sendHttpDataToSession")
	proto.RegisterType((*TLSessionCloseSession)(nil), "session.TL_session_closeSession")
	proto.RegisterType((*TLSessionPushUpdatesData)(nil), "session.TL_session_pushUpdatesData")
	proto.RegisterType((*TLSessionPushSessionUpdatesData)(nil), "session.TL_session_pushSessionUpdatesData")
	proto.RegisterType((*TLSessionPushRpcResultData)(nil), "session.TL_session_pushRpcResultData")
}

func init() { proto.RegisterFile("session.tl.proto", fileDescriptor_3b8e1e0b46c4ab6f) }

var fileDescriptor_3b8e1e0b46c4ab6f = []byte{
	// 1204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0xcd, 0x6f, 0xdb, 0x64,
	0x18, 0xaf, 0xdb, 0xf4, 0xeb, 0xc9, 0xda, 0xb9, 0x2f, 0x2d, 0xf5, 0x52, 0x9a, 0x65, 0x2e, 0x85,
	0xae, 0xb0, 0x64, 0xa4, 0x1c, 0xe0, 0xb8, 0x75, 0x43, 0x0b, 0x2d, 0xdd, 0xe4, 0x76, 0x42, 0x42,
	0x42, 0xd6, 0x5b, 0xe7, 0x4d, 0x6a, 0x35, 0xf1, 0xeb, 0xda, 0xaf, 0x07, 0xb9, 0xed, 0xc0, 0xa1,
	0xdd, 0x00, 0x21, 0xfe, 0x81, 0x81, 0x40, 0x9c, 0x10, 0x42, 0x5c, 0x38, 0xec, 0x30, 0x2e, 0x85,
	0xdd, 0x00, 0x21, 0x40, 0x08, 0x09, 0x58, 0xe1, 0x80, 0x10, 0x87, 0x5d, 0x90, 0x90, 0x00, 0x15,
	0xf9, 0xb5, 0x93, 0xf8, 0x2b, 0x01, 0x54, 0xd8, 0x0e, 0x9c, 0xea, 0x3c, 0xcf, 0xcf, 0xcf, 0xf3,
	0x7b, 0xbe, 0x5d, 0x10, 0x6d, 0x62, 0xdb, 0x3a, 0x35, 0xf2, 0xac, 0x96, 0x37, 0x2d, 0xca, 0x28,
	0x1a, 0xf4, 0x25, 0x99, 0x13, 0x55, 0x9d, 0x6d, 0x38, 0xeb, 0x79, 0x8d, 0xd6, 0x0b, 0x55, 0x5a,
	0xa5, 0x05, 0xae, 0x5f, 0x77, 0x2a, 0xfc, 0x17, 0xff, 0xc1, 0x9f, 0xbc, 0xf7, 0x32, 0xd9, 0x2a,
	0xa5, 0xd5, 0x1a, 0x69, 0xa3, 0x9e, 0xb3, 0xb0, 0x69, 0x12, 0xcb, 0xf6, 0xf5, 0x19, 0x5b, 0xdb,
	0x20, 0x75, 0xec, 0x3a, 0xd2, 0xa8, 0x45, 0x54, 0xd6, 0x30, 0x49, 0x53, 0x77, 0xa4, 0xad, 0x63,
	0x16, 0x36, 0x6c, 0x93, 0x5a, 0xcc, 0x57, 0x8d, 0xb7, 0x55, 0x76, 0xc3, 0xd0, 0x3c, 0xa9, 0x7c,
	0xb5, 0x17, 0xd0, 0xaa, 0xc7, 0x73, 0xb1, 0xa6, 0x13, 0x83, 0x9d, 0xbd, 0x44, 0x0c, 0x86, 0x66,
	0x61, 0xd4, 0xb4, 0x48, 0x59, 0xd7, 0x30, 0x23, 0xaa, 0x81, 0xeb, 0x44, 0x12, 0x72, 0xc2, 0xdc,
	0xb0, 0x32, 0xd2, 0x92, 0xae, 0xe0, 0x3a, 0x41, 0x8f, 0x41, 0x5a, 0xa3, 0x86, 0xcd, 0x2c, 0x47,
	0x63, 0xd4, 0x92, 0x7a, 0x73, 0xc2, 0xdc, 0x68, 0xf1, 0xde, 0x7c, 0x33, 0x15, 0x6b, 0xcb, 0x8b,
	0x6d, 0xad, 0x12, 0x84, 0xa2, 0x29, 0x18, 0xb6, 0x89, 0x75, 0x89, 0x58, 0xaa, 0x5e, 0x96, 0xfa,
	0xb8, 0xed, 0x21, 0x4f, 0x50, 0x2a, 0xbb, 0x4a, 0x8d, 0x1a, 0x06, 0x8f, 0x4c, 0x4a, 0xe5, 0x84,
	0xb9, 0x7e, 0x65, 0xc8, 0x15, 0xac, 0x35, 0x4c, 0x82, 0xb2, 0x90, 0xc6, 0x0e, 0xdb, 0x50, 0x37,
	0x49, 0xc3, 0x7d, 0xb7, 0x3f, 0x27, 0xcc, 0xf5, 0x29, 0xc3, 0xae, 0x68, 0x89, 0x34, 0x4a, 0x65,
	0x34, 0x0d, 0xe0, 0xfb, 0x77, 0xd5, 0x03, 0x9e, 0xda, 0x97, 0xf8, 0xb6, 0x79, 0xa0, 0xaa, 0x6e,
	0x4a, 0x83, 0x9e, 0x63, 0x4f, 0x50, 0x32, 0xe5, 0x27, 0x61, 0x62, 0x6d, 0x59, 0xb5, 0xe3, 0xf9,
	0x78, 0x04, 0xfa, 0xcb, 0x98, 0xe1, 0x22, 0x4f, 0x43, 0xba, 0x38, 0xd5, 0x0a, 0x31, 0x9e, 0x3b,
	0xc5, 0x43, 0xca, 0x9f, 0xf7, 0xc2, 0x58, 0x48, 0x7b, 0x06, 0x33, 0xfc, 0x3f, 0x4d, 0xac, 0xab,
	0xdc, 0x72, 0x74, 0x6d, 0x53, 0xc5, 0xda, 0xa6, 0x34, 0xe4, 0x39, 0xe6, 0x82, 0x53, 0xda, 0x26,
	0x42, 0x90, 0xb2, 0x71, 0x8d, 0x49, 0xc3, 0xdc, 0x24, 0x7f, 0x46, 0x12, 0x0c, 0x9a, 0xb8, 0x51,
	0xa3, 0xb8, 0x2c, 0x41, 0x4e, 0x98, 0x3b, 0xa4, 0x34, 0x7f, 0xca, 0xe7, 0x60, 0x3c, 0x5a, 0x23,
	0x9e, 0xd9, 0x93, 0xe1, 0x12, 0x65, 0x92, 0x4b, 0xe4, 0x42, 0x9b, 0x15, 0x7a, 0x51, 0x80, 0xc3,
	0xe7, 0x18, 0x33, 0x7d, 0xc0, 0x9d, 0xa9, 0x4f, 0x20, 0xb0, 0xbe, 0x70, 0x60, 0x67, 0x00, 0xad,
	0x2d, 0xab, 0x1b, 0x11, 0x42, 0xf9, 0x70, 0x58, 0x52, 0xcb, 0x47, 0x84, 0x79, 0x33, 0x28, 0x1b,
	0x26, 0xdb, 0xe9, 0x51, 0xb7, 0x1c, 0x62, 0x35, 0x4e, 0x79, 0x25, 0x8c, 0x92, 0x16, 0xfe, 0x3e,
	0xe9, 0x48, 0x6b, 0xf4, 0x45, 0x5a, 0x43, 0xfe, 0x52, 0x08, 0x0e, 0x8e, 0x6a, 0x13, 0x76, 0x70,
	0x9f, 0x05, 0x18, 0x6a, 0xfa, 0xe4, 0x0e, 0xd3, 0xc5, 0xf1, 0x7c, 0x9d, 0xf1, 0xad, 0x95, 0xf7,
	0xad, 0x97, 0x8c, 0x0a, 0x55, 0x06, 0x7d, 0x1a, 0xe8, 0x51, 0x48, 0x57, 0x1c, 0xe6, 0x58, 0x44,
	0xe5, 0xdd, 0x94, 0xe2, 0xef, 0xdc, 0xd3, 0x7a, 0xe7, 0x09, 0xae, 0x5b, 0xc5, 0x35, 0xa6, 0x40,
	0xa5, 0xf5, 0xec, 0x76, 0x35, 0x79, 0xde, 0xd4, 0x2d, 0x62, 0xab, 0xba, 0xc1, 0x9b, 0xbe, 0x5f,
	0x19, 0xf6, 0x25, 0x25, 0x43, 0xde, 0x11, 0x40, 0x0a, 0x44, 0xa6, 0x59, 0x04, 0x33, 0xe2, 0xa7,
	0xfd, 0x00, 0xc1, 0x2d, 0xc0, 0x80, 0x37, 0x1b, 0x7e, 0x68, 0x5d, 0x17, 0x8a, 0x0f, 0x95, 0xb7,
	0x05, 0xb8, 0x2f, 0x94, 0x65, 0xa3, 0xec, 0x56, 0x7e, 0x8d, 0x1e, 0x9c, 0x4f, 0x1e, 0x52, 0x6e,
	0xfb, 0xf8, 0x6c, 0xba, 0xcd, 0x0e, 0xc7, 0xc9, 0xaf, 0x08, 0x90, 0x8b, 0x50, 0x71, 0xfb, 0xf1,
	0xdf, 0xa2, 0x53, 0x8c, 0xa4, 0xa7, 0x1b, 0xa1, 0x40, 0x76, 0x82, 0x9d, 0xaf, 0xd5, 0xa8, 0x7d,
	0xb7, 0x0a, 0xf5, 0xa1, 0x00, 0x99, 0x00, 0x15, 0xd3, 0xb1, 0x37, 0x2e, 0x9a, 0x65, 0xcc, 0x88,
	0xcd, 0x47, 0xfa, 0x3f, 0x9b, 0x43, 0x24, 0xc3, 0x21, 0x83, 0x32, 0xbd, 0xe2, 0x2e, 0x2a, 0x9d,
	0x1a, 0x7c, 0x06, 0x86, 0x94, 0x90, 0x0c, 0xcd, 0xc3, 0xa0, 0xe3, 0x91, 0xe1, 0xdd, 0x9e, 0x2e,
	0x8a, 0xad, 0x11, 0xf1, 0x49, 0x2a, 0x4d, 0x80, 0x7c, 0x53, 0x80, 0x63, 0x91, 0x40, 0xfc, 0xb0,
	0xef, 0x4c, 0x3c, 0xe1, 0x93, 0x93, 0x8a, 0x9e, 0x9c, 0x7f, 0x12, 0xca, 0x4f, 0xe1, 0xe1, 0x71,
	0x43, 0x51, 0x4c, 0x4d, 0x21, 0xb6, 0x53, 0x63, 0x77, 0x37, 0x8a, 0xe3, 0x30, 0xe6, 0x1f, 0x4e,
	0x8b, 0x6c, 0xa9, 0x75, 0xbb, 0xda, 0xbe, 0xbe, 0xa3, 0x9e, 0x42, 0x21, 0x5b, 0x4f, 0xd9, 0xd5,
	0x52, 0x19, 0x3d, 0x00, 0x87, 0x2d, 0x53, 0x53, 0x2d, 0xce, 0x5a, 0xe5, 0x13, 0x3b, 0xc0, 0x8f,
	0xc8, 0x88, 0x15, 0x8c, 0x65, 0xfe, 0x72, 0x0a, 0x46, 0x42, 0x84, 0xd1, 0x18, 0x8c, 0x2c, 0x2a,
	0x8b, 0x0b, 0x45, 0xf5, 0xe2, 0xca, 0xd2, 0xca, 0xf9, 0xa7, 0x57, 0xc4, 0x1e, 0x34, 0x0b, 0x92,
	0x27, 0x8a, 0x7f, 0xef, 0x88, 0xd7, 0xae, 0xbc, 0x76, 0xed, 0x8f, 0xfd, 0xfd, 0xfd, 0x7d, 0x01,
	0x1d, 0x85, 0xc9, 0x04, 0x98, 0xeb, 0x46, 0x7c, 0xf9, 0xf5, 0xef, 0x77, 0xfa, 0x90, 0x0c, 0x13,
	0x1e, 0x20, 0x72, 0xba, 0xc4, 0x8f, 0xdf, 0xba, 0xf5, 0x8d, 0x6f, 0x44, 0x86, 0x4c, 0xc8, 0x48,
	0xe8, 0x30, 0x89, 0x9f, 0xde, 0x7e, 0xff, 0xab, 0x01, 0x94, 0x8b, 0xf0, 0x09, 0x9c, 0x11, 0xf1,
	0xea, 0xab, 0xbb, 0x3f, 0x0a, 0x68, 0x06, 0xa6, 0xc2, 0x88, 0xd0, 0x3a, 0x16, 0x5f, 0xfa, 0xe1,
	0xbd, 0xed, 0x14, 0x7a, 0x18, 0x8e, 0x46, 0xcd, 0x44, 0xf6, 0xa4, 0xf8, 0xf3, 0xd7, 0x6f, 0x5f,
	0xff, 0xd5, 0x23, 0x76, 0x12, 0x66, 0xe2, 0xe8, 0xd8, 0x2a, 0x13, 0xdf, 0xf9, 0xe8, 0xdd, 0x6f,
	0x7f, 0xeb, 0x10, 0x4a, 0x70, 0xd3, 0x88, 0x9f, 0xbd, 0x70, 0xe3, 0xba, 0x80, 0x66, 0x61, 0x3a,
	0x8c, 0x89, 0xac, 0x00, 0xf1, 0xc6, 0x95, 0x2f, 0x2e, 0xa7, 0xd0, 0x43, 0x70, 0x7f, 0x1c, 0x16,
	0x1f, 0x30, 0xf1, 0x97, 0xdd, 0xdf, 0x8b, 0xe8, 0xc1, 0x68, 0x5c, 0xb1, 0x16, 0x16, 0x3f, 0xd8,
	0x7d, 0x73, 0xa7, 0x37, 0x93, 0xda, 0x7e, 0x23, 0xdb, 0x53, 0xdc, 0xef, 0x07, 0x50, 0x2e, 0x2c,
	0x36, 0x37, 0xe0, 0x05, 0x18, 0x4f, 0xfc, 0x26, 0xc8, 0x05, 0x1a, 0x3c, 0xb1, 0x38, 0x99, 0xc4,
	0xab, 0x2b, 0xf7, 0xa0, 0xb3, 0x80, 0x12, 0xee, 0x7d, 0x36, 0xc9, 0x5e, 0x5b, 0x9f, 0x19, 0x69,
	0x59, 0x3b, 0x4d, 0x69, 0x4d, 0xee, 0x41, 0x4b, 0x30, 0x91, 0x7c, 0x5c, 0x8f, 0x25, 0x59, 0x0a,
	0x41, 0xe2, 0xc6, 0x56, 0xe1, 0x48, 0xe7, 0xeb, 0x38, 0x9b, 0x4c, 0x2d, 0x02, 0x8b, 0x1b, 0xad,
	0xc0, 0x74, 0xf7, 0x3b, 0x77, 0xbc, 0x93, 0xe1, 0x18, 0x34, 0xd3, 0xf1, 0xf3, 0x4d, 0xee, 0x41,
	0xa5, 0x76, 0x89, 0x42, 0xc7, 0x2b, 0xb1, 0x44, 0x41, 0x44, 0x9c, 0xf2, 0x79, 0x98, 0xec, 0x74,
	0x7c, 0x66, 0x92, 0xac, 0x45, 0x40, 0x71, 0x83, 0xcf, 0x42, 0xf6, 0x2f, 0x8e, 0xc0, 0x7c, 0x27,
	0xbb, 0x71, 0x6c, 0xd7, 0xba, 0xc5, 0x17, 0xf3, 0x6c, 0x27, 0xcb, 0x21, 0x58, 0xcc, 0xe8, 0xe9,
	0xa5, 0xdb, 0xb7, 0xb2, 0xc2, 0xcd, 0xbd, 0xac, 0xf0, 0xc9, 0x5e, 0x56, 0xf8, 0x6e, 0x2f, 0x2b,
	0x3c, 0xf3, 0x38, 0x23, 0xb8, 0x5e, 0xb5, 0x70, 0x3d, 0xaf, 0xd3, 0x42, 0xf3, 0xf9, 0x84, 0xf7,
	0xdf, 0x51, 0x01, 0x9b, 0x66, 0x41, 0x37, 0x18, 0xb1, 0x2a, 0x58, 0x23, 0x05, 0xdf, 0x4f, 0xf3,
	0xef, 0xfa, 0x00, 0x37, 0xbd, 0xf0, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xba, 0x92, 0x9d,
	0xe7, 0x0f, 0x00, 0x00,
}

func (this *SessionClientEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&session.SessionClientEvent{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ServerId: "+fmt.Sprintf("%#v", this.ServerId)+",\n")
	s = append(s, "ConnType: "+fmt.Sprintf("%#v", this.ConnType)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "ClientIp: "+fmt.Sprintf("%#v", this.ClientIp)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionClientEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&session.TLSessionClientEvent{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SessionClientData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&session.SessionClientData{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "ServerId: "+fmt.Sprintf("%#v", this.ServerId)+",\n")
	s = append(s, "ConnType: "+fmt.Sprintf("%#v", this.ConnType)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "ClientIp: "+fmt.Sprintf("%#v", this.ClientIp)+",\n")
	s = append(s, "QuickAck: "+fmt.Sprintf("%#v", this.QuickAck)+",\n")
	s = append(s, "Salt: "+fmt.Sprintf("%#v", this.Salt)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionClientData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&session.TLSessionClientData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HttpSessionData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&session.HttpSessionData{")
	s = append(s, "PredicateName: "+fmt.Sprintf("%#v", this.PredicateName)+",\n")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLHttpSessionData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&session.TLHttpSessionData{")
	if this.Data2 != nil {
		s = append(s, "Data2: "+fmt.Sprintf("%#v", this.Data2)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionQueryAuthKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&session.TLSessionQueryAuthKey{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionSetAuthKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&session.TLSessionSetAuthKey{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.AuthKey != nil {
		s = append(s, "AuthKey: "+fmt.Sprintf("%#v", this.AuthKey)+",\n")
	}
	if this.FutureSalt != nil {
		s = append(s, "FutureSalt: "+fmt.Sprintf("%#v", this.FutureSalt)+",\n")
	}
	s = append(s, "ExpiresIn: "+fmt.Sprintf("%#v", this.ExpiresIn)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionCreateSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&session.TLSessionCreateSession{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Client != nil {
		s = append(s, "Client: "+fmt.Sprintf("%#v", this.Client)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionSendDataToSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&session.TLSessionSendDataToSession{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionSendHttpDataToSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&session.TLSessionSendHttpDataToSession{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Client != nil {
		s = append(s, "Client: "+fmt.Sprintf("%#v", this.Client)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionCloseSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&session.TLSessionCloseSession{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	if this.Client != nil {
		s = append(s, "Client: "+fmt.Sprintf("%#v", this.Client)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionPushUpdatesData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&session.TLSessionPushUpdatesData{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "Notification: "+fmt.Sprintf("%#v", this.Notification)+",\n")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionPushSessionUpdatesData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&session.TLSessionPushSessionUpdatesData{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TLSessionPushRpcResultData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&session.TLSessionPushRpcResultData{")
	s = append(s, "Constructor: "+fmt.Sprintf("%#v", this.Constructor)+",\n")
	s = append(s, "AuthKeyId: "+fmt.Sprintf("%#v", this.AuthKeyId)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "ClientReqMsgId: "+fmt.Sprintf("%#v", this.ClientReqMsgId)+",\n")
	s = append(s, "RpcResultData: "+fmt.Sprintf("%#v", this.RpcResultData)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSessionTl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCSessionClient is the client API for RPCSession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCSessionClient interface {
	// session.queryAuthKey auth_key_id:long = AuthKeyInfo;
	SessionQueryAuthKey(ctx context.Context, in *TLSessionQueryAuthKey, opts ...grpc.CallOption) (*mtproto.AuthKeyInfo, error)
	// session.setAuthKey auth_key:AuthKeyInfo future_salt:FutureSalt expires_in:int = Bool;
	SessionSetAuthKey(ctx context.Context, in *TLSessionSetAuthKey, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// session.createSession client:SessionClientEvent = Bool;
	SessionCreateSession(ctx context.Context, in *TLSessionCreateSession, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// session.sendDataToSession data:SessionClientData = Bool;
	SessionSendDataToSession(ctx context.Context, in *TLSessionSendDataToSession, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// session.sendHttpDataToSession client:SessionClientData = HttpSessionData;
	SessionSendHttpDataToSession(ctx context.Context, in *TLSessionSendHttpDataToSession, opts ...grpc.CallOption) (*HttpSessionData, error)
	// session.closeSession client:SessionClientEvent = Bool;
	SessionCloseSession(ctx context.Context, in *TLSessionCloseSession, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// session.pushUpdatesData flags:# auth_key_id:long notification:flags.0?true updates:Updates = Bool;
	SessionPushUpdatesData(ctx context.Context, in *TLSessionPushUpdatesData, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// session.pushSessionUpdatesData auth_key_id:long session_id:long updates:Updates = Bool;
	SessionPushSessionUpdatesData(ctx context.Context, in *TLSessionPushSessionUpdatesData, opts ...grpc.CallOption) (*mtproto.Bool, error)
	// session.pushRpcResultData auth_key_id:long session_id:long client_req_msg_id:long rpc_result_data:bytes = Bool;
	SessionPushRpcResultData(ctx context.Context, in *TLSessionPushRpcResultData, opts ...grpc.CallOption) (*mtproto.Bool, error)
}

type rPCSessionClient struct {
	cc *grpc.ClientConn
}

func NewRPCSessionClient(cc *grpc.ClientConn) RPCSessionClient {
	return &rPCSessionClient{cc}
}

func (c *rPCSessionClient) SessionQueryAuthKey(ctx context.Context, in *TLSessionQueryAuthKey, opts ...grpc.CallOption) (*mtproto.AuthKeyInfo, error) {
	out := new(mtproto.AuthKeyInfo)
	err := c.cc.Invoke(ctx, "/session.RPCSession/session_queryAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSessionClient) SessionSetAuthKey(ctx context.Context, in *TLSessionSetAuthKey, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/session.RPCSession/session_setAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSessionClient) SessionCreateSession(ctx context.Context, in *TLSessionCreateSession, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/session.RPCSession/session_createSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSessionClient) SessionSendDataToSession(ctx context.Context, in *TLSessionSendDataToSession, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/session.RPCSession/session_sendDataToSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSessionClient) SessionSendHttpDataToSession(ctx context.Context, in *TLSessionSendHttpDataToSession, opts ...grpc.CallOption) (*HttpSessionData, error) {
	out := new(HttpSessionData)
	err := c.cc.Invoke(ctx, "/session.RPCSession/session_sendHttpDataToSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSessionClient) SessionCloseSession(ctx context.Context, in *TLSessionCloseSession, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/session.RPCSession/session_closeSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSessionClient) SessionPushUpdatesData(ctx context.Context, in *TLSessionPushUpdatesData, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/session.RPCSession/session_pushUpdatesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSessionClient) SessionPushSessionUpdatesData(ctx context.Context, in *TLSessionPushSessionUpdatesData, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/session.RPCSession/session_pushSessionUpdatesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSessionClient) SessionPushRpcResultData(ctx context.Context, in *TLSessionPushRpcResultData, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, "/session.RPCSession/session_pushRpcResultData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCSessionServer is the server API for RPCSession service.
type RPCSessionServer interface {
	// session.queryAuthKey auth_key_id:long = AuthKeyInfo;
	SessionQueryAuthKey(context.Context, *TLSessionQueryAuthKey) (*mtproto.AuthKeyInfo, error)
	// session.setAuthKey auth_key:AuthKeyInfo future_salt:FutureSalt expires_in:int = Bool;
	SessionSetAuthKey(context.Context, *TLSessionSetAuthKey) (*mtproto.Bool, error)
	// session.createSession client:SessionClientEvent = Bool;
	SessionCreateSession(context.Context, *TLSessionCreateSession) (*mtproto.Bool, error)
	// session.sendDataToSession data:SessionClientData = Bool;
	SessionSendDataToSession(context.Context, *TLSessionSendDataToSession) (*mtproto.Bool, error)
	// session.sendHttpDataToSession client:SessionClientData = HttpSessionData;
	SessionSendHttpDataToSession(context.Context, *TLSessionSendHttpDataToSession) (*HttpSessionData, error)
	// session.closeSession client:SessionClientEvent = Bool;
	SessionCloseSession(context.Context, *TLSessionCloseSession) (*mtproto.Bool, error)
	// session.pushUpdatesData flags:# auth_key_id:long notification:flags.0?true updates:Updates = Bool;
	SessionPushUpdatesData(context.Context, *TLSessionPushUpdatesData) (*mtproto.Bool, error)
	// session.pushSessionUpdatesData auth_key_id:long session_id:long updates:Updates = Bool;
	SessionPushSessionUpdatesData(context.Context, *TLSessionPushSessionUpdatesData) (*mtproto.Bool, error)
	// session.pushRpcResultData auth_key_id:long session_id:long client_req_msg_id:long rpc_result_data:bytes = Bool;
	SessionPushRpcResultData(context.Context, *TLSessionPushRpcResultData) (*mtproto.Bool, error)
}

// UnimplementedRPCSessionServer can be embedded to have forward compatible implementations.
type UnimplementedRPCSessionServer struct {
}

func (*UnimplementedRPCSessionServer) SessionQueryAuthKey(ctx context.Context, req *TLSessionQueryAuthKey) (*mtproto.AuthKeyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionQueryAuthKey not implemented")
}
func (*UnimplementedRPCSessionServer) SessionSetAuthKey(ctx context.Context, req *TLSessionSetAuthKey) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionSetAuthKey not implemented")
}
func (*UnimplementedRPCSessionServer) SessionCreateSession(ctx context.Context, req *TLSessionCreateSession) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionCreateSession not implemented")
}
func (*UnimplementedRPCSessionServer) SessionSendDataToSession(ctx context.Context, req *TLSessionSendDataToSession) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionSendDataToSession not implemented")
}
func (*UnimplementedRPCSessionServer) SessionSendHttpDataToSession(ctx context.Context, req *TLSessionSendHttpDataToSession) (*HttpSessionData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionSendHttpDataToSession not implemented")
}
func (*UnimplementedRPCSessionServer) SessionCloseSession(ctx context.Context, req *TLSessionCloseSession) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionCloseSession not implemented")
}
func (*UnimplementedRPCSessionServer) SessionPushUpdatesData(ctx context.Context, req *TLSessionPushUpdatesData) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionPushUpdatesData not implemented")
}
func (*UnimplementedRPCSessionServer) SessionPushSessionUpdatesData(ctx context.Context, req *TLSessionPushSessionUpdatesData) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionPushSessionUpdatesData not implemented")
}
func (*UnimplementedRPCSessionServer) SessionPushRpcResultData(ctx context.Context, req *TLSessionPushRpcResultData) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionPushRpcResultData not implemented")
}

func RegisterRPCSessionServer(s *grpc.Server, srv RPCSessionServer) {
	s.RegisterService(&_RPCSession_serviceDesc, srv)
}

func _RPCSession_SessionQueryAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSessionQueryAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSessionServer).SessionQueryAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.RPCSession/SessionQueryAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSessionServer).SessionQueryAuthKey(ctx, req.(*TLSessionQueryAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSession_SessionSetAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSessionSetAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSessionServer).SessionSetAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.RPCSession/SessionSetAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSessionServer).SessionSetAuthKey(ctx, req.(*TLSessionSetAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSession_SessionCreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSessionCreateSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSessionServer).SessionCreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.RPCSession/SessionCreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSessionServer).SessionCreateSession(ctx, req.(*TLSessionCreateSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSession_SessionSendDataToSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSessionSendDataToSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSessionServer).SessionSendDataToSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.RPCSession/SessionSendDataToSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSessionServer).SessionSendDataToSession(ctx, req.(*TLSessionSendDataToSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSession_SessionSendHttpDataToSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSessionSendHttpDataToSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSessionServer).SessionSendHttpDataToSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.RPCSession/SessionSendHttpDataToSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSessionServer).SessionSendHttpDataToSession(ctx, req.(*TLSessionSendHttpDataToSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSession_SessionCloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSessionCloseSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSessionServer).SessionCloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.RPCSession/SessionCloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSessionServer).SessionCloseSession(ctx, req.(*TLSessionCloseSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSession_SessionPushUpdatesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSessionPushUpdatesData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSessionServer).SessionPushUpdatesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.RPCSession/SessionPushUpdatesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSessionServer).SessionPushUpdatesData(ctx, req.(*TLSessionPushUpdatesData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSession_SessionPushSessionUpdatesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSessionPushSessionUpdatesData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSessionServer).SessionPushSessionUpdatesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.RPCSession/SessionPushSessionUpdatesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSessionServer).SessionPushSessionUpdatesData(ctx, req.(*TLSessionPushSessionUpdatesData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSession_SessionPushRpcResultData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSessionPushRpcResultData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSessionServer).SessionPushRpcResultData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.RPCSession/SessionPushRpcResultData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSessionServer).SessionPushRpcResultData(ctx, req.(*TLSessionPushRpcResultData))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCSession_serviceDesc = grpc.ServiceDesc{
	ServiceName: "session.RPCSession",
	HandlerType: (*RPCSessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "session_queryAuthKey",
			Handler:    _RPCSession_SessionQueryAuthKey_Handler,
		},
		{
			MethodName: "session_setAuthKey",
			Handler:    _RPCSession_SessionSetAuthKey_Handler,
		},
		{
			MethodName: "session_createSession",
			Handler:    _RPCSession_SessionCreateSession_Handler,
		},
		{
			MethodName: "session_sendDataToSession",
			Handler:    _RPCSession_SessionSendDataToSession_Handler,
		},
		{
			MethodName: "session_sendHttpDataToSession",
			Handler:    _RPCSession_SessionSendHttpDataToSession_Handler,
		},
		{
			MethodName: "session_closeSession",
			Handler:    _RPCSession_SessionCloseSession_Handler,
		},
		{
			MethodName: "session_pushUpdatesData",
			Handler:    _RPCSession_SessionPushUpdatesData_Handler,
		},
		{
			MethodName: "session_pushSessionUpdatesData",
			Handler:    _RPCSession_SessionPushSessionUpdatesData_Handler,
		},
		{
			MethodName: "session_pushRpcResultData",
			Handler:    _RPCSession_SessionPushRpcResultData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.tl.proto",
}

func (m *SessionClientEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionClientEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionClientEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientIp) > 0 {
		i -= len(m.ClientIp)
		copy(dAtA[i:], m.ClientIp)
		i = encodeVarintSessionTl(dAtA, i, uint64(len(m.ClientIp)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SessionId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x30
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x28
	}
	if m.ConnType != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.ConnType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintSessionTl(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintSessionTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionClientEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionClientEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionClientEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SessionClientData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionClientData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionClientData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintSessionTl(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x52
	}
	if m.Salt != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Salt))
		i--
		dAtA[i] = 0x48
	}
	if m.QuickAck != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.QuickAck))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ClientIp) > 0 {
		i -= len(m.ClientIp)
		copy(dAtA[i:], m.ClientIp)
		i = encodeVarintSessionTl(dAtA, i, uint64(len(m.ClientIp)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SessionId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x30
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x28
	}
	if m.ConnType != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.ConnType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServerId) > 0 {
		i -= len(m.ServerId)
		copy(dAtA[i:], m.ServerId)
		i = encodeVarintSessionTl(dAtA, i, uint64(len(m.ServerId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintSessionTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionClientData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionClientData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionClientData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HttpSessionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HttpSessionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HttpSessionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintSessionTl(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PredicateName) > 0 {
		i -= len(m.PredicateName)
		copy(dAtA[i:], m.PredicateName)
		i = encodeVarintSessionTl(dAtA, i, uint64(len(m.PredicateName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHttpSessionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHttpSessionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHttpSessionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionQueryAuthKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionQueryAuthKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionQueryAuthKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionSetAuthKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionSetAuthKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionSetAuthKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpiresIn != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.ExpiresIn))
		i--
		dAtA[i] = 0x28
	}
	if m.FutureSalt != nil {
		{
			size, err := m.FutureSalt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AuthKey != nil {
		{
			size, err := m.AuthKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionCreateSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionCreateSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionCreateSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionSendDataToSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionSendDataToSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionSendDataToSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionSendHttpDataToSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionSendHttpDataToSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionSendHttpDataToSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionCloseSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionCloseSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionCloseSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Client != nil {
		{
			size, err := m.Client.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionPushUpdatesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionPushUpdatesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionPushUpdatesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Updates != nil {
		{
			size, err := m.Updates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Notification {
		i--
		if m.Notification {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionPushSessionUpdatesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionPushSessionUpdatesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionPushSessionUpdatesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Updates != nil {
		{
			size, err := m.Updates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionTl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SessionId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x20
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLSessionPushRpcResultData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSessionPushRpcResultData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSessionPushRpcResultData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RpcResultData) > 0 {
		i -= len(m.RpcResultData)
		copy(dAtA[i:], m.RpcResultData)
		i = encodeVarintSessionTl(dAtA, i, uint64(len(m.RpcResultData)))
		i--
		dAtA[i] = 0x32
	}
	if m.ClientReqMsgId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.ClientReqMsgId))
		i--
		dAtA[i] = 0x28
	}
	if m.SessionId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x20
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.Constructor != 0 {
		i = encodeVarintSessionTl(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSessionTl(dAtA []byte, offset int, v uint64) int {
	offset -= sovSessionTl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionClientEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.ConnType != 0 {
		n += 1 + sovSessionTl(uint64(m.ConnType))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovSessionTl(uint64(m.AuthKeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovSessionTl(uint64(m.SessionId))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionClientEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionClientData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	l = len(m.ServerId)
	if l > 0 {
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.ConnType != 0 {
		n += 1 + sovSessionTl(uint64(m.ConnType))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovSessionTl(uint64(m.AuthKeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovSessionTl(uint64(m.SessionId))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.QuickAck != 0 {
		n += 1 + sovSessionTl(uint64(m.QuickAck))
	}
	if m.Salt != 0 {
		n += 1 + sovSessionTl(uint64(m.Salt))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionClientData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HttpSessionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PredicateName)
	if l > 0 {
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLHttpSessionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionQueryAuthKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovSessionTl(uint64(m.AuthKeyId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionSetAuthKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	if m.AuthKey != nil {
		l = m.AuthKey.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.FutureSalt != nil {
		l = m.FutureSalt.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovSessionTl(uint64(m.ExpiresIn))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionCreateSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionSendDataToSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionSendHttpDataToSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionCloseSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	if m.Client != nil {
		l = m.Client.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionPushUpdatesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovSessionTl(uint64(m.AuthKeyId))
	}
	if m.Notification {
		n += 2
	}
	if m.Updates != nil {
		l = m.Updates.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionPushSessionUpdatesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovSessionTl(uint64(m.AuthKeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovSessionTl(uint64(m.SessionId))
	}
	if m.Updates != nil {
		l = m.Updates.Size()
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TLSessionPushRpcResultData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovSessionTl(uint64(m.Constructor))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovSessionTl(uint64(m.AuthKeyId))
	}
	if m.SessionId != 0 {
		n += 1 + sovSessionTl(uint64(m.SessionId))
	}
	if m.ClientReqMsgId != 0 {
		n += 1 + sovSessionTl(uint64(m.ClientReqMsgId))
	}
	l = len(m.RpcResultData)
	if l > 0 {
		n += 1 + l + sovSessionTl(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSessionTl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSessionTl(x uint64) (n int) {
	return sovSessionTl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionClientEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionClientEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionClientEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnType", wireType)
			}
			m.ConnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionClientEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_sessionClientEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_sessionClientEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &SessionClientEvent{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionClientData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionClientData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionClientData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnType", wireType)
			}
			m.ConnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuickAck", wireType)
			}
			m.QuickAck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuickAck |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionClientData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_sessionClientData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_sessionClientData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &SessionClientData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HttpSessionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HttpSessionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HttpSessionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PredicateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHttpSessionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_httpSessionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_httpSessionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &HttpSessionData{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionQueryAuthKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_session_queryAuthKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_session_queryAuthKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionSetAuthKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_session_setAuthKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_session_setAuthKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthKey == nil {
				m.AuthKey = &mtproto.AuthKeyInfo{}
			}
			if err := m.AuthKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutureSalt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FutureSalt == nil {
				m.FutureSalt = &mtproto.FutureSalt{}
			}
			if err := m.FutureSalt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionCreateSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_session_createSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_session_createSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &SessionClientEvent{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionSendDataToSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_session_sendDataToSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_session_sendDataToSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SessionClientData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionSendHttpDataToSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_session_sendHttpDataToSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_session_sendHttpDataToSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &SessionClientData{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionCloseSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_session_closeSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_session_closeSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Client == nil {
				m.Client = &SessionClientEvent{}
			}
			if err := m.Client.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionPushUpdatesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_session_pushUpdatesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_session_pushUpdatesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Notification = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updates == nil {
				m.Updates = &mtproto.Updates{}
			}
			if err := m.Updates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionPushSessionUpdatesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_session_pushSessionUpdatesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_session_pushSessionUpdatesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updates == nil {
				m.Updates = &mtproto.Updates{}
			}
			if err := m.Updates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSessionPushRpcResultData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_session_pushRpcResultData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_session_pushRpcResultData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientReqMsgId", wireType)
			}
			m.ClientReqMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientReqMsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcResultData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSessionTl
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionTl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RpcResultData = append(m.RpcResultData[:0], dAtA[iNdEx:postIndex]...)
			if m.RpcResultData == nil {
				m.RpcResultData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionTl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionTl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessionTl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessionTl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionTl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSessionTl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSessionTl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSessionTl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSessionTl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessionTl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSessionTl = fmt.Errorf("proto: unexpected end of group")
)
